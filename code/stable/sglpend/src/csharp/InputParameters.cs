/** \file InputParameters.cs
    \author Olu Owojaiye
    \brief Provides the function for reading inputs, the function for calculating derived values, and the function for checking the physical constraints on the input
    \note Generated by Drasil v0.1-alpha
*/

using System;
using System.IO;

public class InputParameters {
    
    /** \brief Reads input from a file with the given file name
        \param filename name of the input file
        \param L_rod length of the rod (m)
        \param m mass (kg)
        \param α angular acceleration (rad/s^2)
        \param θ_p displacement angle of the pendulum (rad)
        \param θ_i initial pendulum angle (rad)
    */
    public static void get_input(string filename, out double L_rod, out double m, out double α, out double θ_p, out double θ_i) {
        StreamReader infile;
        infile = new StreamReader(filename);
        infile.ReadLine();
        L_rod = Double.Parse(infile.ReadLine());
        infile.ReadLine();
        m = Double.Parse(infile.ReadLine());
        infile.ReadLine();
        α = Double.Parse(infile.ReadLine());
        infile.ReadLine();
        θ_p = Double.Parse(infile.ReadLine());
        infile.ReadLine();
        θ_i = Double.Parse(infile.ReadLine());
        infile.Close();
    }
    
    /** \brief Calculates values that can be immediately derived from the inputs
        \param L_rod length of the rod (m)
        \param θ_i initial pendulum angle (rad)
        \param p_x^i x-component of initial position (m)
        \param p_y^i y-component of initial position (m)
    */
    public static void derived_values(double L_rod, double θ_i, out double p_x^i, out double p_y^i) {
        p_x^i = L_rod * Math.Sin(θ_i);
        
        p_y^i = -(L_rod * Math.Cos(θ_i));
    }
    
    /** \brief Verifies that input values satisfy the physical constraints
        \param L_rod length of the rod (m)
        \param θ_i initial pendulum angle (rad)
    */
    public static void input_constraints(double L_rod, double θ_i) {
        if (!(L_rod > 0.0)) {
            Console.Write("Warning: ");
            Console.Write("L_rod has value ");
            Console.Write(L_rod);
            Console.Write(", but is suggested to be ");
            Console.Write("above ");
            Console.Write(0.0);
            Console.WriteLine(".");
        }
        if (!(θ_i > 0.0)) {
            Console.Write("Warning: ");
            Console.Write("θ_i has value ");
            Console.Write(θ_i);
            Console.Write(", but is suggested to be ");
            Console.Write("above ");
            Console.Write(0.0);
            Console.WriteLine(".");
        }
    }
}
