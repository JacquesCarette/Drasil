/** \file HelloWorld.cpp
    \author Brooks MacLachlan
    \brief Tests various GOOL functions. It should run without errors.
    \note Generated by Drasil v0.1-alpha
*/

#include <algorithm>
#include <iostream>
#include <iterator>
#include <limits>
#include <math.h>
#include <sstream>
#include <string>
#include <vector>

#include "Helper.hpp"

using std::string;
using std::vector;

int main(int argc, const char *argv[]) {
    // Initializing variables
    int a;
    int b = 5;
    vector<double> myOtherList{1.0, 1.5};
    int oneIndex = find(myOtherList.begin(), myOtherList.end(), 1.0) - myOtherList.begin();
    std::cout << oneIndex << std::endl;
    a = (int)(myOtherList.size());
    myOtherList.insert(myOtherList.begin() + 2, 2.0);
    myOtherList.push_back(2.5);
    double e;
    e = myOtherList.at(1);
    myOtherList.at(1) = 17.4;
    vector<string> myName(7);
    myName.clear();
    std::stringstream ss;
    ss.str("Brooks Mac");
    string word;
    while (std::getline(ss, word, ' ')) {
        myName.push_back(word);
    }
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(myName.size()) - 1; list_i1++) {
        std::cout << myName.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(myName.size()) > 0) {
        std::cout << myName.at((int)(myName.size()) - 1);
    }
    std::cout << "]" << std::endl;
    vector<bool> boringList{false, false, false, false, false};
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(boringList.size()) - 1; list_i1++) {
        std::cout << boringList.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(boringList.size()) > 0) {
        std::cout << boringList.at((int)(boringList.size()) - 1);
    }
    std::cout << "]" << std::endl;
    
    // List slicing tests
    // Create variables for list slices
    vector<double> mySlicedList(2);
    vector<double> mySlicedList2(2);
    vector<double> mySlicedList3(3);
    vector<double> mySlicedList4(0);
    vector<double> mySlicedList5(2);
    vector<double> mySlicedList6(2);
    vector<double> mySlicedList7(4);
    vector<double> mySlicedList8(3);
    vector<double> mySlicedList9(2);
    vector<double> mySlicedList10(3);
    vector<double> mySlicedList11(0);
    
    // Create some variables for later tests
    int x = 3;
    int y = 1;
    int z = -1;
    
    vector<double> temp(0);
    for (int i = 1; i < 3; i++) {
        temp.push_back(myOtherList.at(i));
    }
    mySlicedList = temp;
    
    vector<double> temp0(0);
    for (int j = 1; j < 4; j += 2) {
        temp0.push_back(myOtherList.at(j));
    }
    mySlicedList2 = temp0;
    
    vector<double> temp1(0);
    for (int k = 1; k < (int)(myOtherList.size()); k++) {
        temp1.push_back(myOtherList.at(k));
    }
    mySlicedList3 = temp1;
    
    vector<double> temp2(0);
    for (int i0 = 3; i0 < 1; i0++) {
        temp2.push_back(myOtherList.at(i0));
    }
    mySlicedList4 = temp2;
    
    vector<double> temp3(0);
    for (int i1 = 3; i1 > 1; i1 += -1) {
        temp3.push_back(myOtherList.at(i1));
    }
    mySlicedList5 = temp3;
    
    vector<double> temp4(0);
    for (int i2 = (int)(myOtherList.size()) - 1; i2 > 1; i2 += -1) {
        temp4.push_back(myOtherList.at(i2));
    }
    mySlicedList6 = temp4;
    
    vector<double> temp5(0);
    for (int i3 = 3; i3 > -1; i3 += -1) {
        temp5.push_back(myOtherList.at(i3));
    }
    mySlicedList7 = temp5;
    
    vector<double> temp6(0);
    for (int i4 = 3; 0 < i4 && i4 <= 3 && z < 0; i4 += z) {
        temp6.push_back(myOtherList.at(i4));
    }
    mySlicedList8 = temp6;
    
    vector<double> temp7(0);
    for (int i5 = x; x <= i5 && i5 < y && z > 0 || y < i5 && i5 <= x && z < 0; i5 += z) {
        temp7.push_back(myOtherList.at(i5));
    }
    mySlicedList9 = temp7;
    
    vector<double> temp8(0);
    int endIdx = z > 0 ? (int)(myOtherList.size()) : -1;
    for (int i6 = 2; 2 <= i6 && i6 < endIdx && z > 0 || endIdx < i6 && i6 <= 2 && z < 0; i6 += z) {
        temp8.push_back(myOtherList.at(i6));
    }
    mySlicedList10 = temp8;
    
    vector<double> temp9(0);
    int endIdx0 = z > 0 ? (int)(myOtherList.size()) : -1;
    for (int i7 = 2; 2 <= i7 && i7 < endIdx0 && z > 0 || endIdx0 < i7 && i7 <= 2 && z < 0; i7 += z) {
        temp9.push_back(myOtherList.at(i7));
    }
    mySlicedList10 = temp9;
    
    vector<double> temp10(0);
    for (int i8 = y; y <= i8 && i8 < x && z > 0 || x < i8 && i8 <= y && z < 0; i8 += z) {
        temp10.push_back(myOtherList.at(i8));
    }
    mySlicedList11 = temp10;
    
    // Print results of list slicing tests
    std::cout << "" << std::endl;
    std::cout << "List slicing:" << std::endl;
    std::cout << "myOtherList: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(myOtherList.size()) - 1; list_i1++) {
        std::cout << myOtherList.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(myOtherList.size()) > 0) {
        std::cout << myOtherList.at((int)(myOtherList.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList.size()) - 1; list_i1++) {
        std::cout << mySlicedList.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList.size()) > 0) {
        std::cout << mySlicedList.at((int)(mySlicedList.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList2: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList2.size()) - 1; list_i1++) {
        std::cout << mySlicedList2.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList2.size()) > 0) {
        std::cout << mySlicedList2.at((int)(mySlicedList2.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList3: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList3.size()) - 1; list_i1++) {
        std::cout << mySlicedList3.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList3.size()) > 0) {
        std::cout << mySlicedList3.at((int)(mySlicedList3.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList4: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList4.size()) - 1; list_i1++) {
        std::cout << mySlicedList4.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList4.size()) > 0) {
        std::cout << mySlicedList4.at((int)(mySlicedList4.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList5: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList5.size()) - 1; list_i1++) {
        std::cout << mySlicedList5.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList5.size()) > 0) {
        std::cout << mySlicedList5.at((int)(mySlicedList5.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList6: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList6.size()) - 1; list_i1++) {
        std::cout << mySlicedList6.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList6.size()) > 0) {
        std::cout << mySlicedList6.at((int)(mySlicedList6.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList7: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList7.size()) - 1; list_i1++) {
        std::cout << mySlicedList7.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList7.size()) > 0) {
        std::cout << mySlicedList7.at((int)(mySlicedList7.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList8: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList8.size()) - 1; list_i1++) {
        std::cout << mySlicedList8.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList8.size()) > 0) {
        std::cout << mySlicedList8.at((int)(mySlicedList8.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList9: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList9.size()) - 1; list_i1++) {
        std::cout << mySlicedList9.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList9.size()) > 0) {
        std::cout << mySlicedList9.at((int)(mySlicedList9.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList10: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList10.size()) - 1; list_i1++) {
        std::cout << mySlicedList10.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList10.size()) > 0) {
        std::cout << mySlicedList10.at((int)(mySlicedList10.size()) - 1);
    }
    std::cout << "]" << std::endl;
    std::cout << "mySlicedList11: ";
    std::cout << "[";
    for (int list_i1 = 0; list_i1 < (int)(mySlicedList11.size()) - 1; list_i1++) {
        std::cout << mySlicedList11.at(list_i1);
        std::cout << ", ";
    }
    if ((int)(mySlicedList11.size()) > 0) {
        std::cout << mySlicedList11.at((int)(mySlicedList11.size()) - 1);
    }
    std::cout << "]" << std::endl;
    
    std::cout << "" << std::endl;
    if (b >= 6) {
        string dummy = "dummy";
    }
    else if (b == 5) {
        // If body ----------------------------------------------------------------
        int c;
        int d;
        a = 5;
        b = a + 2;
        c = b + 3;
        d = b;
        d -= a;
        c -= d;
        b += 17;
        c += 17;
        a++;
        d++;
        c--;
        b--;
        vector<int> myList(5);
        char myObj = 'o';
        const string myConst = "Imconstant";
        std::cout << myConst << std::endl;
        std::cout << a << std::endl;
        std::cout << b << std::endl;
        std::cout << c << std::endl;
        std::cout << d << std::endl;
        std::cout << "[";
        for (int list_i1 = 0; list_i1 < (int)(myOtherList.size()) - 1; list_i1++) {
            std::cout << myOtherList.at(list_i1);
            std::cout << ", ";
        }
        if ((int)(myOtherList.size()) > 0) {
            std::cout << myOtherList.at((int)(myOtherList.size()) - 1);
        }
        std::cout << "]" << std::endl;
        std::cout << "[";
        for (int list_i1 = 0; list_i1 < (int)(mySlicedList.size()) - 1; list_i1++) {
            std::cout << mySlicedList.at(list_i1);
            std::cout << ", ";
        }
        if ((int)(mySlicedList.size()) > 0) {
            std::cout << mySlicedList.at((int)(mySlicedList.size()) - 1);
        }
        std::cout << "]" << std::endl;
        std::cout << "Type an int" << std::endl;
        std::cin >> d;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        std::cout << "Type another" << std::endl;
        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
        
        std::cout << " too" << std::endl;
        std::cout << "boo";
        std::cout << true;
        std::cout << 0;
        std::cout << 'c';
        std::cout << !(true) << std::endl;
        std::cout << -1 << std::endl;
        std::cout << sqrt(4.0) << std::endl;
        std::cout << fabs(-4) << std::endl;
        std::cout << log10(2.0) << std::endl;
        std::cout << log(2.0) << std::endl;
        std::cout << exp(-2.0) << std::endl;
        std::cout << sin(2.0) << std::endl;
        std::cout << cos(2.0) << std::endl;
        std::cout << tan(2.0) << std::endl;
        std::cout << tan(2.0) << std::endl;
        std::cout << (true && false) << std::endl;
        std::cout << (true || false) << std::endl;
        std::cout << (true && !(false)) << std::endl;
        std::cout << !(true && true) << std::endl;
        std::cout << (6 + 2) << std::endl;
        std::cout << (6 - 2) << std::endl;
        std::cout << (6 * 2) << std::endl;
        std::cout << (6 / 2) << std::endl;
        std::cout << (6 % 4) << std::endl;
        std::cout << pow(6, 2) << std::endl;
        std::cout << (6 + 2 * 3) << std::endl;
        std::cout << (1.0 / sin(1.0)) << std::endl;
        std::cout << (1.0 / cos(1.0)) << std::endl;
        std::cout << a << std::endl;
        std::cout << (true ? 5 : 0) << std::endl;
        std::cout << (1.0 / tan(1.0)) << std::endl;
        // End If body ------------------------------------------------------------
    }
    else {
        std::cout << argv[6] << std::endl;
    }
    std::cout << "Ew, boring list!" << std::endl;
    switch(a) {
        case 5:
            b = 10;
            break;
        case 0:
            b = 5;
            break;
        default:
            b = 0;
            break;
    };
    for (int i = 0; i < 9; i += 1) {
        std::cout << i << std::endl;
    }
    while (a < 13) {
        std::cout << "Hello" << std::endl;
        a++;
    }
    for (std::vector<double>::iterator num = myOtherList.begin(); num != myOtherList.end(); num++) {
        std::cout << doubleAndAdd((*num), 1.0) << std::endl;
    }
    try {
        throw("Good-bye!");
    } catch (...) {
        std::cout << "Caught intentional error" << std::endl;
    }
    
    return 0;
}
