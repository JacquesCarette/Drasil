-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - GOOL SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-gool
@version 0.1.1.0

module Drasil.GOOL.Classes
class Pair p
pfst :: Pair p => p x y a -> x a
psnd :: Pair p => p x y b -> y b
pair :: Pair p => x a -> y a -> p x y a

module Drasil.GOOL.CodeAnalysis
data ExceptionType
Standard :: ExceptionType
FileNotFound :: ExceptionType
IO :: ExceptionType
data Exception
printExc :: Exception -> String
hasLoc :: Exception -> Bool
exception :: String -> String -> Exception
stdExc :: String -> Exception
class HasException r
toConcreteExc :: HasException r => ExceptionType -> r Exception
instance GHC.Classes.Eq Drasil.GOOL.CodeAnalysis.ExceptionType


-- | Defines the <a>CodeType</a> data type
module Drasil.GOOL.CodeType
type ClassName = String
data CodeType
Boolean :: CodeType
Integer :: CodeType
Float :: CodeType
Double :: CodeType
Char :: CodeType
String :: CodeType
InFile :: CodeType
OutFile :: CodeType
List :: CodeType -> CodeType
Array :: CodeType -> CodeType
Object :: ClassName -> CodeType
Func :: [CodeType] -> CodeType -> CodeType
Void :: CodeType
instance GHC.Show.Show Drasil.GOOL.CodeType.CodeType
instance GHC.Classes.Eq Drasil.GOOL.CodeType.CodeType

module Drasil.GOOL.AST
data Terminator
Semi :: Terminator
Empty :: Terminator
data VisibilityTag
Pub :: VisibilityTag
Priv :: VisibilityTag
data QualifiedName
qualName :: String -> String -> QualifiedName
data FileType
Combined :: FileType
Source :: FileType
Header :: FileType
isSource :: FileType -> Bool
data Binding
Static :: Binding
Dynamic :: Binding
onBinding :: Binding -> a -> a -> a
data BindData
bd :: Binding -> Doc -> BindData
data FileData
fileD :: FilePath -> ModData -> FileData
updateFileMod :: ModData -> FileData -> FileData
data FuncData
fd :: TypeData -> Doc -> FuncData
data ModData
md :: String -> Doc -> ModData
updateMod :: (Doc -> Doc) -> ModData -> ModData
data MethodData
mthd :: Doc -> MethodData
updateMthd :: MethodData -> (Doc -> Doc) -> MethodData
data OpData
od :: Int -> Doc -> OpData
data ParamData
pd :: VarData -> Doc -> ParamData
paramName :: ParamData -> String
updateParam :: (Doc -> Doc) -> ParamData -> ParamData
data ProgData
progD :: String -> String -> [FileData] -> ProgData
emptyProg :: ProgData
data StateVarData
svd :: VisibilityTag -> Doc -> (Doc, Terminator) -> StateVarData
data TypeData
td :: CodeType -> String -> Doc -> TypeData
data ValData
vd :: Maybe Int -> Maybe Integer -> TypeData -> Doc -> ValData
updateValDoc :: (Doc -> Doc) -> ValData -> ValData
data VarData
vard :: Binding -> String -> TypeData -> Doc -> VarData
data CommonThunk s
pureValue :: s ValData -> CommonThunk s
vectorize :: (s ValData -> s ValData) -> CommonThunk s -> CommonThunk s
vectorize2 :: (s ValData -> s ValData -> s ValData) -> CommonThunk s -> CommonThunk s -> CommonThunk s
sumComponents :: CommonThunk s -> CommonThunk s
commonVecIndex :: (s ValData -> s ValData) -> CommonThunk s -> s ValData
commonThunkElim :: (CommonThunk s -> a) -> (CommonThunk s -> a) -> CommonThunk s -> a
commonThunkDim :: (s ValData -> s ValData) -> CommonThunk s -> s ValData
instance GHC.Classes.Eq Drasil.GOOL.AST.VisibilityTag
instance GHC.Classes.Ord Drasil.GOOL.AST.QualifiedName
instance GHC.Classes.Eq Drasil.GOOL.AST.QualifiedName

module Drasil.GOOL.Helpers
angles :: Doc -> Doc
doubleQuotedText :: String -> Doc
hicat :: Doc -> [Doc] -> Doc
vicat :: Doc -> [Doc] -> Doc
vibcat :: [Doc] -> Doc
vmap :: (a -> Doc) -> [a] -> Doc
vimap :: Doc -> (a -> Doc) -> [a] -> Doc
emptyIfEmpty :: Doc -> Doc -> Doc
emptyIfNull :: [a] -> Doc -> Doc
toCode :: Monad r => a -> r a
toState :: a -> State s a
onCodeValue :: Functor r => (a -> b) -> r a -> r b
onStateValue :: (a -> b) -> State s a -> State s b
on2CodeValues :: Applicative r => (a -> b -> c) -> r a -> r b -> r c
on2StateValues :: (a -> b -> c) -> State s a -> State s b -> State s c
on3CodeValues :: Applicative r => (a -> b -> c -> d) -> r a -> r b -> r c -> r d
on3StateValues :: (a -> b -> c -> d) -> State s a -> State s b -> State s c -> State s d
onCodeList :: Monad m => ([a] -> b) -> [m a] -> m b
onStateList :: ([a] -> b) -> [State s a] -> State s b
on2StateLists :: ([a] -> [b] -> c) -> [State s a] -> [State s b] -> State s c
getInnerType :: CodeType -> CodeType
on2StateWrapped :: Monad m => (a -> b -> m c) -> m a -> m b -> m c
getNestDegree :: Integer -> CodeType -> Integer

module Drasil.GOOL.State
type GS = State GOOLState
data GOOLState
GS :: [FilePath] -> [FilePath] -> Maybe FilePath -> Map String ClassName -> Map QualifiedName [ExceptionType] -> Map QualifiedName [QualifiedName] -> Bool -> Bool -> GOOLState
[_headers] :: GOOLState -> [FilePath]
[_sources] :: GOOLState -> [FilePath]
[_mainMod] :: GOOLState -> Maybe FilePath
[_classMap] :: GOOLState -> Map String ClassName
[_methodExceptionMap] :: GOOLState -> Map QualifiedName [ExceptionType]
[_callMap] :: GOOLState -> Map QualifiedName [QualifiedName]
[_throwUsed] :: GOOLState -> Bool
[_errorDefined] :: GOOLState -> Bool
type FS = State FileState
type CS = State ClassState
type MS = State MethodState
type VS = State ValueState
lensFStoGS :: Lens' FileState GOOLState
lensGStoFS :: Lens' GOOLState FileState
lensMStoGS :: Lens' MethodState GOOLState
lensFStoCS :: Lens' FileState ClassState
lensFStoMS :: Lens' FileState MethodState
lensFStoVS :: Lens' FileState ValueState
lensCStoMS :: Lens' ClassState MethodState
lensMStoCS :: Lens' MethodState ClassState
lensCStoVS :: Lens' ClassState ValueState
lensMStoFS :: Lens' MethodState FileState
lensMStoVS :: Lens' MethodState ValueState
lensVStoFS :: Lens' ValueState FileState
lensVStoMS :: Lens' ValueState MethodState
lensCStoFS :: Lens' ClassState FileState
headers :: Lens' GOOLState [FilePath]
sources :: Lens' GOOLState [FilePath]
mainMod :: Lens' GOOLState (Maybe FilePath)
currMain :: Lens' FileState Bool
currFileType :: Lens' FileState FileType
currParameters :: Lens' MethodState [String]
initialState :: GOOLState
initialFS :: FileState
modifyReturn :: (s -> s) -> a -> State s a
modifyReturnFunc :: (b -> s -> s) -> (b -> a) -> State s b -> State s a
modifyReturnList :: [State s b] -> (s -> s) -> ([b] -> a) -> State s a
revFiles :: GOOLState -> GOOLState
addFile :: FileType -> FilePath -> GOOLState -> GOOLState
addCombinedHeaderSource :: FilePath -> GOOLState -> GOOLState
addHeader :: FilePath -> GOOLState -> GOOLState
addSource :: FilePath -> GOOLState -> GOOLState
addProgNameToPaths :: String -> GOOLState -> GOOLState
setMainMod :: String -> GOOLState -> GOOLState
addLangImport :: String -> MethodState -> MethodState
addLangImportVS :: String -> ValueState -> ValueState
addExceptionImports :: [Exception] -> MethodState -> MethodState
getLangImports :: FS [String]
addLibImport :: String -> MethodState -> MethodState
addLibImportVS :: String -> ValueState -> ValueState
addLibImports :: [String] -> MethodState -> MethodState
getLibImports :: FS [String]
addModuleImport :: String -> MethodState -> MethodState
addModuleImportVS :: String -> ValueState -> ValueState
getModuleImports :: FS [String]
addHeaderLangImport :: String -> ValueState -> ValueState
getHeaderLangImports :: FS [String]
addHeaderLibImport :: String -> MethodState -> MethodState
getHeaderLibImports :: FS [String]
addHeaderModImport :: String -> ValueState -> ValueState
getHeaderModImports :: FS [String]
addDefine :: String -> ValueState -> ValueState
getDefines :: FS [String]
addHeaderDefine :: String -> ValueState -> ValueState
getHeaderDefines :: FS [String]
addUsing :: String -> ValueState -> ValueState
getUsing :: FS [String]
addHeaderUsing :: String -> ValueState -> ValueState
getHeaderUsing :: FS [String]
setFileType :: FileType -> FileState -> FileState
setModuleName :: String -> FileState -> FileState
getModuleName :: FS String
setClassName :: String -> ClassState -> ClassState
getClassName :: MS ClassName
setCurrMain :: MethodState -> MethodState
getCurrMain :: FS Bool
addClass :: String -> ClassState -> ClassState
getClasses :: FS [String]
updateClassMap :: String -> FileState -> FileState
getClassMap :: VS (Map String String)
updateMethodExcMap :: String -> MethodState -> MethodState
getMethodExcMap :: VS (Map QualifiedName [ExceptionType])
updateCallMap :: String -> MethodState -> MethodState
callMapTransClosure :: GOOLState -> GOOLState
updateMEMWithCalls :: GOOLState -> GOOLState
addParameter :: String -> MethodState -> MethodState
getParameters :: MS [String]
setOutputsDeclared :: MethodState -> MethodState
isOutputsDeclared :: MS Bool
addException :: ExceptionType -> MethodState -> MethodState
addExceptions :: [ExceptionType] -> ValueState -> ValueState
getExceptions :: MS [ExceptionType]
addCall :: QualifiedName -> ValueState -> ValueState
setMainDoc :: Doc -> MethodState -> MethodState
getMainDoc :: FS Doc
setVisibility :: VisibilityTag -> MethodState -> MethodState
getVisibility :: MS VisibilityTag
setCurrMainFunc :: Bool -> MethodState -> MethodState
getCurrMainFunc :: MS Bool
setThrowUsed :: MethodState -> MethodState
getThrowUsed :: MS Bool
setErrorDefined :: MethodState -> MethodState
getErrorDefined :: MS Bool
addIter :: String -> MethodState -> MethodState
getIter :: MS [String]
resetIter :: String -> MethodState -> MethodState
incrementLine :: MethodState -> MethodState
incrementWord :: MethodState -> MethodState
getLineIndex :: MS Index
getWordIndex :: MS Index
resetIndices :: MethodState -> MethodState
useVarName :: String -> MethodState -> MethodState
genVarName :: [String] -> String -> MS String
genLoopIndex :: MS String
genVarNameIf :: Bool -> String -> MS String

module Drasil.GOOL.InterfaceCommon
type Label = String
type Library = String
type MSBody a = MS (a (Body a))
type MSBlock a = MS (a (Block a))
type VSFunction a = VS (a (Function a))
type VSType a = VS (a (Type a))
type SVariable a = VS (a (Variable a))
type SValue a = VS (a (Value a))
type VSThunk a = VS (a (Thunk a))
type MSStatement a = MS (a (Statement a))
type MSParameter a = MS (a (Parameter a))
type SMethod a = MS (a (Method a))
type NamedArgs r = [(SVariable r, SValue r)]
type MixedCall r = Label -> VSType r -> [SValue r] -> NamedArgs r -> SValue r
type MixedCtorCall r = VSType r -> [SValue r] -> NamedArgs r -> SValue r
type PosCall r = Label -> VSType r -> [SValue r] -> SValue r
type PosCtorCall r = VSType r -> [SValue r] -> SValue r
type InOutCall r = Label -> [SValue r] -> [SVariable r] -> [SVariable r] -> MSStatement r
type InOutFunc r = [SVariable r] -> [SVariable r] -> [SVariable r] -> MSBody r -> SMethod r
type DocInOutFunc r = String -> [(String, SVariable r)] -> [(String, SVariable r)] -> [(String, SVariable r)] -> MSBody r -> SMethod r
class (VectorType r, VectorDecl r, VectorThunk r, VectorExpression r, ThunkAssign r, AssignStatement r, DeclStatement r, IOStatement r, StringStatement r, FunctionSym r, FuncAppStatement r, CommentStatement r, ControlStatement r, InternalList r, Argument r, Literal r, MathConstant r, VariableValue r, CommandLineArgs r, NumericExpression r, BooleanExpression r, Comparison r, ValueExpression r, List r, TypeElim r, VariableElim r) => SharedProg r
class (BlockSym r) => BodySym r where {
    type Body r;
}
body :: BodySym r => [MSBlock r] -> MSBody r
addComments :: BodySym r => Label -> MSBody r -> MSBody r
bodyStatements :: BodySym r => [MSStatement r] -> MSBody r
oneLiner :: BodySym r => MSStatement r -> MSBody r
class (StatementSym r) => BlockSym r where {
    type Block r;
}
block :: BlockSym r => [MSStatement r] -> MSBlock r
class TypeSym r where {
    type Type r;
}
bool :: TypeSym r => VSType r
int :: TypeSym r => VSType r
float :: TypeSym r => VSType r
double :: TypeSym r => VSType r
char :: TypeSym r => VSType r
string :: TypeSym r => VSType r
infile :: TypeSym r => VSType r
outfile :: TypeSym r => VSType r
listType :: TypeSym r => VSType r -> VSType r
arrayType :: TypeSym r => VSType r -> VSType r
listInnerType :: TypeSym r => VSType r -> VSType r
funcType :: TypeSym r => [VSType r] -> VSType r -> VSType r
void :: TypeSym r => VSType r
class (TypeSym r) => TypeElim r
getType :: TypeElim r => r (Type r) -> CodeType
getTypeString :: TypeElim r => r (Type r) -> String
class (TypeSym r, ScopeSym r) => VariableSym r where {
    type Variable r;
}
var' :: VariableSym r => Label -> r (Scope r) -> VSType r -> SVariable r
constant' :: VariableSym r => Label -> r (Scope r) -> VSType r -> SVariable r
extVar :: VariableSym r => Library -> Label -> VSType r -> SVariable r
arrayElem :: VariableSym r => Integer -> SVariable r -> SVariable r

-- | Smart constructor to rearrange the parameters of var'
var :: VariableSym r => Label -> VSType r -> r (Scope r) -> SVariable r

-- | Smart constructor to rearrange the parameters of constant'
constant :: VariableSym r => Label -> VSType r -> r (Scope r) -> SVariable r

-- | Smart constructor for a local variable.
locVar :: VariableSym r => Label -> VSType r -> SVariable r

-- | Smart constructor for a variable in the main function.
mainVar :: VariableSym r => Label -> VSType r -> SVariable r
class ScopeSym r where {
    type Scope r;
}
global :: ScopeSym r => r (Scope r)
mainFn :: ScopeSym r => r (Scope r)
local :: ScopeSym r => r (Scope r)
class (VariableSym r) => VariableElim r
variableName :: VariableElim r => r (Variable r) -> String
variableType :: VariableElim r => r (Variable r) -> r (Type r)
listOf :: VariableSym r => Label -> VSType r -> r (Scope r) -> SVariable r
listVar :: VariableSym r => Label -> VSType r -> r (Scope r) -> SVariable r
class (TypeSym r) => ValueSym r where {
    type Value r;
}
valueType :: ValueSym r => r (Value r) -> r (Type r)
class (ValueSym r) => Argument r
pointerArg :: Argument r => SValue r -> SValue r
class (ValueSym r) => Literal r
litTrue :: Literal r => SValue r
litFalse :: Literal r => SValue r
litChar :: Literal r => Char -> SValue r
litDouble :: Literal r => Double -> SValue r
litFloat :: Literal r => Float -> SValue r
litInt :: Literal r => Integer -> SValue r
litString :: Literal r => String -> SValue r
litArray :: Literal r => VSType r -> [SValue r] -> SValue r
litList :: Literal r => VSType r -> [SValue r] -> SValue r
litZero :: (TypeElim r, Literal r) => VSType r -> SValue r
class (ValueSym r) => MathConstant r
pi :: MathConstant r => SValue r
class (VariableSym r, ValueSym r) => VariableValue r
valueOf :: VariableValue r => SVariable r -> SValue r
class (ValueSym r) => CommandLineArgs r
arg :: CommandLineArgs r => Integer -> SValue r
argsList :: CommandLineArgs r => SValue r
argExists :: CommandLineArgs r => Integer -> SValue r
class (ValueSym r) => NumericExpression r
(#~) :: NumericExpression r => SValue r -> SValue r
(#/^) :: NumericExpression r => SValue r -> SValue r
(#|) :: NumericExpression r => SValue r -> SValue r
(#+) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#-) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#*) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#/) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#%) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#^) :: NumericExpression r => SValue r -> SValue r -> SValue r
log :: NumericExpression r => SValue r -> SValue r
ln :: NumericExpression r => SValue r -> SValue r
exp :: NumericExpression r => SValue r -> SValue r
sin :: NumericExpression r => SValue r -> SValue r
cos :: NumericExpression r => SValue r -> SValue r
tan :: NumericExpression r => SValue r -> SValue r
csc :: NumericExpression r => SValue r -> SValue r
sec :: NumericExpression r => SValue r -> SValue r
cot :: NumericExpression r => SValue r -> SValue r
arcsin :: NumericExpression r => SValue r -> SValue r
arccos :: NumericExpression r => SValue r -> SValue r
arctan :: NumericExpression r => SValue r -> SValue r
floor :: NumericExpression r => SValue r -> SValue r
ceil :: NumericExpression r => SValue r -> SValue r
infixl 5 #+
infixl 5 #-
infixl 6 #/
infixl 6 #*
infixl 8 #~
infixl 7 #/^
infixl 7 #|
infixl 6 #%
infixl 7 #^
class (ValueSym r) => BooleanExpression r
(?!) :: BooleanExpression r => SValue r -> SValue r
(?&&) :: BooleanExpression r => SValue r -> SValue r -> SValue r
(?||) :: BooleanExpression r => SValue r -> SValue r -> SValue r
infixl 2 ?&&
infixl 1 ?||
infixr 6 ?!
class (ValueSym r) => Comparison r
(?<) :: Comparison r => SValue r -> SValue r -> SValue r
(?<=) :: Comparison r => SValue r -> SValue r -> SValue r
(?>) :: Comparison r => SValue r -> SValue r -> SValue r
(?>=) :: Comparison r => SValue r -> SValue r -> SValue r
(?==) :: Comparison r => SValue r -> SValue r -> SValue r
(?!=) :: Comparison r => SValue r -> SValue r -> SValue r
infixl 4 ?<
infixl 4 ?<=
infixl 4 ?>
infixl 4 ?>=
infixl 3 ?==
infixl 3 ?!=
class (VariableSym r, ValueSym r) => ValueExpression r
inlineIf :: ValueExpression r => SValue r -> SValue r -> SValue r -> SValue r
funcAppMixedArgs :: ValueExpression r => MixedCall r
extFuncAppMixedArgs :: ValueExpression r => Library -> MixedCall r
libFuncAppMixedArgs :: ValueExpression r => Library -> MixedCall r
lambda :: ValueExpression r => [SVariable r] -> SValue r -> SValue r
notNull :: ValueExpression r => SValue r -> SValue r
funcApp :: ValueExpression r => PosCall r
funcAppNamedArgs :: ValueExpression r => Label -> VSType r -> NamedArgs r -> SValue r
extFuncApp :: ValueExpression r => Library -> PosCall r
libFuncApp :: ValueExpression r => Library -> PosCall r
exists :: ValueExpression r => SValue r -> SValue r
class (ValueSym r) => List r

-- | Does any necessary conversions from GOOL's zero-indexed assumptions to
--   the target language's assumptions
intToIndex :: List r => SValue r -> SValue r

-- | Does any necessary conversions from the target language's indexing
--   assumptions assumptions to GOOL's zero-indexed assumptions
indexToInt :: List r => SValue r -> SValue r

-- | Finds the size of a list. Arguments are: List
listSize :: List r => SValue r -> SValue r

-- | Inserts a value into a list. Arguments are: List, Index, Value
listAdd :: List r => SValue r -> SValue r -> SValue r -> SValue r

-- | Appens a value to a list. Arguments are: List, Value
listAppend :: List r => SValue r -> SValue r -> SValue r

-- | Gets the value of an index of a list. Arguments are: List, Index
listAccess :: List r => SValue r -> SValue r -> SValue r

-- | Sets the value of an index of a list. Arguments are: List, Index,
--   Value
listSet :: List r => SValue r -> SValue r -> SValue r -> SValue r

-- | Finds the index of the first occurrence of a value in a list.
--   Arguments are: List, Value
indexOf :: List r => SValue r -> SValue r -> SValue r
class (ValueSym r) => InternalList r
listSlice' :: InternalList r => Maybe (SValue r) -> Maybe (SValue r) -> Maybe (SValue r) -> SVariable r -> SValue r -> MSBlock r

-- | Creates a slice of a list and assigns it to a variable. Arguments are:
--   Variable to assign List to read from [Start index] inclusive. (if
--   Nothing, then list start if step &gt; 0, list end if step &lt; 0) [End
--   index] exclusive. (if Nothing, then list end if step &gt; 0, list
--   start if step &gt; 0) [Step] (if Nothing, then defaults to 1)
listSlice :: InternalList r => SVariable r -> SValue r -> Maybe (SValue r) -> Maybe (SValue r) -> Maybe (SValue r) -> MSBlock r
listIndexExists :: (List r, Comparison r) => SValue r -> SValue r -> SValue r
at :: List r => SValue r -> SValue r -> SValue r
class ThunkSym r where {
    type Thunk (r :: Type -> Type);
}
class TypeSym r => VectorType r
vecType :: VectorType r => VSType r -> VSType r
class (VariableSym r, StatementSym r) => VectorDecl r
vecDec :: VectorDecl r => Integer -> SVariable r -> MSStatement r
vecDecDef :: VectorDecl r => SVariable r -> [SValue r] -> MSStatement r
class (VariableSym r, ThunkSym r) => VectorThunk r
vecThunk :: VectorThunk r => SVariable r -> VSThunk r
class (ThunkSym r, ValueSym r) => VectorExpression r
vecScale :: VectorExpression r => SValue r -> VSThunk r -> VSThunk r
vecAdd :: VectorExpression r => VSThunk r -> VSThunk r -> VSThunk r
vecIndex :: VectorExpression r => SValue r -> VSThunk r -> SValue r
vecDot :: VectorExpression r => VSThunk r -> VSThunk r -> VSThunk r
class (VariableSym r, ThunkSym r, StatementSym r) => ThunkAssign r
thunkAssign :: ThunkAssign r => SVariable r -> VSThunk r -> MSStatement r
class (ValueSym r) => StatementSym r where {
    type Statement r;
}
valStmt :: StatementSym r => SValue r -> MSStatement r
multi :: StatementSym r => [MSStatement r] -> MSStatement r
class (VariableSym r, StatementSym r) => AssignStatement r
(&-=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
(&+=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
(&++) :: AssignStatement r => SVariable r -> MSStatement r
(&--) :: AssignStatement r => SVariable r -> MSStatement r
assign :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
infixl 8 &++
infixl 1 &+=
infixl 1 &-=
infixl 8 &--
(&=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
infixr 1 &=
assignToListIndex :: (StatementSym r, VariableValue r, List r) => SVariable r -> SValue r -> SValue r -> MSStatement r
class (VariableSym r, StatementSym r) => DeclStatement r
varDec :: DeclStatement r => SVariable r -> MSStatement r
varDecDef :: DeclStatement r => SVariable r -> SValue r -> MSStatement r
listDec :: DeclStatement r => Integer -> SVariable r -> MSStatement r
listDecDef :: DeclStatement r => SVariable r -> [SValue r] -> MSStatement r
arrayDec :: DeclStatement r => Integer -> SVariable r -> MSStatement r
arrayDecDef :: DeclStatement r => SVariable r -> [SValue r] -> MSStatement r
constDecDef :: DeclStatement r => SVariable r -> SValue r -> MSStatement r
funcDecDef :: DeclStatement r => SVariable r -> [SVariable r] -> MSBody r -> MSStatement r
class (VariableSym r, StatementSym r) => IOStatement r
print :: IOStatement r => SValue r -> MSStatement r
printLn :: IOStatement r => SValue r -> MSStatement r
printStr :: IOStatement r => String -> MSStatement r
printStrLn :: IOStatement r => String -> MSStatement r
printFile :: IOStatement r => SValue r -> SValue r -> MSStatement r
printFileLn :: IOStatement r => SValue r -> SValue r -> MSStatement r
printFileStr :: IOStatement r => SValue r -> String -> MSStatement r
printFileStrLn :: IOStatement r => SValue r -> String -> MSStatement r
getInput :: IOStatement r => SVariable r -> MSStatement r
discardInput :: IOStatement r => MSStatement r
getFileInput :: IOStatement r => SValue r -> SVariable r -> MSStatement r
discardFileInput :: IOStatement r => SValue r -> MSStatement r
openFileR :: IOStatement r => SVariable r -> SValue r -> MSStatement r
openFileW :: IOStatement r => SVariable r -> SValue r -> MSStatement r
openFileA :: IOStatement r => SVariable r -> SValue r -> MSStatement r
closeFile :: IOStatement r => SValue r -> MSStatement r
getFileInputLine :: IOStatement r => SValue r -> SVariable r -> MSStatement r
discardFileLine :: IOStatement r => SValue r -> MSStatement r
getFileInputAll :: IOStatement r => SValue r -> SVariable r -> MSStatement r
class (VariableSym r, StatementSym r) => StringStatement r
stringSplit :: StringStatement r => Char -> SVariable r -> SValue r -> MSStatement r
stringListVals :: StringStatement r => [SVariable r] -> SValue r -> MSStatement r
stringListLists :: StringStatement r => [SVariable r] -> SValue r -> MSStatement r
class (ValueSym r) => FunctionSym r where {
    type Function r;
}
class (VariableSym r, StatementSym r) => FuncAppStatement r
inOutCall :: FuncAppStatement r => InOutCall r
extInOutCall :: FuncAppStatement r => Library -> InOutCall r
class (StatementSym r) => CommentStatement r
comment :: CommentStatement r => Comment -> MSStatement r
class (BodySym r, VariableSym r) => ControlStatement r
break :: ControlStatement r => MSStatement r
continue :: ControlStatement r => MSStatement r
returnStmt :: ControlStatement r => SValue r -> MSStatement r
throw :: ControlStatement r => Label -> MSStatement r

-- | String of if-else statements. Arguments: List of predicates and bodies
--   (if this then that), Body for else branch
ifCond :: ControlStatement r => [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
switch :: ControlStatement r => SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
ifExists :: ControlStatement r => SValue r -> MSBody r -> MSBody r -> MSStatement r
for :: ControlStatement r => MSStatement r -> SValue r -> MSStatement r -> MSBody r -> MSStatement r
forRange :: ControlStatement r => SVariable r -> SValue r -> SValue r -> SValue r -> MSBody r -> MSStatement r
forEach :: ControlStatement r => SVariable r -> SValue r -> MSBody r -> MSStatement r
while :: ControlStatement r => SValue r -> MSBody r -> MSStatement r
tryCatch :: ControlStatement r => MSBody r -> MSBody r -> MSStatement r
ifNoElse :: ControlStatement r => [(SValue r, MSBody r)] -> MSStatement r
switchAsIf :: (ControlStatement r, Comparison r) => SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
class VisibilitySym r where {
    type Visibility r;
}
private :: VisibilitySym r => r (Visibility r)
public :: VisibilitySym r => r (Visibility r)
class (VariableSym r) => ParameterSym r where {
    type Parameter r;
}
param :: ParameterSym r => SVariable r -> MSParameter r
pointerParam :: ParameterSym r => SVariable r -> MSParameter r
class (BodySym r, ParameterSym r, VisibilitySym r) => MethodSym r where {
    type Method r;
}
docMain :: MethodSym r => MSBody r -> SMethod r
function :: MethodSym r => Label -> r (Visibility r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
mainFunction :: MethodSym r => MSBody r -> SMethod r
docFunc :: MethodSym r => String -> [String] -> Maybe String -> SMethod r -> SMethod r
inOutFunc :: MethodSym r => Label -> r (Visibility r) -> InOutFunc r
docInOutFunc :: MethodSym r => Label -> r (Visibility r) -> DocInOutFunc r
convType :: TypeSym r => CodeType -> VSType r

module Drasil.GOOL.RendererClassesCommon
class (AssignStatement r, DeclStatement r, IOStatement r, StringStatement r, FuncAppStatement r, CommentStatement r, ControlStatement r, Argument r, Literal r, MathConstant r, VariableValue r, CommandLineArgs r, NumericExpression r, BooleanExpression r, Comparison r, List r, InternalList r, VectorExpression r, TypeElim r, VariableElim r, RenderBlock r, BlockElim r, RenderBody r, BodyElim r, InternalListFunc r, RenderFunction r, FunctionElim r, OpElim r, RenderParam r, ParamElim r, RenderVisibility r, VisibilityElim r, InternalAssignStmt r, InternalIOStmt r, InternalControlStmt r, RenderStatement r, StatementElim r, RenderType r, InternalTypeElim r, RenderValue r, ValueElim r, RenderVariable r, InternalVarElim r, ImportSym r, ImportElim r, UnaryOpSym r, BinaryOpSym r, BlockCommentSym r, BlockCommentElim r, ValueExpression r, RenderMethod r, MethodElim r, ParameterSym r) => CommonRenderSym r
class ImportSym r where {
    type Import r;
}
langImport :: ImportSym r => Label -> r (Import r)
modImport :: ImportSym r => Label -> r (Import r)
class ImportElim r
import' :: ImportElim r => r (Import r) -> Doc
class RenderBody r
multiBody :: RenderBody r => [MSBody r] -> MSBody r
class BodyElim r
body :: BodyElim r => r (Body r) -> Doc
class RenderBlock r
multiBlock :: RenderBlock r => [MSBlock r] -> MSBlock r
class BlockElim r
block :: BlockElim r => r (Block r) -> Doc
class RenderType r
multiType :: RenderType r => [VSType r] -> VSType r
typeFromData :: RenderType r => CodeType -> String -> Doc -> VSType r
class InternalTypeElim r
type' :: InternalTypeElim r => r (Type r) -> Doc
type VSUnOp a = VS (a (UnaryOp a))
class UnaryOpSym r where {
    type UnaryOp r;
}
notOp :: UnaryOpSym r => VSUnOp r
negateOp :: UnaryOpSym r => VSUnOp r
sqrtOp :: UnaryOpSym r => VSUnOp r
absOp :: UnaryOpSym r => VSUnOp r
logOp :: UnaryOpSym r => VSUnOp r
lnOp :: UnaryOpSym r => VSUnOp r
expOp :: UnaryOpSym r => VSUnOp r
sinOp :: UnaryOpSym r => VSUnOp r
cosOp :: UnaryOpSym r => VSUnOp r
tanOp :: UnaryOpSym r => VSUnOp r
asinOp :: UnaryOpSym r => VSUnOp r
acosOp :: UnaryOpSym r => VSUnOp r
atanOp :: UnaryOpSym r => VSUnOp r
floorOp :: UnaryOpSym r => VSUnOp r
ceilOp :: UnaryOpSym r => VSUnOp r
type VSBinOp a = VS (a (BinaryOp a))
class BinaryOpSym r where {
    type BinaryOp r;
}
equalOp :: BinaryOpSym r => VSBinOp r
notEqualOp :: BinaryOpSym r => VSBinOp r
greaterOp :: BinaryOpSym r => VSBinOp r
greaterEqualOp :: BinaryOpSym r => VSBinOp r
lessOp :: BinaryOpSym r => VSBinOp r
lessEqualOp :: BinaryOpSym r => VSBinOp r
plusOp :: BinaryOpSym r => VSBinOp r
minusOp :: BinaryOpSym r => VSBinOp r
multOp :: BinaryOpSym r => VSBinOp r
divideOp :: BinaryOpSym r => VSBinOp r
powerOp :: BinaryOpSym r => VSBinOp r
moduloOp :: BinaryOpSym r => VSBinOp r
andOp :: BinaryOpSym r => VSBinOp r
orOp :: BinaryOpSym r => VSBinOp r
class OpElim r
uOp :: OpElim r => r (UnaryOp r) -> Doc
bOp :: OpElim r => r (BinaryOp r) -> Doc
uOpPrec :: OpElim r => r (UnaryOp r) -> Int
bOpPrec :: OpElim r => r (BinaryOp r) -> Int
class RenderVariable r
varFromData :: RenderVariable r => Binding -> String -> VSType r -> Doc -> SVariable r
class InternalVarElim r
variableBind :: InternalVarElim r => r (Variable r) -> Binding
variable :: InternalVarElim r => r (Variable r) -> Doc
class RenderValue r
inputFunc :: RenderValue r => SValue r
printFunc :: RenderValue r => SValue r
printLnFunc :: RenderValue r => SValue r
printFileFunc :: RenderValue r => SValue r -> SValue r
printFileLnFunc :: RenderValue r => SValue r -> SValue r
cast :: RenderValue r => VSType r -> SValue r -> SValue r

-- | Very generic internal function for generating calls, to reduce
--   repeated code throughout generators. Parameters are: maybe name of
--   external module, maybe Doc for object variable (including separator
--   between object and function) for method calls.
call :: RenderValue r => Maybe Library -> Maybe Doc -> MixedCall r
valFromData :: RenderValue r => Maybe Int -> Maybe Integer -> VSType r -> Doc -> SValue r
class ValueElim r
valuePrec :: ValueElim r => r (Value r) -> Maybe Int
valueInt :: ValueElim r => r (Value r) -> Maybe Integer
value :: ValueElim r => r (Value r) -> Doc
class InternalListFunc r

-- | List
listSizeFunc :: InternalListFunc r => SValue r -> VSFunction r

-- | List, Index, Value
listAddFunc :: InternalListFunc r => SValue r -> SValue r -> SValue r -> VSFunction r

-- | List, Value
listAppendFunc :: InternalListFunc r => SValue r -> SValue r -> VSFunction r

-- | List, Index
listAccessFunc :: InternalListFunc r => VSType r -> SValue r -> VSFunction r

-- | List, Index, Value
listSetFunc :: InternalListFunc r => SValue r -> SValue r -> SValue r -> VSFunction r
class RenderFunction r
funcFromData :: RenderFunction r => Doc -> VSType r -> VSFunction r
class FunctionElim r
functionType :: FunctionElim r => r (Function r) -> r (Type r)
function :: FunctionElim r => r (Function r) -> Doc
class InternalAssignStmt r
multiAssign :: InternalAssignStmt r => [SVariable r] -> [SValue r] -> MSStatement r
class InternalIOStmt r
printSt :: InternalIOStmt r => Bool -> Maybe (SValue r) -> SValue r -> SValue r -> MSStatement r
class InternalControlStmt r
multiReturn :: InternalControlStmt r => [SValue r] -> MSStatement r
class RenderStatement r
stmt :: RenderStatement r => MSStatement r -> MSStatement r
loopStmt :: RenderStatement r => MSStatement r -> MSStatement r
emptyStmt :: RenderStatement r => MSStatement r
stmtFromData :: RenderStatement r => Doc -> Terminator -> MSStatement r
class StatementElim r
statement :: StatementElim r => r (Statement r) -> Doc
statementTerm :: StatementElim r => r (Statement r) -> Terminator
class RenderVisibility r
visibilityFromData :: RenderVisibility r => VisibilityTag -> Doc -> r (Visibility r)
class VisibilityElim r
visibility :: VisibilityElim r => r (Visibility r) -> Doc
type MSMthdType a = MS (a (MethodType a))
class (TypeSym r) => MethodTypeSym r where {
    type MethodType r;
}
mType :: MethodTypeSym r => VSType r -> MSMthdType r
class RenderParam r
paramFromData :: RenderParam r => SVariable r -> Doc -> MSParameter r
class ParamElim r
parameterName :: ParamElim r => r (Parameter r) -> Label
parameterType :: ParamElim r => r (Parameter r) -> r (Type r)
parameter :: ParamElim r => r (Parameter r) -> Doc
class (MethodTypeSym r, BlockCommentSym r) => RenderMethod r

-- | Takes a BlockComment and a method and generates a function.
commentedFunc :: RenderMethod r => MS (r (BlockComment r)) -> SMethod r -> SMethod r
mthdFromData :: RenderMethod r => VisibilityTag -> Doc -> SMethod r
class MethodElim r
method :: MethodElim r => r (Method r) -> Doc
class BlockCommentSym r where {
    type BlockComment r;
}
blockComment :: BlockCommentSym r => [String] -> r (BlockComment r)

-- | Converts a list of strings into a block comment
docComment :: BlockCommentSym r => State a [String] -> State a (r (BlockComment r))
class BlockCommentElim r
blockComment' :: BlockCommentElim r => r (BlockComment r) -> Doc

module Drasil.GOOL.InterfaceProc
type GSProgram a = GS (a (Program a))
type SFile a = FS (a (File a))
type FSModule a = FS (a (Module a))
class (SharedProg r, ProgramSym r) => ProcProg r
class (FileSym r) => ProgramSym r where {
    type Program r;
}
prog :: ProgramSym r => Label -> Label -> [SFile r] -> GSProgram r
class (ModuleSym r) => FileSym r where {
    type File r;
}
fileDoc :: FileSym r => FSModule r -> SFile r
docMod :: FileSym r => String -> [String] -> String -> SFile r -> SFile r
class (MethodSym r) => ModuleSym r where {
    type Module r;
}
buildModule :: ModuleSym r => Label -> [Label] -> [SMethod r] -> FSModule r

module Drasil.GOOL.RendererClassesProc
class (CommonRenderSym r, FileSym r, RenderFile r, RenderMod r, ModuleElim r) => OORenderSym r
class (BlockCommentSym r) => RenderFile r
top :: RenderFile r => r (Module r) -> r (Block r)
bottom :: RenderFile r => r (Block r)
commentedMod :: RenderFile r => SFile r -> FS (r (BlockComment r)) -> SFile r
fileFromData :: RenderFile r => FilePath -> FSModule r -> SFile r
class RenderMod r
modFromData :: RenderMod r => String -> FS Doc -> FSModule r
updateModuleDoc :: RenderMod r => (Doc -> Doc) -> r (Module r) -> r (Module r)
class ModuleElim r
module' :: ModuleElim r => r (Module r) -> Doc
class (RenderMethod r) => ProcRenderMethod r

-- | Main method?, name, public/private, return type, parameters, body
intMethod :: ProcRenderMethod r => Bool -> Label -> r (Visibility r) -> MSMthdType r -> [MSParameter r] -> MSBody r -> SMethod r

module Drasil.GOOL.InterfaceGOOL
type GSProgram a = GS (a (Program a))
type SFile a = FS (a (File a))
type FSModule a = FS (a (Module a))
type SClass a = CS (a (Class a))
type CSStateVar a = CS (a (StateVar a))
type Initializers r = [(SVariable r, SValue r)]
class (SharedProg r, ProgramSym r, OOVariableValue r, OODeclStatement r, OOFuncAppStatement r, OOValueExpression r, InternalValueExp r, GetSet r, ObserverPattern r, StrategyPattern r) => OOProg r
class (FileSym r) => ProgramSym r where {
    type Program r;
}
prog :: ProgramSym r => Label -> Label -> [SFile r] -> GSProgram r
class (ModuleSym r) => FileSym r where {
    type File r;
}
fileDoc :: FileSym r => FSModule r -> SFile r
docMod :: FileSym r => String -> [String] -> String -> SFile r -> SFile r
class (ClassSym r) => ModuleSym r where {
    type Module r;
}
buildModule :: ModuleSym r => Label -> [Label] -> [SMethod r] -> [SClass r] -> FSModule r
class (OOMethodSym r, StateVarSym r) => ClassSym r where {
    type Class r;
}

-- | Main external method for creating a class. Inputs: parent class,
--   variables, constructor(s), methods
buildClass :: ClassSym r => Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r

-- | Creates an extra class. Inputs: class name, the rest are the same as
--   buildClass.
extraClass :: ClassSym r => Label -> Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r

-- | Creates a class implementing interfaces. Inputs: class name, interface
--   names, variables, constructor(s), methods
implementingClass :: ClassSym r => Label -> [Label] -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
docClass :: ClassSym r => String -> SClass r -> SClass r
class (TypeSym r) => OOTypeSym r
obj :: OOTypeSym r => ClassName -> VSType r
class (VariableSym r, OOTypeSym r) => OOVariableSym r
staticVar :: OOVariableSym r => Label -> VSType r -> SVariable r
self :: OOVariableSym r => SVariable r
classVar :: OOVariableSym r => VSType r -> SVariable r -> SVariable r
extClassVar :: OOVariableSym r => VSType r -> SVariable r -> SVariable r
objVar :: OOVariableSym r => SVariable r -> SVariable r -> SVariable r
objVarSelf :: OOVariableSym r => SVariable r -> SVariable r
($->) :: OOVariableSym r => SVariable r -> SVariable r -> SVariable r
infixl 9 $->
class (ValueSym r, OOTypeSym r) => OOValueSym r
class (VariableValue r, OOVariableSym r) => OOVariableValue r
class (ValueExpression r, OOVariableSym r, OOValueSym r) => OOValueExpression r
selfFuncAppMixedArgs :: OOValueExpression r => MixedCall r
newObjMixedArgs :: OOValueExpression r => MixedCtorCall r
extNewObjMixedArgs :: OOValueExpression r => Library -> MixedCtorCall r
libNewObjMixedArgs :: OOValueExpression r => Library -> MixedCtorCall r
selfFuncApp :: OOValueExpression r => PosCall r
newObj :: OOValueExpression r => PosCtorCall r
extNewObj :: OOValueExpression r => Library -> PosCtorCall r
libNewObj :: OOValueExpression r => Library -> PosCtorCall r
class (DeclStatement r, OOVariableSym r) => OODeclStatement r
objDecDef :: OODeclStatement r => SVariable r -> SValue r -> MSStatement r
objDecNew :: OODeclStatement r => SVariable r -> [SValue r] -> MSStatement r
extObjDecNew :: OODeclStatement r => Library -> SVariable r -> [SValue r] -> MSStatement r
objDecNewNoParams :: OODeclStatement r => SVariable r -> MSStatement r
extObjDecNewNoParams :: OODeclStatement r => Library -> SVariable r -> MSStatement r
class (FuncAppStatement r, OOVariableSym r) => OOFuncAppStatement r
selfInOutCall :: OOFuncAppStatement r => InOutCall r
class (ValueSym r, VariableSym r) => GetSet r
get :: GetSet r => SValue r -> SVariable r -> SValue r
set :: GetSet r => SValue r -> SVariable r -> SValue r -> SValue r
class (ValueSym r) => InternalValueExp r

-- | Generic function for calling a method. Takes the function name, the
--   return type, the object, a list of positional arguments, and a list of
--   named arguments.
objMethodCallMixedArgs' :: InternalValueExp r => Label -> VSType r -> SValue r -> [SValue r] -> NamedArgs r -> SValue r

-- | Calling a method. t is the return type of the method, o is the object,
--   f is the method name, and ps is a list of positional arguments.
objMethodCall :: InternalValueExp r => VSType r -> SValue r -> Label -> [SValue r] -> SValue r

-- | Calling a method with named arguments.
objMethodCallNamedArgs :: InternalValueExp r => VSType r -> SValue r -> Label -> NamedArgs r -> SValue r

-- | Calling a method with a mix of positional and named arguments.
objMethodCallMixedArgs :: InternalValueExp r => VSType r -> SValue r -> Label -> [SValue r] -> NamedArgs r -> SValue r

-- | Calling a method with no parameters.
objMethodCallNoParams :: InternalValueExp r => VSType r -> SValue r -> Label -> SValue r
class (MethodSym r, PermanenceSym r) => OOMethodSym r
method :: OOMethodSym r => Label -> r (Visibility r) -> r (Permanence r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
getMethod :: OOMethodSym r => SVariable r -> SMethod r
setMethod :: OOMethodSym r => SVariable r -> SMethod r
constructor :: OOMethodSym r => [MSParameter r] -> Initializers r -> MSBody r -> SMethod r
inOutMethod :: OOMethodSym r => Label -> r (Visibility r) -> r (Permanence r) -> InOutFunc r
docInOutMethod :: OOMethodSym r => Label -> r (Visibility r) -> r (Permanence r) -> DocInOutFunc r
privMethod :: OOMethodSym r => Label -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
pubMethod :: OOMethodSym r => Label -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
initializer :: OOMethodSym r => [MSParameter r] -> Initializers r -> SMethod r
nonInitConstructor :: OOMethodSym r => [MSParameter r] -> MSBody r -> SMethod r
class (VisibilitySym r, PermanenceSym r, VariableSym r) => StateVarSym r where {
    type StateVar r;
}
stateVar :: StateVarSym r => r (Visibility r) -> r (Permanence r) -> SVariable r -> CSStateVar r
stateVarDef :: StateVarSym r => r (Visibility r) -> r (Permanence r) -> SVariable r -> SValue r -> CSStateVar r
constVar :: StateVarSym r => r (Visibility r) -> SVariable r -> SValue r -> CSStateVar r
privDVar :: StateVarSym r => SVariable r -> CSStateVar r
pubDVar :: StateVarSym r => SVariable r -> CSStateVar r
pubSVar :: StateVarSym r => SVariable r -> CSStateVar r
class PermanenceSym r where {
    type Permanence r;
}
static :: PermanenceSym r => r (Permanence r)
dynamic :: PermanenceSym r => r (Permanence r)
class (FunctionSym r) => OOFunctionSym r
func :: OOFunctionSym r => Label -> VSType r -> [SValue r] -> VSFunction r
objAccess :: OOFunctionSym r => SValue r -> VSFunction r -> SValue r
($.) :: OOFunctionSym r => SValue r -> VSFunction r -> SValue r
infixl 9 $.
selfAccess :: (OOVariableValue r, OOFunctionSym r) => VSFunction r -> SValue r
class (StatementSym r, OOFunctionSym r) => ObserverPattern r
notifyObservers :: ObserverPattern r => VSFunction r -> VSType r -> r (Scope r) -> MSStatement r
observerListName :: Label
initObserverList :: DeclStatement r => VSType r -> [SValue r] -> r (Scope r) -> MSStatement r
addObserver :: (StatementSym r, OOVariableValue r, List r) => SValue r -> r (Scope r) -> MSStatement r
class (BodySym r, VariableSym r) => StrategyPattern r
runStrategy :: StrategyPattern r => Label -> [(Label, MSBody r)] -> Maybe (SValue r) -> Maybe (SVariable r) -> MSBlock r
convTypeOO :: OOTypeSym r => CodeType -> VSType r

module Drasil.GOOL.RendererClassesOO
class (CommonRenderSym r, FileSym r, InternalValueExp r, GetSet r, ObserverPattern r, StrategyPattern r, OOVariableValue r, OOValueExpression r, RenderClass r, ClassElim r, RenderFile r, InternalGetSet r, OORenderMethod r, RenderMod r, ModuleElim r, StateVarElim r, PermElim r) => OORenderSym r
class (BlockCommentSym r) => RenderFile r
top :: RenderFile r => r (Module r) -> r (Block r)
bottom :: RenderFile r => r (Block r)
commentedMod :: RenderFile r => SFile r -> FS (r (BlockComment r)) -> SFile r
fileFromData :: RenderFile r => FilePath -> FSModule r -> SFile r
class PermElim r
perm :: PermElim r => r (Permanence r) -> Doc
binding :: PermElim r => r (Permanence r) -> Binding
class InternalGetSet r
getFunc :: InternalGetSet r => SVariable r -> VSFunction r
setFunc :: InternalGetSet r => VSType r -> SVariable r -> SValue r -> VSFunction r
class StateVarElim r
stateVar :: StateVarElim r => r (StateVar r) -> Doc
type ParentSpec = Doc
class (BlockCommentSym r) => RenderClass r
intClass :: RenderClass r => Label -> r (Visibility r) -> r ParentSpec -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
inherit :: RenderClass r => Maybe Label -> r ParentSpec
implements :: RenderClass r => [Label] -> r ParentSpec
commentedClass :: RenderClass r => CS (r (BlockComment r)) -> SClass r -> SClass r
class ClassElim r
class' :: ClassElim r => r (Class r) -> Doc
class RenderMod r
modFromData :: RenderMod r => String -> FS Doc -> FSModule r
updateModuleDoc :: RenderMod r => (Doc -> Doc) -> r (Module r) -> r (Module r)
class ModuleElim r
module' :: ModuleElim r => r (Module r) -> Doc
class (RenderMethod r, OOMethodTypeSym r) => OORenderMethod r

-- | Main method?, name, public<i>private, static</i>dynamic, return type,
--   parameters, body
intMethod :: OORenderMethod r => Bool -> Label -> r (Visibility r) -> r (Permanence r) -> MSMthdType r -> [MSParameter r] -> MSBody r -> SMethod r

-- | True for main function, name, public<i>private, static</i>dynamic,
--   return type, parameters, body
intFunc :: OORenderMethod r => Bool -> Label -> r (Visibility r) -> r (Permanence r) -> MSMthdType r -> [MSParameter r] -> MSBody r -> SMethod r
destructor :: OORenderMethod r => [CSStateVar r] -> SMethod r
class (MethodTypeSym r) => OOMethodTypeSym r
construct :: OOMethodTypeSym r => Label -> MSMthdType r


-- | Language-polymorphic functions that are defined by GOOL code
module Drasil.GOOL.LanguageRenderer.Macros
ifExists :: CommonRenderSym r => SValue r -> MSBody r -> MSBody r -> MSStatement r
decrement1 :: CommonRenderSym r => SVariable r -> MSStatement r
increment :: CommonRenderSym r => SVariable r -> SValue r -> MSStatement r
increment1 :: CommonRenderSym r => SVariable r -> MSStatement r
runStrategy :: (CommonRenderSym r, Monad r) => Label -> [(Label, MSBody r)] -> Maybe (SValue r) -> Maybe (SVariable r) -> MS (r Doc)
listSlice :: CommonRenderSym r => Maybe (SValue r) -> Maybe (SValue r) -> Maybe (SValue r) -> SVariable r -> SValue r -> MSBlock r

-- | Gets the expression and code for setting bounds in a list slice Input:
--   - String: Variable name for bound (to be created if necessary), -
--   SValue: step value - Maybe Integer: literal value of step, if exists -
--   Maybe SValue: given value of bound - SValue: value of bound if bound
--   not given and step is positive - SValue: value of bound if bound not
--   given and step is negative Output: (MSStatement, SValue): (setter,
--   value) of bound
makeSetterVal :: CommonRenderSym r => Label -> SValue r -> Maybe Integer -> Maybe (SValue r) -> SValue r -> SValue r -> r (Scope r) -> (MSStatement r, SValue r)
stringListVals :: CommonRenderSym r => [SVariable r] -> SValue r -> MSStatement r
stringListLists :: CommonRenderSym r => [SVariable r] -> SValue r -> MSStatement r
forRange :: CommonRenderSym r => SVariable r -> SValue r -> SValue r -> SValue r -> MSBody r -> MSStatement r
notifyObservers :: OORenderSym r => VSFunction r -> VSType r -> r (Scope r) -> MSStatement r
notifyObservers' :: OORenderSym r => VSFunction r -> VSType r -> r (Scope r) -> MSStatement r


-- | The structure for a class of renderers is defined here.
module Drasil.GOOL.LanguageRenderer
classDec :: Doc
dot :: Doc
commentStart :: Doc
returnLabel :: Doc
ifLabel :: Doc
elseLabel :: Doc
elseIfLabel :: Doc
forLabel :: Doc
inLabel :: Doc
whileLabel :: Doc
tryLabel :: Doc
catchLabel :: Doc
throwLabel :: Doc
throwsLabel :: Doc
importLabel :: Doc
blockCmtStart :: Doc
blockCmtEnd :: Doc
docCmtStart :: Doc
bodyStart :: Doc
bodyEnd :: Doc
endStatement :: Doc
constDec' :: Doc
exceptionObj' :: Doc
new' :: Doc
this' :: Doc
self' :: Doc
array' :: Doc
listSep' :: Doc
argc :: String
argv :: String
args :: String
printLabel :: String
constDec :: String
exceptionObj :: String
mainFunc :: String
new :: String
this :: String
self :: String
nullLabel :: String
array :: String
listSep :: String
sqrt :: String
abs :: String
fabs :: String
log10 :: String
log :: String
exp :: String
sin :: String
cos :: String
tan :: String
asin :: String
acos :: String
atan :: String
floor :: String
ceil :: String
pow :: String
piLabel :: String
access :: String -> String -> String
containing :: String -> String -> String
tuple :: [String] -> String
mathFunc :: String -> String
addExt :: String -> String -> String
package :: Label -> Doc -> FileData -> FileData
file :: Doc -> Doc -> Doc -> Doc
module' :: Doc -> Doc -> Doc -> Doc
class' :: Label -> Doc -> Doc -> Doc -> Doc -> Doc
multiStmt :: [(Doc, Terminator)] -> (Doc, Terminator)
block :: [Doc] -> Doc
body :: [Doc] -> Doc
print :: CommonRenderSym r => r (Value r) -> r (Value r) -> Doc
printFile :: Label -> Doc -> Doc
param :: CommonRenderSym r => r (Variable r) -> Doc
method :: OORenderSym r => Label -> r (Visibility r) -> r (Permanence r) -> r (Type r) -> [r (Parameter r)] -> r (Body r) -> Doc
stateVar :: Doc -> Doc -> Doc -> Doc
constVar :: Doc -> Doc -> Doc -> VarData -> Doc
stateVarList :: [Doc] -> Doc
switch :: CommonRenderSym r => (Doc -> Doc) -> r (Statement r) -> r (Value r) -> r (Body r) -> [(r (Value r), r (Body r))] -> Doc
assign :: CommonRenderSym r => r (Variable r) -> r (Value r) -> Doc
addAssign :: CommonRenderSym r => r (Variable r) -> r (Value r) -> Doc
subAssign :: CommonRenderSym r => r (Variable r) -> r (Value r) -> Doc
increment :: CommonRenderSym r => r (Variable r) -> Doc
decrement :: CommonRenderSym r => r (Variable r) -> Doc
listDec :: CommonRenderSym r => r (Variable r) -> r (Value r) -> Doc
getTerm :: Terminator -> Doc
return' :: CommonRenderSym r => [r (Value r)] -> Doc
comment :: Label -> Doc -> Doc
var :: Label -> Doc
extVar :: Library -> Label -> Doc
arg :: CommonRenderSym r => r (Value r) -> r (Value r) -> Doc
classVar :: Doc -> Doc -> Doc
objVar :: Doc -> Doc -> Doc
unOpDocD :: Doc -> Doc -> Doc
unOpDocD' :: Doc -> Doc -> Doc
binOpDocD :: Doc -> Doc -> Doc -> Doc
binOpDocD' :: Doc -> Doc -> Doc -> Doc
constDecDef :: CommonRenderSym r => r (Variable r) -> r (Value r) -> Doc
func :: Doc -> Doc
cast :: Doc -> Doc
listAccessFunc :: CommonRenderSym r => r (Value r) -> Doc
listSetFunc :: Doc -> Doc -> Doc
objAccess :: Doc -> Doc -> Doc
castObj :: Doc -> Doc -> Doc
break :: Doc
continue :: Doc
static :: Doc
dynamic :: Doc
private :: Doc
public :: Doc
blockCmt :: [String] -> Doc -> Doc -> Doc
docCmt :: [String] -> Doc -> Doc -> Doc
commentedItem :: Doc -> Doc -> Doc
addComments :: Label -> Doc -> Doc -> Doc
type FuncDocRenderer = String -> [(String, String)] -> [String] -> [String]
functionDox :: FuncDocRenderer
type ClassDocRenderer = String -> [String]
classDox :: ClassDocRenderer
type ModuleDocRenderer = String -> [String] -> String -> String -> [String]
moduleDox :: ModuleDocRenderer
commentedMod :: FileData -> Doc -> FileData
valueList :: CommonRenderSym r => [r (Value r)] -> Doc
variableList :: CommonRenderSym r => [r (Variable r)] -> Doc
parameterList :: CommonRenderSym r => [r (Parameter r)] -> Doc
namedArgList :: CommonRenderSym r => Doc -> [(r (Variable r), r (Value r))] -> Doc
prependToBody :: (Doc, Terminator) -> Doc -> Doc
appendToBody :: Doc -> (Doc, Terminator) -> Doc
surroundBody :: (Doc, Terminator) -> Doc -> (Doc, Terminator) -> Doc
getterName :: String -> String
setterName :: String -> String
intValue :: CommonRenderSym r => SValue r -> SValue r


-- | Generic constructors and smart constructors to be used in renderers
module Drasil.GOOL.LanguageRenderer.Constructors

-- | Constructs a statement terminated by a semi-colon
mkStmt :: CommonRenderSym r => Doc -> MSStatement r

-- | Constructs a statement without a termination character
mkStmtNoEnd :: CommonRenderSym r => Doc -> MSStatement r

-- | Constructs a value in a stateful context
mkStateVal :: CommonRenderSym r => VSType r -> Doc -> SValue r

-- | Constructs a value in a non-stateful context
mkVal :: CommonRenderSym r => r (Type r) -> Doc -> SValue r

-- | Constructs a dynamic variable in a stateful context
mkStateVar :: CommonRenderSym r => String -> VSType r -> Doc -> SVariable r

-- | Constructs a dynamic variable in a non-stateful context
mkVar :: CommonRenderSym r => String -> r (Type r) -> Doc -> SVariable r

-- | Constructs a static variable in a stateful context
mkStaticVar :: CommonRenderSym r => String -> VSType r -> Doc -> SVariable r
type VSOp r = VS (r OpData)

-- | Construct an operator with given precedence and rendering
mkOp :: Monad r => Int -> Doc -> VSOp r

-- | Construct an operator with typical unary-operator precedence
unOpPrec :: Monad r => String -> VSOp r

-- | Construct an operator with equality-comparison-level precedence
compEqualPrec :: Monad r => String -> VSOp r

-- | Construct an operator with comparison-level precedence
compPrec :: Monad r => String -> VSOp r

-- | Construct an operator with addition-level precedence
addPrec :: Monad r => String -> VSOp r

-- | Construct an operator with multiplication-level precedence
multPrec :: Monad r => String -> VSOp r

-- | Construct an operator with exponentiation-level precedence
powerPrec :: Monad r => String -> VSOp r

-- | Construct an operator with conjunction-level precedence
andPrec :: Monad r => String -> VSOp r

-- | Construct an operator with disjunction-level precedence
orPrec :: Monad r => String -> VSOp r

-- | Constructs a unary expression like ln(v), for some operator ln and
--   value v
unExpr :: CommonRenderSym r => VSUnOp r -> SValue r -> SValue r

-- | Constructs a unary expression like -v, for some operator - and value v
unExpr' :: CommonRenderSym r => VSUnOp r -> SValue r -> SValue r

-- | To be used in languages where the unary operator returns a double. If
--   the value passed to the operator is a float, this function preserves
--   that type by casting the result to a float.
unExprNumDbl :: CommonRenderSym r => VSUnOp r -> SValue r -> SValue r

-- | To be used when the type of the value is different from the type of
--   the resulting expression. The type of the result is passed as a
--   parameter.
typeUnExpr :: CommonRenderSym r => VSUnOp r -> VSType r -> SValue r -> SValue r

-- | Constructs binary expressions like v + w, for some operator + and
--   values v and w, parenthesizing v and w if needed.
binExpr :: CommonRenderSym r => VSBinOp r -> SValue r -> SValue r -> SValue r

-- | Constructs binary expressions like pow(v,w), for some operator pow and
--   values v and w
binExpr' :: CommonRenderSym r => VSBinOp r -> SValue r -> SValue r -> SValue r

-- | To be used in languages where the binary operator returns a double. If
--   either value passed to the operator is a float, this function
--   preserves that type by casting the result to a float.
binExprNumDbl' :: CommonRenderSym r => VSBinOp r -> SValue r -> SValue r -> SValue r

-- | To be used when the types of the values are different from the type of
--   the resulting expression. The type of the result is passed as a
--   parameter.
typeBinExpr :: CommonRenderSym r => VSBinOp r -> VSType r -> SValue r -> SValue r -> SValue r


-- | Implementations defined here are valid for any language renderer.
module Drasil.GOOL.LanguageRenderer.LanguagePolymorphic
fileFromData :: OORenderSym r => (FilePath -> r (Module r) -> r (File r)) -> FilePath -> FSModule r -> SFile r
multiBody :: (CommonRenderSym r, Monad r) => [MSBody r] -> MS (r Doc)
block :: (CommonRenderSym r, Monad r) => [MSStatement r] -> MS (r Doc)
multiBlock :: (CommonRenderSym r, Monad r) => [MSBlock r] -> MS (r Doc)
listInnerType :: OORenderSym r => VSType r -> VSType r
obj :: CommonRenderSym r => ClassName -> VSType r
negateOp :: Monad r => VSOp r
csc :: CommonRenderSym r => SValue r -> SValue r
sec :: CommonRenderSym r => SValue r -> SValue r
cot :: CommonRenderSym r => SValue r -> SValue r
equalOp :: Monad r => VSOp r
notEqualOp :: Monad r => VSOp r
greaterOp :: Monad r => VSOp r
greaterEqualOp :: Monad r => VSOp r
lessOp :: Monad r => VSOp r
lessEqualOp :: Monad r => VSOp r
plusOp :: Monad r => VSOp r
minusOp :: Monad r => VSOp r
multOp :: Monad r => VSOp r
divideOp :: Monad r => VSOp r
moduloOp :: Monad r => VSOp r
var :: CommonRenderSym r => Label -> VSType r -> SVariable r
staticVar :: CommonRenderSym r => Label -> VSType r -> SVariable r
objVar :: CommonRenderSym r => SVariable r -> SVariable r -> SVariable r

-- | To be used in classVar implementations. Throws an error if the
--   variable is not static since classVar is for accessing static
--   variables from a class
classVarCheckStatic :: CommonRenderSym r => r (Variable r) -> r (Variable r)
arrayElem :: OORenderSym r => SValue r -> SVariable r -> SVariable r
litChar :: CommonRenderSym r => (Doc -> Doc) -> Char -> SValue r
litDouble :: CommonRenderSym r => Double -> SValue r
litInt :: CommonRenderSym r => Integer -> SValue r
litString :: CommonRenderSym r => String -> SValue r
valueOf :: CommonRenderSym r => SVariable r -> SValue r
arg :: CommonRenderSym r => SValue r -> SValue r -> SValue r
argsList :: CommonRenderSym r => String -> SValue r

-- | First parameter is separator between name and value for named
--   arguments, rest similar to call from RendererClasses
call :: CommonRenderSym r => Doc -> Maybe Library -> Maybe Doc -> MixedCall r
funcAppMixedArgs :: CommonRenderSym r => MixedCall r
selfFuncAppMixedArgs :: CommonRenderSym r => Doc -> SVariable r -> MixedCall r
newObjMixedArgs :: CommonRenderSym r => String -> MixedCtorCall r
lambda :: CommonRenderSym r => ([r (Variable r)] -> r (Value r) -> Doc) -> [SVariable r] -> SValue r -> SValue r
objAccess :: CommonRenderSym r => SValue r -> VSFunction r -> SValue r
objMethodCall :: CommonRenderSym r => Label -> VSType r -> SValue r -> [SValue r] -> NamedArgs r -> SValue r
func :: CommonRenderSym r => Label -> VSType r -> [SValue r] -> VSFunction r
get :: OORenderSym r => SValue r -> SVariable r -> SValue r
set :: OORenderSym r => SValue r -> SVariable r -> SValue r -> SValue r
listAdd :: OORenderSym r => SValue r -> SValue r -> SValue r -> SValue r
listAppend :: OORenderSym r => SValue r -> SValue r -> SValue r
listAccess :: CommonRenderSym r => SValue r -> SValue r -> SValue r
listSet :: CommonRenderSym r => SValue r -> SValue r -> SValue r -> SValue r
getFunc :: OORenderSym r => SVariable r -> VSFunction r
setFunc :: OORenderSym r => VSType r -> SVariable r -> SValue r -> VSFunction r
listAppendFunc :: OORenderSym r => Label -> SValue r -> VSFunction r
stmt :: CommonRenderSym r => MSStatement r -> MSStatement r
loopStmt :: CommonRenderSym r => MSStatement r -> MSStatement r
emptyStmt :: CommonRenderSym r => MSStatement r
assign :: CommonRenderSym r => Terminator -> SVariable r -> SValue r -> MSStatement r
subAssign :: CommonRenderSym r => Terminator -> SVariable r -> SValue r -> MSStatement r
increment :: CommonRenderSym r => SVariable r -> SValue r -> MSStatement r
objDecNew :: OORenderSym r => SVariable r -> [SValue r] -> MSStatement r
print :: CommonRenderSym r => Bool -> Maybe (SValue r) -> SValue r -> SValue r -> MSStatement r
closeFile :: OORenderSym r => Label -> SValue r -> MSStatement r
returnStmt :: CommonRenderSym r => Terminator -> SValue r -> MSStatement r
valStmt :: CommonRenderSym r => Terminator -> SValue r -> MSStatement r
comment :: CommonRenderSym r => Doc -> Label -> MSStatement r
throw :: CommonRenderSym r => (r (Value r) -> Doc) -> Terminator -> Label -> MSStatement r
ifCond :: CommonRenderSym r => (Doc -> Doc) -> Doc -> OptionalSpace -> Doc -> Doc -> Doc -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
tryCatch :: CommonRenderSym r => (r (Body r) -> r (Body r) -> Doc) -> MSBody r -> MSBody r -> MSStatement r
construct :: CommonRenderSym r => Label -> MS (r (Type r))
param :: CommonRenderSym r => (r (Variable r) -> Doc) -> SVariable r -> MSParameter r
method :: OORenderSym r => Label -> r (Visibility r) -> r (Permanence r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
getMethod :: OORenderSym r => SVariable r -> SMethod r
setMethod :: OORenderSym r => SVariable r -> SMethod r
initStmts :: OORenderSym r => Initializers r -> MSBody r
function :: OORenderSym r => Label -> r (Visibility r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
docFuncRepr :: CommonRenderSym r => FuncDocRenderer -> String -> [String] -> [String] -> SMethod r -> SMethod r
docFunc :: CommonRenderSym r => FuncDocRenderer -> String -> [String] -> Maybe String -> SMethod r -> SMethod r
buildClass :: OORenderSym r => Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
implementingClass :: OORenderSym r => Label -> [Label] -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
docClass :: OORenderSym r => ClassDocRenderer -> String -> SClass r -> SClass r
commentedClass :: (OORenderSym r, Monad r) => CS (r (BlockComment r)) -> SClass r -> CS (r Doc)
modFromData :: Label -> (Doc -> r (Module r)) -> FS Doc -> FSModule r
fileDoc :: OORenderSym r => String -> (r (Module r) -> r (Block r)) -> r (Block r) -> FSModule r -> SFile r

-- | Generates a file for a documented module. mdr is a function that takes
--   description, author, and module name and returns a doc comment e is
--   the file extension d is the description (I think) a is a list of
--   authors dt is the date fl is the file
docMod :: OORenderSym r => ModuleDocRenderer -> String -> String -> [String] -> String -> SFile r -> SFile r
newtype OptionalSpace
OSpace :: Doc -> OptionalSpace
[oSpace] :: OptionalSpace -> Doc
defaultOptSpace :: OptionalSpace
smartAdd :: CommonRenderSym r => SValue r -> SValue r -> SValue r
smartSub :: CommonRenderSym r => SValue r -> SValue r -> SValue r


-- | Implementations defined here are valid in some, but not all, language
--   renderers
module Drasil.GOOL.LanguageRenderer.CommonPseudoOO
int :: CommonRenderSym r => VSType r
constructor :: OORenderSym r => Label -> [MSParameter r] -> Initializers r -> MSBody r -> SMethod r
doxFunc :: CommonRenderSym r => String -> [String] -> Maybe String -> SMethod r -> SMethod r
doxClass :: OORenderSym r => String -> SClass r -> SClass r
doxMod :: OORenderSym r => String -> String -> [String] -> String -> SFile r -> SFile r
docMod' :: OORenderSym r => String -> String -> [String] -> String -> SFile r -> SFile r

-- | Generates Markdown/DocC style function doc comment.
functionDoc :: FuncDocRenderer
extVar :: CommonRenderSym r => Label -> Label -> VSType r -> SVariable r
classVar :: CommonRenderSym r => (Doc -> Doc -> Doc) -> VSType r -> SVariable r -> SVariable r
objVarSelf :: OORenderSym r => SVariable r -> SVariable r
indexOf :: OORenderSym r => Label -> SValue r -> SValue r -> SValue r
listAddFunc :: OORenderSym r => Label -> SValue r -> SValue r -> VSFunction r
discardFileLine :: OORenderSym r => Label -> SValue r -> MSStatement r

-- | An internal function for creating a class. Parameters: render
--   function, class name, scope, parent, class variables, constructor(s),
--   methods
intClass :: (OORenderSym r, Monad r) => (Label -> Doc -> Doc -> Doc -> Doc -> Doc) -> Label -> r (Visibility r) -> r ParentSpec -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> CS (r Doc)
funcType :: CommonRenderSym r => [VSType r] -> VSType r -> VSType r
buildModule :: OORenderSym r => Label -> FS Doc -> FS Doc -> FS Doc -> [SMethod r] -> [SClass r] -> FSModule r
arrayType :: CommonRenderSym r => VSType r -> VSType r
pi :: CommonRenderSym r => SValue r
printSt :: CommonRenderSym r => SValue r -> SValue r -> MSStatement r
arrayDec :: CommonRenderSym r => SValue r -> SVariable r -> MSStatement r
arrayDecDef :: CommonRenderSym r => SVariable r -> [SValue r] -> MSStatement r
openFileA :: CommonRenderSym r => (SValue r -> VSType r -> SValue r -> SValue r) -> SVariable r -> SValue r -> MSStatement r
forEach :: CommonRenderSym r => Doc -> Doc -> Doc -> Doc -> SVariable r -> SValue r -> MSBody r -> MSStatement r
forEach' :: CommonRenderSym r => (r (Variable r) -> r (Value r) -> r (Body r) -> Doc) -> SVariable r -> SValue r -> MSBody r -> MSStatement r
docMain :: OORenderSym r => MSBody r -> SMethod r
mainFunction :: OORenderSym r => VSType r -> Label -> MSBody r -> SMethod r

-- | Used by the language renderers to build the module. n is the module
--   name inc is the include is is the import statements ms is the class
--   methods cs is the classes
buildModule' :: OORenderSym r => Label -> (String -> r (Import r)) -> [Label] -> [SMethod r] -> [SClass r] -> FSModule r

-- | First parameter is language name, rest similar to call from
--   RendererClassesCommon
call' :: CommonRenderSym r => String -> Maybe Library -> Maybe Doc -> MixedCall r
listSizeFunc :: OORenderSym r => VSFunction r
listAccessFunc' :: OORenderSym r => Label -> VSType r -> SValue r -> VSFunction r
string :: CommonRenderSym r => VSType r
constDecDef :: CommonRenderSym r => SVariable r -> SValue r -> MSStatement r
docInOutFunc :: CommonRenderSym r => ([SVariable r] -> [SVariable r] -> [SVariable r] -> MSBody r -> SMethod r) -> String -> [(String, SVariable r)] -> [(String, SVariable r)] -> [(String, SVariable r)] -> MSBody r -> SMethod r
bindingError :: String -> String
extFuncAppMixedArgs :: CommonRenderSym r => Library -> MixedCall r
notNull :: CommonRenderSym r => String -> SValue r -> SValue r
listDecDef :: CommonRenderSym r => SVariable r -> [SValue r] -> MSStatement r
destructorError :: String -> String
stateVarDef :: (OORenderSym r, Monad r) => r (Visibility r) -> r (Permanence r) -> SVariable r -> SValue r -> CS (r Doc)
constVar :: (CommonRenderSym r, Monad r) => Doc -> r (Visibility r) -> SVariable r -> SValue r -> CS (r Doc)
litArray :: CommonRenderSym r => (Doc -> Doc) -> VSType r -> [SValue r] -> SValue r
listSetFunc :: CommonRenderSym r => (Doc -> Doc -> Doc) -> SValue r -> SValue r -> SValue r -> VSFunction r
extraClass :: OORenderSym r => Label -> Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
listAccessFunc :: CommonRenderSym r => VSType r -> SValue r -> VSFunction r
doubleRender :: String
double :: CommonRenderSym r => VSType r
openFileR :: CommonRenderSym r => (SValue r -> VSType r -> SValue r) -> SVariable r -> SValue r -> MSStatement r
openFileW :: CommonRenderSym r => (SValue r -> VSType r -> SValue r -> SValue r) -> SVariable r -> SValue r -> MSStatement r
stateVar :: (OORenderSym r, Monad r) => r (Visibility r) -> r (Permanence r) -> SVariable r -> CS (r Doc)
self :: OORenderSym r => SVariable r
multiAssign :: CommonRenderSym r => (Doc -> Doc) -> [SVariable r] -> [SValue r] -> MSStatement r
multiReturn :: CommonRenderSym r => (Doc -> Doc) -> [SValue r] -> MSStatement r
listDec :: CommonRenderSym r => SVariable r -> MSStatement r
funcDecDef :: OORenderSym r => SVariable r -> [SVariable r] -> MSBody r -> MSStatement r
inOutCall :: CommonRenderSym r => (Label -> VSType r -> [SValue r] -> SValue r) -> Label -> [SValue r] -> [SVariable r] -> [SVariable r] -> MSStatement r
forLoopError :: String -> String
mainBody :: CommonRenderSym r => MSBody r -> SMethod r
inOutFunc :: CommonRenderSym r => (VSType r -> [MSParameter r] -> MSBody r -> SMethod r) -> [SVariable r] -> [SVariable r] -> [SVariable r] -> MSBody r -> SMethod r
docInOutFunc' :: CommonRenderSym r => FuncDocRenderer -> ([SVariable r] -> [SVariable r] -> [SVariable r] -> MSBody r -> SMethod r) -> String -> [(String, SVariable r)] -> [(String, SVariable r)] -> [(String, SVariable r)] -> MSBody r -> SMethod r
boolRender :: String
bool :: CommonRenderSym r => VSType r
floatRender :: String
float :: CommonRenderSym r => VSType r
stringRender' :: String
string' :: CommonRenderSym r => VSType r
inherit :: Monad r => Maybe Label -> r ParentSpec
implements :: Monad r => [Label] -> r ParentSpec

-- | Call to get the size of a list in a language where this is not a
--   method.
listSize :: CommonRenderSym r => SValue r -> SValue r

-- | Call to insert a value into a list in a language where this is not a
--   method.
listAdd :: CommonRenderSym r => SValue r -> SValue r -> SValue r -> SValue r

-- | Call to append a value to a list in a language where this is not a
--   method.
listAppend :: CommonRenderSym r => SValue r -> SValue r -> SValue r

-- | Convert an integer to an index in a 0-indexed language Since GOOL is
--   0-indexed, no adjustments need be made
intToIndex :: SValue r -> SValue r

-- | Convert an index to an integer in a 0-indexed language Since GOOL is
--   0-indexed, no adjustments need be made
indexToInt :: SValue r -> SValue r

-- | Convert an integer to an index in a 1-indexed language Since GOOL is
--   0-indexed, we need to add 1
intToIndex' :: CommonRenderSym r => SValue r -> SValue r

-- | Convert an index to an integer in a 1-indexed language Since GOOL is
--   0-indexed, we need to subtract 1
indexToInt' :: CommonRenderSym r => SValue r -> SValue r

-- | For declaring and optionally defining a variable in a language where
--   declaring a variable before defining it is not required. v is the
--   variable to declare, and e is Nothing if we are not defining it, and
--   (Just d) if d is the value we are defining it as.
varDecDef :: CommonRenderSym r => SVariable r -> Maybe (SValue r) -> MSStatement r
openFileR' :: CommonRenderSym r => SValue r -> SValue r
openFileW' :: CommonRenderSym r => SValue r -> SValue r
openFileA' :: CommonRenderSym r => SValue r -> SValue r
argExists :: CommonRenderSym r => Integer -> SValue r


-- | The logic to render Python code is contained in this module
module Drasil.GOOL.LanguageRenderer.PythonRenderer
newtype PythonCode a
PC :: a -> PythonCode a
[unPC] :: PythonCode a -> a
pyName :: String
pyVersion :: String
instance GHC.Base.Functor Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance GHC.Base.Applicative Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance GHC.Base.Monad Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.SharedProg Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.OOProg Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.ProgramSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.CommonRenderSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.OORenderSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.FileSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.RenderFile Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.ImportSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.ImportElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.PermanenceSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.PermElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.BodySym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.RenderBody Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.BodyElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.BlockSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.RenderBlock Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.BlockElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.TypeSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.OOTypeSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.TypeElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.RenderType Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.InternalTypeElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.UnaryOpSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.BinaryOpSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.OpElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.ScopeSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.VariableSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.VariableElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.InternalVarElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.RenderVariable Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.ValueSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.OOValueSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.Argument Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.Literal Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.MathConstant Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.VariableValue Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableValue Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.CommandLineArgs Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.NumericExpression Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.BooleanExpression Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.Comparison Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.ValueExpression Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.OOValueExpression Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.RenderValue Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.ValueElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.InternalValueExp Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.FunctionSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.OOFunctionSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.GetSet Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.List Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.InternalList Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.InternalGetSet Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.InternalListFunc Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.ThunkSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.ThunkAssign Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.VectorType Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.VectorDecl Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.VectorThunk Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.VectorExpression Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.RenderFunction Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.FunctionElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.InternalAssignStmt Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.InternalIOStmt Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.InternalControlStmt Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.RenderStatement Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.StatementElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.StatementSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.AssignStatement Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.DeclStatement Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.OODeclStatement Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.IOStatement Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.StringStatement Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.FuncAppStatement Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.OOFuncAppStatement Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.CommentStatement Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.ControlStatement Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.ObserverPattern Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.StrategyPattern Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.VisibilitySym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.RenderVisibility Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.VisibilityElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.MethodTypeSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.OOMethodTypeSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.ParameterSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.RenderParam Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.ParamElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceCommon.MethodSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.OOMethodSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.RenderMethod Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.OORenderMethod Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.MethodElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.StateVarSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.StateVarElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.ClassSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.RenderClass Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.ClassElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.InterfaceGOOL.ModuleSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.RenderMod Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesOO.ModuleElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentSym Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentElim Drasil.GOOL.LanguageRenderer.PythonRenderer.PythonCode


-- | Implementations for C-like renderers are defined here.
module Drasil.GOOL.LanguageRenderer.CLike
charRender :: String
float :: CommonRenderSym r => VSType r
double :: CommonRenderSym r => VSType r
char :: CommonRenderSym r => VSType r
listType :: CommonRenderSym r => String -> VSType r -> VSType r
void :: CommonRenderSym r => VSType r
notOp :: Monad r => VSOp r
andOp :: Monad r => VSOp r
orOp :: Monad r => VSOp r
self :: OORenderSym r => SVariable r
litTrue :: CommonRenderSym r => SValue r
litFalse :: CommonRenderSym r => SValue r
litFloat :: CommonRenderSym r => Float -> SValue r
inlineIf :: CommonRenderSym r => SValue r -> SValue r -> SValue r -> SValue r
libFuncAppMixedArgs :: CommonRenderSym r => Library -> MixedCall r
libNewObjMixedArgs :: OORenderSym r => Library -> MixedCtorCall r
listSize :: OORenderSym r => SValue r -> SValue r
increment1 :: CommonRenderSym r => SVariable r -> MSStatement r
decrement1 :: CommonRenderSym r => SVariable r -> MSStatement r
varDec :: OORenderSym r => r (Permanence r) -> r (Permanence r) -> Doc -> SVariable r -> MSStatement r
varDecDef :: CommonRenderSym r => Terminator -> SVariable r -> SValue r -> MSStatement r
listDec :: CommonRenderSym r => (r (Value r) -> Doc) -> SValue r -> SVariable r -> MSStatement r
extObjDecNew :: OORenderSym r => Library -> SVariable r -> [SValue r] -> MSStatement r
switch :: CommonRenderSym r => (Doc -> Doc) -> MSStatement r -> SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
for :: CommonRenderSym r => Doc -> Doc -> MSStatement r -> SValue r -> MSStatement r -> MSBody r -> MSStatement r
while :: CommonRenderSym r => (Doc -> Doc) -> Doc -> Doc -> SValue r -> MSBody r -> MSStatement r
intFunc :: OORenderSym r => Bool -> Label -> r (Visibility r) -> r (Permanence r) -> MSMthdType r -> [MSParameter r] -> MSBody r -> SMethod r
multiAssignError :: String -> String
multiReturnError :: String -> String
multiTypeError :: String -> String


-- | The logic to render Swift code is contained in this module
module Drasil.GOOL.LanguageRenderer.SwiftRenderer
newtype SwiftCode a
SC :: a -> SwiftCode a
[unSC] :: SwiftCode a -> a
swiftName :: String
swiftVersion :: String
instance GHC.Classes.Eq a => GHC.Classes.Eq (Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode a)
instance GHC.Base.Functor Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance GHC.Base.Applicative Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance GHC.Base.Monad Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.SharedProg Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.OOProg Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.ProgramSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.CommonRenderSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.OORenderSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.FileSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.RenderFile Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.ImportSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.ImportElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.PermanenceSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.PermElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.BodySym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.RenderBody Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.BodyElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.BlockSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.RenderBlock Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.BlockElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.TypeSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.OOTypeSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.TypeElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.RenderType Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.InternalTypeElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.UnaryOpSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.BinaryOpSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.OpElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.ScopeSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.VariableSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.VariableElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.InternalVarElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.RenderVariable Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.ValueSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.OOValueSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.Argument Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.Literal Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.MathConstant Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.VariableValue Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableValue Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.CommandLineArgs Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.NumericExpression Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.BooleanExpression Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.Comparison Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.ValueExpression Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.OOValueExpression Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.RenderValue Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.ValueElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.InternalValueExp Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.FunctionSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.OOFunctionSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.GetSet Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.List Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.InternalList Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.InternalGetSet Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.InternalListFunc Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.ThunkSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.ThunkAssign Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.VectorType Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.VectorDecl Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.VectorThunk Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.VectorExpression Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.RenderFunction Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.FunctionElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.InternalAssignStmt Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.InternalIOStmt Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.InternalControlStmt Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.RenderStatement Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.StatementElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.StatementSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.AssignStatement Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.DeclStatement Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.OODeclStatement Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.IOStatement Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.StringStatement Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.FuncAppStatement Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.OOFuncAppStatement Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.CommentStatement Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.ControlStatement Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.ObserverPattern Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.StrategyPattern Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.VisibilitySym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.RenderVisibility Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.VisibilityElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.MethodTypeSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.OOMethodTypeSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.ParameterSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.RenderParam Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.ParamElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceCommon.MethodSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.OOMethodSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.RenderMethod Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.OORenderMethod Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.MethodElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.StateVarSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.StateVarElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.ClassSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.RenderClass Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.ClassElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.InterfaceGOOL.ModuleSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.RenderMod Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesOO.ModuleElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentSym Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentElim Drasil.GOOL.LanguageRenderer.SwiftRenderer.SwiftCode


-- | The logic to render Julia code is contained in this module
module Drasil.GOOL.LanguageRenderer.JuliaRenderer
newtype JuliaCode a
JLC :: a -> JuliaCode a
[unJLC] :: JuliaCode a -> a
jlName :: String
jlVersion :: String
instance GHC.Base.Functor Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance GHC.Base.Applicative Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance GHC.Base.Monad Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.SharedProg Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.OOProg Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.ProgramSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.CommonRenderSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.OORenderSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.FileSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.RenderFile Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.ImportSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.ImportElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.PermElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.BodySym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.RenderBody Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.BodyElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.BlockSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.RenderBlock Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.BlockElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.TypeSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.TypeElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.RenderType Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.InternalTypeElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.UnaryOpSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.BinaryOpSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.OpElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.ScopeSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.VariableSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.VariableElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.InternalVarElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.RenderVariable Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.ValueSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.Argument Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.Literal Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.MathConstant Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.VariableValue Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.CommandLineArgs Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.NumericExpression Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.BooleanExpression Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.Comparison Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.ValueExpression Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.RenderValue Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.ValueElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.List Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.InternalList Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.InternalListFunc Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.ThunkSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.ThunkAssign Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.VectorType Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.VectorDecl Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.VectorThunk Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.VectorExpression Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.RenderFunction Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.FunctionElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.InternalAssignStmt Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.InternalIOStmt Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.InternalControlStmt Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.RenderStatement Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.StatementElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.StatementSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.AssignStatement Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.DeclStatement Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.IOStatement Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.StringStatement Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.FunctionSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.FuncAppStatement Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.CommentStatement Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.ControlStatement Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.VisibilitySym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.RenderVisibility Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.VisibilityElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.MethodTypeSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.ParameterSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.RenderParam Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.ParamElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceCommon.MethodSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.RenderMethod Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.OORenderMethod Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.MethodElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.ModuleSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.RenderMod Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.ModuleElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.OOFunctionSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.InternalValueExp Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.GetSet Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.ObserverPattern Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.StrategyPattern Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.StateVarSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.StateVarElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.ClassSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.RenderClass Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.ClassElim Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.PermanenceSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.OOTypeSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.OOValueExpression Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.OODeclStatement Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.OOFuncAppStatement Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.OOMethodSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableValue Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.InterfaceGOOL.OOValueSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.InternalGetSet Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode
instance Drasil.GOOL.RendererClassesOO.OOMethodTypeSym Drasil.GOOL.LanguageRenderer.JuliaRenderer.JuliaCode


-- | The logic to render Java code is contained in this module
module Drasil.GOOL.LanguageRenderer.JavaRenderer
newtype JavaCode a
JC :: a -> JavaCode a
[unJC] :: JavaCode a -> a
jName :: String
jVersion :: String
instance GHC.Base.Functor Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance GHC.Base.Applicative Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance GHC.Base.Monad Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.SharedProg Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.OOProg Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.ProgramSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.CommonRenderSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.OORenderSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.FileSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.RenderFile Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.ImportSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.ImportElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.PermanenceSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.PermElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.BodySym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.RenderBody Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.BodyElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.BlockSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.RenderBlock Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.BlockElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.TypeSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.OOTypeSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.TypeElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.RenderType Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.InternalTypeElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.UnaryOpSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.BinaryOpSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.OpElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.ScopeSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.VariableSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.VariableElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.InternalVarElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.RenderVariable Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.ValueSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.OOValueSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.Argument Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.Literal Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.MathConstant Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.VariableValue Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableValue Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.CommandLineArgs Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.NumericExpression Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.BooleanExpression Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.Comparison Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.ValueExpression Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.OOValueExpression Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.RenderValue Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.ValueElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.InternalValueExp Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.FunctionSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.OOFunctionSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.GetSet Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.List Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.InternalList Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.InternalGetSet Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.InternalListFunc Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.ThunkSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.ThunkAssign Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.VectorType Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.VectorDecl Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.VectorThunk Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.VectorExpression Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.RenderFunction Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.FunctionElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.InternalAssignStmt Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.InternalIOStmt Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.InternalControlStmt Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.RenderStatement Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.StatementElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.StatementSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.AssignStatement Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.DeclStatement Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.OODeclStatement Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.IOStatement Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.StringStatement Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.FuncAppStatement Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.OOFuncAppStatement Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.CommentStatement Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.ControlStatement Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.ObserverPattern Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.StrategyPattern Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.VisibilitySym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.RenderVisibility Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.VisibilityElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.MethodTypeSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.OOMethodTypeSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.ParameterSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.RenderParam Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.ParamElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceCommon.MethodSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.OOMethodSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.RenderMethod Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.OORenderMethod Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.MethodElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.StateVarSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.StateVarElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.ClassSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.RenderClass Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.ClassElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.InterfaceGOOL.ModuleSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.RenderMod Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesOO.ModuleElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentSym Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentElim Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode
instance Drasil.GOOL.CodeAnalysis.HasException Drasil.GOOL.LanguageRenderer.JavaRenderer.JavaCode


-- | The logic to render C++ code is contained in this module
module Drasil.GOOL.LanguageRenderer.CppRenderer
newtype CppSrcCode a
CPPSC :: a -> CppSrcCode a
[unCPPSC] :: CppSrcCode a -> a
newtype CppHdrCode a
CPPHC :: a -> CppHdrCode a
[unCPPHC] :: CppHdrCode a -> a
data CppCode x y a
CPPC :: x a -> y a -> CppCode x y a
[src] :: CppCode x y a -> x a
[hdr] :: CppCode x y a -> y a
unCPPC :: CppCode CppSrcCode CppHdrCode a -> a
cppName :: String
cppVersion :: String
instance GHC.Classes.Eq a => GHC.Classes.Eq (Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode a)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.MethodSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.InterfaceCommon.MethodSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.MethodElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.MethodSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.MethodElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.SharedProg (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.OOProg (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.ProgramSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.CommonRenderSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.FileSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesOO.RenderFile (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.ImportSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.ImportElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.PermanenceSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesOO.PermElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.BodySym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.RenderBody (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.BodyElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.BlockSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.RenderBlock (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.BlockElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.TypeSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.OOTypeSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.TypeElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.RenderType (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.InternalTypeElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.UnaryOpSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.BinaryOpSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.OpElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.ScopeSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.VariableSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.OOVariableSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.VariableElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.InternalVarElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.RenderVariable (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.ValueSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.OOValueSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.Argument (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.Literal (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.MathConstant (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.VariableValue (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.OOVariableValue (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.CommandLineArgs (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.NumericExpression (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.BooleanExpression (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.Comparison (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.ValueExpression (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.OOValueExpression (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.RenderValue (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.ValueElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.InternalValueExp (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.FunctionSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.OOFunctionSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.GetSet (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.List (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.InternalList (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesOO.InternalGetSet (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.InternalListFunc (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.InterfaceCommon.ThunkSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.ThunkAssign (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.VectorType (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.VectorDecl (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.VectorThunk (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.VectorExpression (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.RenderFunction (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.FunctionElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.InternalAssignStmt (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.InternalIOStmt (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.InternalControlStmt (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.RenderStatement (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.StatementElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.StatementSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.AssignStatement (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.DeclStatement (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.OODeclStatement (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.IOStatement (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.StringStatement (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.FuncAppStatement (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.OOFuncAppStatement (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.CommentStatement (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.ControlStatement (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.ObserverPattern (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.StrategyPattern (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.VisibilitySym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.RenderVisibility (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.VisibilityElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.MethodTypeSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesOO.OOMethodTypeSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceCommon.ParameterSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.RenderParam (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.ParamElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.OOMethodSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.RenderMethod (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesOO.OORenderMethod (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.MethodElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.StateVarSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesOO.StateVarElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.ClassSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesOO.RenderClass (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesOO.ClassElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.InterfaceGOOL.ModuleSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesOO.RenderMod (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesOO.ModuleElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.BlockCommentSym (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance Drasil.GOOL.Classes.Pair p => Drasil.GOOL.RendererClassesCommon.BlockCommentElim (p Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode)
instance GHC.Base.Functor Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance GHC.Base.Applicative Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance GHC.Base.Monad Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.CommonRenderSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.OORenderSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.FileSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.RenderFile Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.ImportSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.ImportElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.PermanenceSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.PermElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.BodySym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.RenderBody Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.BodyElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.BlockSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.RenderBlock Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.BlockElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.TypeSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.OOTypeSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.TypeElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.RenderType Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.InternalTypeElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.UnaryOpSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.BinaryOpSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.OpElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.ScopeSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.VariableSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.VariableElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.InternalVarElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.RenderVariable Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.ValueSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.OOValueSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.Argument Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.Literal Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.MathConstant Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.VariableValue Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableValue Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.CommandLineArgs Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.NumericExpression Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.BooleanExpression Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.Comparison Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.ValueExpression Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.OOValueExpression Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.RenderValue Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.ValueElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.InternalValueExp Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.FunctionSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.OOFunctionSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.GetSet Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.List Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.InternalList Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.InternalGetSet Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.InternalListFunc Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.ThunkSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.ThunkAssign Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.VectorType Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.VectorDecl Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.VectorThunk Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.VectorExpression Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.RenderFunction Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.FunctionElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.InternalAssignStmt Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.InternalIOStmt Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.InternalControlStmt Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.RenderStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.StatementElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.StatementSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.AssignStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.DeclStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.OODeclStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.IOStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.StringStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.FuncAppStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.OOFuncAppStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.CommentStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.ControlStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.ObserverPattern Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.StrategyPattern Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.VisibilitySym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.RenderVisibility Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.VisibilityElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.MethodTypeSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.OOMethodTypeSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceCommon.ParameterSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.RenderParam Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.ParamElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.OOMethodSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.RenderMethod Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.OORenderMethod Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.StateVarSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.StateVarElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.ClassSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.RenderClass Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.ClassElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.InterfaceGOOL.ModuleSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.RenderMod Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesOO.ModuleElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppHdrCode
instance GHC.Base.Functor Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance GHC.Base.Applicative Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance GHC.Base.Monad Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.ProgramSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.CommonRenderSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.OORenderSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.FileSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.RenderFile Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.ImportSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.ImportElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.PermanenceSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.PermElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.BodySym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.RenderBody Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.BodyElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.BlockSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.RenderBlock Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.BlockElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.TypeSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.OOTypeSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.TypeElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.RenderType Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.InternalTypeElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.UnaryOpSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.BinaryOpSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.OpElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.ScopeSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.VariableSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.VariableElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.InternalVarElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.RenderVariable Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.ValueSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.OOValueSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.Argument Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.Literal Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.MathConstant Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.VariableValue Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableValue Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.CommandLineArgs Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.NumericExpression Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.BooleanExpression Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.Comparison Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.ValueExpression Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.OOValueExpression Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.RenderValue Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.ValueElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.InternalValueExp Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.FunctionSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.OOFunctionSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.GetSet Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.List Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.InternalList Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.InternalGetSet Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.InternalListFunc Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.ThunkSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.ThunkAssign Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.VectorType Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.VectorDecl Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.VectorThunk Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.VectorExpression Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.RenderFunction Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.FunctionElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.InternalAssignStmt Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.InternalIOStmt Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.InternalControlStmt Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.RenderStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.StatementElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.StatementSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.AssignStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.DeclStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.OODeclStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.IOStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.StringStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.FuncAppStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.OOFuncAppStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.CommentStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.ControlStatement Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.ObserverPattern Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.StrategyPattern Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.VisibilitySym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.RenderVisibility Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.VisibilityElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.MethodTypeSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.OOMethodTypeSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceCommon.ParameterSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.RenderParam Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.ParamElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.OOMethodSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.RenderMethod Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.OORenderMethod Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.StateVarSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.StateVarElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.ClassSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.RenderClass Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.ClassElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.InterfaceGOOL.ModuleSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.RenderMod Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesOO.ModuleElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentSym Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentElim Drasil.GOOL.LanguageRenderer.CppRenderer.CppSrcCode
instance Drasil.GOOL.Classes.Pair Drasil.GOOL.LanguageRenderer.CppRenderer.CppCode


-- | The logic to render C# code is contained in this module
module Drasil.GOOL.LanguageRenderer.CSharpRenderer
newtype CSharpCode a
CSC :: a -> CSharpCode a
[unCSC] :: CSharpCode a -> a
csName :: String
csVersion :: String
instance GHC.Classes.Eq a => GHC.Classes.Eq (Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode a)
instance GHC.Base.Functor Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance GHC.Base.Applicative Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance GHC.Base.Monad Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.SharedProg Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.OOProg Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.ProgramSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.CommonRenderSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.OORenderSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.FileSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.RenderFile Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.ImportSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.ImportElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.PermanenceSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.PermElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.BodySym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.RenderBody Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.BodyElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.BlockSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.RenderBlock Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.BlockElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.TypeSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.OOTypeSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.TypeElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.RenderType Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.InternalTypeElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.UnaryOpSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.BinaryOpSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.OpElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.ScopeSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.VariableSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.VariableElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.InternalVarElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.RenderVariable Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.ValueSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.OOValueSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.Argument Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.Literal Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.MathConstant Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.VariableValue Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.OOVariableValue Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.CommandLineArgs Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.NumericExpression Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.BooleanExpression Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.Comparison Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.ValueExpression Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.OOValueExpression Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.RenderValue Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.ValueElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.InternalValueExp Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.FunctionSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.OOFunctionSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.GetSet Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.List Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.InternalList Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.InternalGetSet Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.InternalListFunc Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.ThunkSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.ThunkAssign Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.VectorType Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.VectorDecl Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.VectorThunk Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.VectorExpression Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.RenderFunction Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.FunctionElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.InternalAssignStmt Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.InternalIOStmt Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.InternalControlStmt Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.RenderStatement Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.StatementElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.StatementSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.AssignStatement Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.DeclStatement Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.OODeclStatement Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.IOStatement Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.StringStatement Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.FuncAppStatement Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.OOFuncAppStatement Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.CommentStatement Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.ControlStatement Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.ObserverPattern Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.StrategyPattern Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.VisibilitySym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.RenderVisibility Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.VisibilityElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.MethodTypeSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.OOMethodTypeSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.ParameterSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.RenderParam Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.ParamElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceCommon.MethodSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.OOMethodSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.RenderMethod Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.OORenderMethod Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.MethodElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.StateVarSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.StateVarElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.ClassSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.RenderClass Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.ClassElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.InterfaceGOOL.ModuleSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.RenderMod Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesOO.ModuleElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentSym Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode
instance Drasil.GOOL.RendererClassesCommon.BlockCommentElim Drasil.GOOL.LanguageRenderer.CSharpRenderer.CSharpCode

module Drasil.GOOL.CodeInfo
newtype CodeInfo a
CI :: a -> CodeInfo a
[unCI] :: CodeInfo a -> a
instance GHC.Classes.Eq a => GHC.Classes.Eq (Drasil.GOOL.CodeInfo.CodeInfo a)
instance GHC.Base.Functor Drasil.GOOL.CodeInfo.CodeInfo
instance GHC.Base.Applicative Drasil.GOOL.CodeInfo.CodeInfo
instance GHC.Base.Monad Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.SharedProg Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.OOProg Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.ProgramSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.FileSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.PermanenceSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.BodySym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.BlockSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.TypeSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.OOTypeSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.TypeElim Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.ScopeSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.VariableSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.OOVariableSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.VariableElim Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.ValueSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.OOValueSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.Argument Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.Literal Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.MathConstant Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.VariableValue Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.OOVariableValue Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.CommandLineArgs Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.NumericExpression Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.BooleanExpression Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.Comparison Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.ValueExpression Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.OOValueExpression Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.InternalValueExp Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.FunctionSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.OOFunctionSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.GetSet Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.List Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.InternalList Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.ThunkSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.ThunkAssign Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.VectorType Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.VectorDecl Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.VectorThunk Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.VectorExpression Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.StatementSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.AssignStatement Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.DeclStatement Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.OODeclStatement Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.IOStatement Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.StringStatement Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.FuncAppStatement Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.OOFuncAppStatement Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.CommentStatement Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.ControlStatement Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.ObserverPattern Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.StrategyPattern Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.VisibilitySym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.ParameterSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceCommon.MethodSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.OOMethodSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.StateVarSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.ClassSym Drasil.GOOL.CodeInfo.CodeInfo
instance Drasil.GOOL.InterfaceGOOL.ModuleSym Drasil.GOOL.CodeInfo.CodeInfo


-- | re-export smart constructors for external code writing
module Drasil.GOOL
type Label = String
type GSProgram a = GS (a (Program a))
type SFile a = FS (a (File a))
type MSBody a = MS (a (Body a))
type MSBlock a = MS (a (Block a))
type VSType a = VS (a (Type a))
type SVariable a = VS (a (Variable a))
type SValue a = VS (a (Value a))
type VSFunction a = VS (a (Function a))
type MSStatement a = MS (a (Statement a))
type MSParameter a = MS (a (Parameter a))
type SMethod a = MS (a (Method a))
type CSStateVar a = CS (a (StateVar a))
type SClass a = CS (a (Class a))
type FSModule a = FS (a (Module a))
type NamedArgs r = [(SVariable r, SValue r)]
type Initializers r = [(SVariable r, SValue r)]
class (SharedProg r, ProgramSym r, OOVariableValue r, OODeclStatement r, OOFuncAppStatement r, OOValueExpression r, InternalValueExp r, GetSet r, ObserverPattern r, StrategyPattern r) => OOProg r
class (FileSym r) => ProgramSym r where {
    type Program r;
}
prog :: ProgramSym r => Label -> Label -> [SFile r] -> GSProgram r
class (ModuleSym r) => FileSym r where {
    type File r;
}
fileDoc :: FileSym r => FSModule r -> SFile r
docMod :: FileSym r => String -> [String] -> String -> SFile r -> SFile r
class PermanenceSym r where {
    type Permanence r;
}
static :: PermanenceSym r => r (Permanence r)
dynamic :: PermanenceSym r => r (Permanence r)
class (BlockSym r) => BodySym r where {
    type Body r;
}
body :: BodySym r => [MSBlock r] -> MSBody r
addComments :: BodySym r => Label -> MSBody r -> MSBody r
bodyStatements :: BodySym r => [MSStatement r] -> MSBody r
oneLiner :: BodySym r => MSStatement r -> MSBody r
class (StatementSym r) => BlockSym r where {
    type Block r;
}
block :: BlockSym r => [MSStatement r] -> MSBlock r
class TypeSym r where {
    type Type r;
}
bool :: TypeSym r => VSType r
int :: TypeSym r => VSType r
float :: TypeSym r => VSType r
double :: TypeSym r => VSType r
char :: TypeSym r => VSType r
string :: TypeSym r => VSType r
infile :: TypeSym r => VSType r
outfile :: TypeSym r => VSType r
listType :: TypeSym r => VSType r -> VSType r
arrayType :: TypeSym r => VSType r -> VSType r
listInnerType :: TypeSym r => VSType r -> VSType r
funcType :: TypeSym r => [VSType r] -> VSType r -> VSType r
void :: TypeSym r => VSType r
class (TypeSym r) => OOTypeSym r
obj :: OOTypeSym r => ClassName -> VSType r
class (TypeSym r) => TypeElim r
getType :: TypeElim r => r (Type r) -> CodeType
getTypeString :: TypeElim r => r (Type r) -> String
class ThunkSym r where {
    type Thunk (r :: Type -> Type);
}
class TypeSym r => VectorType r
vecType :: VectorType r => VSType r -> VSType r
class (VariableSym r, StatementSym r) => VectorDecl r
vecDec :: VectorDecl r => Integer -> SVariable r -> MSStatement r
vecDecDef :: VectorDecl r => SVariable r -> [SValue r] -> MSStatement r
class (VariableSym r, ThunkSym r) => VectorThunk r
vecThunk :: VectorThunk r => SVariable r -> VSThunk r
class (ThunkSym r, ValueSym r) => VectorExpression r
vecScale :: VectorExpression r => SValue r -> VSThunk r -> VSThunk r
vecAdd :: VectorExpression r => VSThunk r -> VSThunk r -> VSThunk r
vecIndex :: VectorExpression r => SValue r -> VSThunk r -> SValue r
vecDot :: VectorExpression r => VSThunk r -> VSThunk r -> VSThunk r
class (VariableSym r, ThunkSym r, StatementSym r) => ThunkAssign r
thunkAssign :: ThunkAssign r => SVariable r -> VSThunk r -> MSStatement r
class (ValueSym r) => StatementSym r where {
    type Statement r;
}
valStmt :: StatementSym r => SValue r -> MSStatement r
multi :: StatementSym r => [MSStatement r] -> MSStatement r
class (VariableSym r, StatementSym r) => AssignStatement r
(&-=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
(&+=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
(&++) :: AssignStatement r => SVariable r -> MSStatement r
(&--) :: AssignStatement r => SVariable r -> MSStatement r
assign :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
infixl 8 &++
infixl 1 &+=
infixl 1 &-=
infixl 8 &--
(&=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
infixr 1 &=
assignToListIndex :: (StatementSym r, VariableValue r, List r) => SVariable r -> SValue r -> SValue r -> MSStatement r
class (VariableSym r, StatementSym r) => DeclStatement r
varDec :: DeclStatement r => SVariable r -> MSStatement r
varDecDef :: DeclStatement r => SVariable r -> SValue r -> MSStatement r
listDec :: DeclStatement r => Integer -> SVariable r -> MSStatement r
listDecDef :: DeclStatement r => SVariable r -> [SValue r] -> MSStatement r
arrayDec :: DeclStatement r => Integer -> SVariable r -> MSStatement r
arrayDecDef :: DeclStatement r => SVariable r -> [SValue r] -> MSStatement r
constDecDef :: DeclStatement r => SVariable r -> SValue r -> MSStatement r
funcDecDef :: DeclStatement r => SVariable r -> [SVariable r] -> MSBody r -> MSStatement r
class (DeclStatement r, OOVariableSym r) => OODeclStatement r
objDecDef :: OODeclStatement r => SVariable r -> SValue r -> MSStatement r
objDecNew :: OODeclStatement r => SVariable r -> [SValue r] -> MSStatement r
extObjDecNew :: OODeclStatement r => Library -> SVariable r -> [SValue r] -> MSStatement r
objDecNewNoParams :: OODeclStatement r => SVariable r -> MSStatement r
extObjDecNewNoParams :: OODeclStatement r => Library -> SVariable r -> MSStatement r
class (VariableSym r, StatementSym r) => IOStatement r
print :: IOStatement r => SValue r -> MSStatement r
printLn :: IOStatement r => SValue r -> MSStatement r
printStr :: IOStatement r => String -> MSStatement r
printStrLn :: IOStatement r => String -> MSStatement r
printFile :: IOStatement r => SValue r -> SValue r -> MSStatement r
printFileLn :: IOStatement r => SValue r -> SValue r -> MSStatement r
printFileStr :: IOStatement r => SValue r -> String -> MSStatement r
printFileStrLn :: IOStatement r => SValue r -> String -> MSStatement r
getInput :: IOStatement r => SVariable r -> MSStatement r
discardInput :: IOStatement r => MSStatement r
getFileInput :: IOStatement r => SValue r -> SVariable r -> MSStatement r
discardFileInput :: IOStatement r => SValue r -> MSStatement r
openFileR :: IOStatement r => SVariable r -> SValue r -> MSStatement r
openFileW :: IOStatement r => SVariable r -> SValue r -> MSStatement r
openFileA :: IOStatement r => SVariable r -> SValue r -> MSStatement r
closeFile :: IOStatement r => SValue r -> MSStatement r
getFileInputLine :: IOStatement r => SValue r -> SVariable r -> MSStatement r
discardFileLine :: IOStatement r => SValue r -> MSStatement r
getFileInputAll :: IOStatement r => SValue r -> SVariable r -> MSStatement r
class (VariableSym r, StatementSym r) => StringStatement r
stringSplit :: StringStatement r => Char -> SVariable r -> SValue r -> MSStatement r
stringListVals :: StringStatement r => [SVariable r] -> SValue r -> MSStatement r
stringListLists :: StringStatement r => [SVariable r] -> SValue r -> MSStatement r
class (VariableSym r, StatementSym r) => FuncAppStatement r
inOutCall :: FuncAppStatement r => InOutCall r
extInOutCall :: FuncAppStatement r => Library -> InOutCall r
class (FuncAppStatement r, OOVariableSym r) => OOFuncAppStatement r
selfInOutCall :: OOFuncAppStatement r => InOutCall r
class (StatementSym r) => CommentStatement r
comment :: CommentStatement r => Comment -> MSStatement r
initObserverList :: DeclStatement r => VSType r -> [SValue r] -> r (Scope r) -> MSStatement r
addObserver :: (StatementSym r, OOVariableValue r, List r) => SValue r -> r (Scope r) -> MSStatement r
class (BodySym r, VariableSym r) => ControlStatement r
break :: ControlStatement r => MSStatement r
continue :: ControlStatement r => MSStatement r
returnStmt :: ControlStatement r => SValue r -> MSStatement r
throw :: ControlStatement r => Label -> MSStatement r

-- | String of if-else statements. Arguments: List of predicates and bodies
--   (if this then that), Body for else branch
ifCond :: ControlStatement r => [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
switch :: ControlStatement r => SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
ifExists :: ControlStatement r => SValue r -> MSBody r -> MSBody r -> MSStatement r
for :: ControlStatement r => MSStatement r -> SValue r -> MSStatement r -> MSBody r -> MSStatement r
forRange :: ControlStatement r => SVariable r -> SValue r -> SValue r -> SValue r -> MSBody r -> MSStatement r
forEach :: ControlStatement r => SVariable r -> SValue r -> MSBody r -> MSStatement r
while :: ControlStatement r => SValue r -> MSBody r -> MSStatement r
tryCatch :: ControlStatement r => MSBody r -> MSBody r -> MSStatement r
ifNoElse :: ControlStatement r => [(SValue r, MSBody r)] -> MSStatement r
switchAsIf :: (ControlStatement r, Comparison r) => SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
class (TypeSym r, ScopeSym r) => VariableSym r where {
    type Variable r;
}
var' :: VariableSym r => Label -> r (Scope r) -> VSType r -> SVariable r
constant' :: VariableSym r => Label -> r (Scope r) -> VSType r -> SVariable r
extVar :: VariableSym r => Library -> Label -> VSType r -> SVariable r
arrayElem :: VariableSym r => Integer -> SVariable r -> SVariable r

-- | Smart constructor to rearrange the parameters of var'
var :: VariableSym r => Label -> VSType r -> r (Scope r) -> SVariable r

-- | Smart constructor to rearrange the parameters of constant'
constant :: VariableSym r => Label -> VSType r -> r (Scope r) -> SVariable r

-- | Smart constructor for a local variable.
locVar :: VariableSym r => Label -> VSType r -> SVariable r

-- | Smart constructor for a variable in the main function.
mainVar :: VariableSym r => Label -> VSType r -> SVariable r
class ScopeSym r where {
    type Scope r;
}
global :: ScopeSym r => r (Scope r)
mainFn :: ScopeSym r => r (Scope r)
local :: ScopeSym r => r (Scope r)
class (VariableSym r, OOTypeSym r) => OOVariableSym r
staticVar :: OOVariableSym r => Label -> VSType r -> SVariable r
self :: OOVariableSym r => SVariable r
classVar :: OOVariableSym r => VSType r -> SVariable r -> SVariable r
extClassVar :: OOVariableSym r => VSType r -> SVariable r -> SVariable r
objVar :: OOVariableSym r => SVariable r -> SVariable r -> SVariable r
objVarSelf :: OOVariableSym r => SVariable r -> SVariable r
class (VariableSym r) => VariableElim r
variableName :: VariableElim r => r (Variable r) -> String
variableType :: VariableElim r => r (Variable r) -> r (Type r)
($->) :: OOVariableSym r => SVariable r -> SVariable r -> SVariable r
infixl 9 $->
listOf :: VariableSym r => Label -> VSType r -> r (Scope r) -> SVariable r
listVar :: VariableSym r => Label -> VSType r -> r (Scope r) -> SVariable r
class (TypeSym r) => ValueSym r where {
    type Value r;
}
valueType :: ValueSym r => r (Value r) -> r (Type r)
class (ValueSym r) => Argument r
pointerArg :: Argument r => SValue r -> SValue r
class (ValueSym r) => Literal r
litTrue :: Literal r => SValue r
litFalse :: Literal r => SValue r
litChar :: Literal r => Char -> SValue r
litDouble :: Literal r => Double -> SValue r
litFloat :: Literal r => Float -> SValue r
litInt :: Literal r => Integer -> SValue r
litString :: Literal r => String -> SValue r
litArray :: Literal r => VSType r -> [SValue r] -> SValue r
litList :: Literal r => VSType r -> [SValue r] -> SValue r
class (ValueSym r) => MathConstant r
pi :: MathConstant r => SValue r
class (VariableSym r, ValueSym r) => VariableValue r
valueOf :: VariableValue r => SVariable r -> SValue r
class (VariableValue r, OOVariableSym r) => OOVariableValue r
class (ValueSym r) => CommandLineArgs r
arg :: CommandLineArgs r => Integer -> SValue r
argsList :: CommandLineArgs r => SValue r
argExists :: CommandLineArgs r => Integer -> SValue r
class (ValueSym r) => NumericExpression r
(#~) :: NumericExpression r => SValue r -> SValue r
(#/^) :: NumericExpression r => SValue r -> SValue r
(#|) :: NumericExpression r => SValue r -> SValue r
(#+) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#-) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#*) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#/) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#%) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#^) :: NumericExpression r => SValue r -> SValue r -> SValue r
log :: NumericExpression r => SValue r -> SValue r
ln :: NumericExpression r => SValue r -> SValue r
exp :: NumericExpression r => SValue r -> SValue r
sin :: NumericExpression r => SValue r -> SValue r
cos :: NumericExpression r => SValue r -> SValue r
tan :: NumericExpression r => SValue r -> SValue r
csc :: NumericExpression r => SValue r -> SValue r
sec :: NumericExpression r => SValue r -> SValue r
cot :: NumericExpression r => SValue r -> SValue r
arcsin :: NumericExpression r => SValue r -> SValue r
arccos :: NumericExpression r => SValue r -> SValue r
arctan :: NumericExpression r => SValue r -> SValue r
floor :: NumericExpression r => SValue r -> SValue r
ceil :: NumericExpression r => SValue r -> SValue r
infixl 5 #+
infixl 5 #-
infixl 6 #/
infixl 6 #*
infixl 8 #~
infixl 7 #/^
infixl 7 #|
infixl 6 #%
infixl 7 #^
class (ValueSym r) => BooleanExpression r
(?!) :: BooleanExpression r => SValue r -> SValue r
(?&&) :: BooleanExpression r => SValue r -> SValue r -> SValue r
(?||) :: BooleanExpression r => SValue r -> SValue r -> SValue r
infixl 2 ?&&
infixl 1 ?||
infixr 6 ?!
class (ValueSym r) => Comparison r
(?<) :: Comparison r => SValue r -> SValue r -> SValue r
(?<=) :: Comparison r => SValue r -> SValue r -> SValue r
(?>) :: Comparison r => SValue r -> SValue r -> SValue r
(?>=) :: Comparison r => SValue r -> SValue r -> SValue r
(?==) :: Comparison r => SValue r -> SValue r -> SValue r
(?!=) :: Comparison r => SValue r -> SValue r -> SValue r
infixl 4 ?<
infixl 4 ?<=
infixl 4 ?>
infixl 4 ?>=
infixl 3 ?==
infixl 3 ?!=
class (VariableSym r, ValueSym r) => ValueExpression r
inlineIf :: ValueExpression r => SValue r -> SValue r -> SValue r -> SValue r
funcAppMixedArgs :: ValueExpression r => MixedCall r
extFuncAppMixedArgs :: ValueExpression r => Library -> MixedCall r
libFuncAppMixedArgs :: ValueExpression r => Library -> MixedCall r
lambda :: ValueExpression r => [SVariable r] -> SValue r -> SValue r
notNull :: ValueExpression r => SValue r -> SValue r
class (ValueExpression r, OOVariableSym r, OOValueSym r) => OOValueExpression r
selfFuncAppMixedArgs :: OOValueExpression r => MixedCall r
newObjMixedArgs :: OOValueExpression r => MixedCtorCall r
extNewObjMixedArgs :: OOValueExpression r => Library -> MixedCtorCall r
libNewObjMixedArgs :: OOValueExpression r => Library -> MixedCtorCall r
funcApp :: ValueExpression r => PosCall r
funcAppNamedArgs :: ValueExpression r => Label -> VSType r -> NamedArgs r -> SValue r
selfFuncApp :: OOValueExpression r => PosCall r
extFuncApp :: ValueExpression r => Library -> PosCall r
libFuncApp :: ValueExpression r => Library -> PosCall r
newObj :: OOValueExpression r => PosCtorCall r
extNewObj :: OOValueExpression r => Library -> PosCtorCall r
libNewObj :: OOValueExpression r => Library -> PosCtorCall r
exists :: ValueExpression r => SValue r -> SValue r

-- | Calling a method. t is the return type of the method, o is the object,
--   f is the method name, and ps is a list of positional arguments.
objMethodCall :: InternalValueExp r => VSType r -> SValue r -> Label -> [SValue r] -> SValue r

-- | Calling a method with named arguments.
objMethodCallNamedArgs :: InternalValueExp r => VSType r -> SValue r -> Label -> NamedArgs r -> SValue r

-- | Calling a method with a mix of positional and named arguments.
objMethodCallMixedArgs :: InternalValueExp r => VSType r -> SValue r -> Label -> [SValue r] -> NamedArgs r -> SValue r

-- | Calling a method with no parameters.
objMethodCallNoParams :: InternalValueExp r => VSType r -> SValue r -> Label -> SValue r
class (ValueSym r) => FunctionSym r where {
    type Function r;
}
class (FunctionSym r) => OOFunctionSym r
func :: OOFunctionSym r => Label -> VSType r -> [SValue r] -> VSFunction r
objAccess :: OOFunctionSym r => SValue r -> VSFunction r -> SValue r
($.) :: OOFunctionSym r => SValue r -> VSFunction r -> SValue r
infixl 9 $.
selfAccess :: (OOVariableValue r, OOFunctionSym r) => VSFunction r -> SValue r
class (ValueSym r, VariableSym r) => GetSet r
get :: GetSet r => SValue r -> SVariable r -> SValue r
set :: GetSet r => SValue r -> SVariable r -> SValue r -> SValue r
class (ValueSym r) => List r

-- | Does any necessary conversions from GOOL's zero-indexed assumptions to
--   the target language's assumptions
intToIndex :: List r => SValue r -> SValue r

-- | Does any necessary conversions from the target language's indexing
--   assumptions assumptions to GOOL's zero-indexed assumptions
indexToInt :: List r => SValue r -> SValue r

-- | Finds the size of a list. Arguments are: List
listSize :: List r => SValue r -> SValue r

-- | Inserts a value into a list. Arguments are: List, Index, Value
listAdd :: List r => SValue r -> SValue r -> SValue r -> SValue r

-- | Appens a value to a list. Arguments are: List, Value
listAppend :: List r => SValue r -> SValue r -> SValue r

-- | Gets the value of an index of a list. Arguments are: List, Index
listAccess :: List r => SValue r -> SValue r -> SValue r

-- | Sets the value of an index of a list. Arguments are: List, Index,
--   Value
listSet :: List r => SValue r -> SValue r -> SValue r -> SValue r

-- | Finds the index of the first occurrence of a value in a list.
--   Arguments are: List, Value
indexOf :: List r => SValue r -> SValue r -> SValue r

-- | Creates a slice of a list and assigns it to a variable. Arguments are:
--   Variable to assign List to read from [Start index] inclusive. (if
--   Nothing, then list start if step &gt; 0, list end if step &lt; 0) [End
--   index] exclusive. (if Nothing, then list end if step &gt; 0, list
--   start if step &gt; 0) [Step] (if Nothing, then defaults to 1)
listSlice :: InternalList r => SVariable r -> SValue r -> Maybe (SValue r) -> Maybe (SValue r) -> Maybe (SValue r) -> MSBlock r
listIndexExists :: (List r, Comparison r) => SValue r -> SValue r -> SValue r
at :: List r => SValue r -> SValue r -> SValue r
class (StatementSym r, OOFunctionSym r) => ObserverPattern r
notifyObservers :: ObserverPattern r => VSFunction r -> VSType r -> r (Scope r) -> MSStatement r
class (BodySym r, VariableSym r) => StrategyPattern r
runStrategy :: StrategyPattern r => Label -> [(Label, MSBody r)] -> Maybe (SValue r) -> Maybe (SVariable r) -> MSBlock r
class VisibilitySym r where {
    type Visibility r;
}
private :: VisibilitySym r => r (Visibility r)
public :: VisibilitySym r => r (Visibility r)
class (VariableSym r) => ParameterSym r where {
    type Parameter r;
}
param :: ParameterSym r => SVariable r -> MSParameter r
pointerParam :: ParameterSym r => SVariable r -> MSParameter r
class (BodySym r, ParameterSym r, VisibilitySym r) => MethodSym r where {
    type Method r;
}
docMain :: MethodSym r => MSBody r -> SMethod r
function :: MethodSym r => Label -> r (Visibility r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
mainFunction :: MethodSym r => MSBody r -> SMethod r
docFunc :: MethodSym r => String -> [String] -> Maybe String -> SMethod r -> SMethod r
inOutFunc :: MethodSym r => Label -> r (Visibility r) -> InOutFunc r
docInOutFunc :: MethodSym r => Label -> r (Visibility r) -> DocInOutFunc r
class (MethodSym r, PermanenceSym r) => OOMethodSym r
method :: OOMethodSym r => Label -> r (Visibility r) -> r (Permanence r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
getMethod :: OOMethodSym r => SVariable r -> SMethod r
setMethod :: OOMethodSym r => SVariable r -> SMethod r
constructor :: OOMethodSym r => [MSParameter r] -> Initializers r -> MSBody r -> SMethod r
inOutMethod :: OOMethodSym r => Label -> r (Visibility r) -> r (Permanence r) -> InOutFunc r
docInOutMethod :: OOMethodSym r => Label -> r (Visibility r) -> r (Permanence r) -> DocInOutFunc r
privMethod :: OOMethodSym r => Label -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
pubMethod :: OOMethodSym r => Label -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
initializer :: OOMethodSym r => [MSParameter r] -> Initializers r -> SMethod r
nonInitConstructor :: OOMethodSym r => [MSParameter r] -> MSBody r -> SMethod r
class (VisibilitySym r, PermanenceSym r, VariableSym r) => StateVarSym r where {
    type StateVar r;
}
stateVar :: StateVarSym r => r (Visibility r) -> r (Permanence r) -> SVariable r -> CSStateVar r
stateVarDef :: StateVarSym r => r (Visibility r) -> r (Permanence r) -> SVariable r -> SValue r -> CSStateVar r
constVar :: StateVarSym r => r (Visibility r) -> SVariable r -> SValue r -> CSStateVar r
privDVar :: StateVarSym r => SVariable r -> CSStateVar r
pubDVar :: StateVarSym r => SVariable r -> CSStateVar r
pubSVar :: StateVarSym r => SVariable r -> CSStateVar r
class (OOMethodSym r, StateVarSym r) => ClassSym r where {
    type Class r;
}

-- | Main external method for creating a class. Inputs: parent class,
--   variables, constructor(s), methods
buildClass :: ClassSym r => Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r

-- | Creates an extra class. Inputs: class name, the rest are the same as
--   buildClass.
extraClass :: ClassSym r => Label -> Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r

-- | Creates a class implementing interfaces. Inputs: class name, interface
--   names, variables, constructor(s), methods
implementingClass :: ClassSym r => Label -> [Label] -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
docClass :: ClassSym r => String -> SClass r -> SClass r
class (ClassSym r) => ModuleSym r where {
    type Module r;
}
buildModule :: ModuleSym r => Label -> [Label] -> [SMethod r] -> [SClass r] -> FSModule r
convType :: TypeSym r => CodeType -> VSType r
convTypeOO :: OOTypeSym r => CodeType -> VSType r
data ProgData
data FileData
data ModData
data VisibilityTag
Pub :: VisibilityTag
Priv :: VisibilityTag
data CodeType
Boolean :: CodeType
Integer :: CodeType
Float :: CodeType
Double :: CodeType
Char :: CodeType
String :: CodeType
InFile :: CodeType
OutFile :: CodeType
List :: CodeType -> CodeType
Array :: CodeType -> CodeType
Object :: ClassName -> CodeType
Func :: [CodeType] -> CodeType -> CodeType
Void :: CodeType
data GOOLState
GS :: [FilePath] -> [FilePath] -> Maybe FilePath -> Map String ClassName -> Map QualifiedName [ExceptionType] -> Map QualifiedName [QualifiedName] -> Bool -> Bool -> GOOLState
[_headers] :: GOOLState -> [FilePath]
[_sources] :: GOOLState -> [FilePath]
[_mainMod] :: GOOLState -> Maybe FilePath
[_classMap] :: GOOLState -> Map String ClassName
[_methodExceptionMap] :: GOOLState -> Map QualifiedName [ExceptionType]
[_callMap] :: GOOLState -> Map QualifiedName [QualifiedName]
[_throwUsed] :: GOOLState -> Bool
[_errorDefined] :: GOOLState -> Bool
lensMStoVS :: Lens' MethodState ValueState
headers :: Lens' GOOLState [FilePath]
sources :: Lens' GOOLState [FilePath]
mainMod :: Lens' GOOLState (Maybe FilePath)
initialState :: GOOLState
onStateValue :: (a -> b) -> State s a -> State s b
onCodeList :: Monad m => ([a] -> b) -> [m a] -> m b
unCI :: CodeInfo a -> a
unPC :: PythonCode a -> a
unJC :: JavaCode a -> a
unCSC :: CSharpCode a -> a
unCPPC :: CppCode CppSrcCode CppHdrCode a -> a
unSC :: SwiftCode a -> a
unJLC :: JuliaCode a -> a
pyName :: String
pyVersion :: String
jName :: String
jVersion :: String
csName :: String
csVersion :: String
cppName :: String
cppVersion :: String
swiftName :: String
swiftVersion :: String
jlName :: String
jlVersion :: String


-- | re-export smart constructors for external code writing
module Drasil.GProc
type Label = String
type GSProgram a = GS (a (Program a))
type SFile a = FS (a (File a))
type MSBody a = MS (a (Body a))
type MSBlock a = MS (a (Block a))
type VSType a = VS (a (Type a))
type SVariable a = VS (a (Variable a))
type SValue a = VS (a (Value a))
type MSStatement a = MS (a (Statement a))
type MSParameter a = MS (a (Parameter a))
type SMethod a = MS (a (Method a))
type FSModule a = FS (a (Module a))
type NamedArgs r = [(SVariable r, SValue r)]
class (SharedProg r, ProgramSym r) => ProcProg r
class (FileSym r) => ProgramSym r where {
    type Program r;
}
prog :: ProgramSym r => Label -> Label -> [SFile r] -> GSProgram r
class (ModuleSym r) => FileSym r where {
    type File r;
}
fileDoc :: FileSym r => FSModule r -> SFile r
docMod :: FileSym r => String -> [String] -> String -> SFile r -> SFile r
class (BlockSym r) => BodySym r where {
    type Body r;
}
body :: BodySym r => [MSBlock r] -> MSBody r
addComments :: BodySym r => Label -> MSBody r -> MSBody r
bodyStatements :: BodySym r => [MSStatement r] -> MSBody r
oneLiner :: BodySym r => MSStatement r -> MSBody r
class (StatementSym r) => BlockSym r where {
    type Block r;
}
block :: BlockSym r => [MSStatement r] -> MSBlock r
class TypeSym r where {
    type Type r;
}
bool :: TypeSym r => VSType r
int :: TypeSym r => VSType r
float :: TypeSym r => VSType r
double :: TypeSym r => VSType r
char :: TypeSym r => VSType r
string :: TypeSym r => VSType r
infile :: TypeSym r => VSType r
outfile :: TypeSym r => VSType r
listType :: TypeSym r => VSType r -> VSType r
arrayType :: TypeSym r => VSType r -> VSType r
listInnerType :: TypeSym r => VSType r -> VSType r
funcType :: TypeSym r => [VSType r] -> VSType r -> VSType r
void :: TypeSym r => VSType r
class (TypeSym r) => TypeElim r
getType :: TypeElim r => r (Type r) -> CodeType
getTypeString :: TypeElim r => r (Type r) -> String
class ThunkSym r where {
    type Thunk (r :: Type -> Type);
}
class TypeSym r => VectorType r
vecType :: VectorType r => VSType r -> VSType r
class (VariableSym r, StatementSym r) => VectorDecl r
vecDec :: VectorDecl r => Integer -> SVariable r -> MSStatement r
vecDecDef :: VectorDecl r => SVariable r -> [SValue r] -> MSStatement r
class (VariableSym r, ThunkSym r) => VectorThunk r
vecThunk :: VectorThunk r => SVariable r -> VSThunk r
class (ThunkSym r, ValueSym r) => VectorExpression r
vecScale :: VectorExpression r => SValue r -> VSThunk r -> VSThunk r
vecAdd :: VectorExpression r => VSThunk r -> VSThunk r -> VSThunk r
vecIndex :: VectorExpression r => SValue r -> VSThunk r -> SValue r
vecDot :: VectorExpression r => VSThunk r -> VSThunk r -> VSThunk r
class (VariableSym r, ThunkSym r, StatementSym r) => ThunkAssign r
thunkAssign :: ThunkAssign r => SVariable r -> VSThunk r -> MSStatement r
class (ValueSym r) => StatementSym r where {
    type Statement r;
}
valStmt :: StatementSym r => SValue r -> MSStatement r
multi :: StatementSym r => [MSStatement r] -> MSStatement r
class (VariableSym r, StatementSym r) => AssignStatement r
(&-=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
(&+=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
(&++) :: AssignStatement r => SVariable r -> MSStatement r
(&--) :: AssignStatement r => SVariable r -> MSStatement r
assign :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
infixl 8 &++
infixl 1 &+=
infixl 1 &-=
infixl 8 &--
(&=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
infixr 1 &=
assignToListIndex :: (StatementSym r, VariableValue r, List r) => SVariable r -> SValue r -> SValue r -> MSStatement r
class (VariableSym r, StatementSym r) => DeclStatement r
varDec :: DeclStatement r => SVariable r -> MSStatement r
varDecDef :: DeclStatement r => SVariable r -> SValue r -> MSStatement r
listDec :: DeclStatement r => Integer -> SVariable r -> MSStatement r
listDecDef :: DeclStatement r => SVariable r -> [SValue r] -> MSStatement r
arrayDec :: DeclStatement r => Integer -> SVariable r -> MSStatement r
arrayDecDef :: DeclStatement r => SVariable r -> [SValue r] -> MSStatement r
constDecDef :: DeclStatement r => SVariable r -> SValue r -> MSStatement r
funcDecDef :: DeclStatement r => SVariable r -> [SVariable r] -> MSBody r -> MSStatement r
class (VariableSym r, StatementSym r) => IOStatement r
print :: IOStatement r => SValue r -> MSStatement r
printLn :: IOStatement r => SValue r -> MSStatement r
printStr :: IOStatement r => String -> MSStatement r
printStrLn :: IOStatement r => String -> MSStatement r
printFile :: IOStatement r => SValue r -> SValue r -> MSStatement r
printFileLn :: IOStatement r => SValue r -> SValue r -> MSStatement r
printFileStr :: IOStatement r => SValue r -> String -> MSStatement r
printFileStrLn :: IOStatement r => SValue r -> String -> MSStatement r
getInput :: IOStatement r => SVariable r -> MSStatement r
discardInput :: IOStatement r => MSStatement r
getFileInput :: IOStatement r => SValue r -> SVariable r -> MSStatement r
discardFileInput :: IOStatement r => SValue r -> MSStatement r
openFileR :: IOStatement r => SVariable r -> SValue r -> MSStatement r
openFileW :: IOStatement r => SVariable r -> SValue r -> MSStatement r
openFileA :: IOStatement r => SVariable r -> SValue r -> MSStatement r
closeFile :: IOStatement r => SValue r -> MSStatement r
getFileInputLine :: IOStatement r => SValue r -> SVariable r -> MSStatement r
discardFileLine :: IOStatement r => SValue r -> MSStatement r
getFileInputAll :: IOStatement r => SValue r -> SVariable r -> MSStatement r
class (VariableSym r, StatementSym r) => StringStatement r
stringSplit :: StringStatement r => Char -> SVariable r -> SValue r -> MSStatement r
stringListVals :: StringStatement r => [SVariable r] -> SValue r -> MSStatement r
stringListLists :: StringStatement r => [SVariable r] -> SValue r -> MSStatement r
class (VariableSym r, StatementSym r) => FuncAppStatement r
inOutCall :: FuncAppStatement r => InOutCall r
extInOutCall :: FuncAppStatement r => Library -> InOutCall r
class (StatementSym r) => CommentStatement r
comment :: CommentStatement r => Comment -> MSStatement r
class (BodySym r, VariableSym r) => ControlStatement r
break :: ControlStatement r => MSStatement r
continue :: ControlStatement r => MSStatement r
returnStmt :: ControlStatement r => SValue r -> MSStatement r
throw :: ControlStatement r => Label -> MSStatement r

-- | String of if-else statements. Arguments: List of predicates and bodies
--   (if this then that), Body for else branch
ifCond :: ControlStatement r => [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
switch :: ControlStatement r => SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
ifExists :: ControlStatement r => SValue r -> MSBody r -> MSBody r -> MSStatement r
for :: ControlStatement r => MSStatement r -> SValue r -> MSStatement r -> MSBody r -> MSStatement r
forRange :: ControlStatement r => SVariable r -> SValue r -> SValue r -> SValue r -> MSBody r -> MSStatement r
forEach :: ControlStatement r => SVariable r -> SValue r -> MSBody r -> MSStatement r
while :: ControlStatement r => SValue r -> MSBody r -> MSStatement r
tryCatch :: ControlStatement r => MSBody r -> MSBody r -> MSStatement r
ifNoElse :: ControlStatement r => [(SValue r, MSBody r)] -> MSStatement r
switchAsIf :: (ControlStatement r, Comparison r) => SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
class (TypeSym r, ScopeSym r) => VariableSym r where {
    type Variable r;
}
var' :: VariableSym r => Label -> r (Scope r) -> VSType r -> SVariable r
constant' :: VariableSym r => Label -> r (Scope r) -> VSType r -> SVariable r
extVar :: VariableSym r => Library -> Label -> VSType r -> SVariable r
arrayElem :: VariableSym r => Integer -> SVariable r -> SVariable r
class (VariableSym r) => VariableElim r
variableName :: VariableElim r => r (Variable r) -> String
variableType :: VariableElim r => r (Variable r) -> r (Type r)
listOf :: VariableSym r => Label -> VSType r -> r (Scope r) -> SVariable r
listVar :: VariableSym r => Label -> VSType r -> r (Scope r) -> SVariable r
class (TypeSym r) => ValueSym r where {
    type Value r;
}
valueType :: ValueSym r => r (Value r) -> r (Type r)
class (ValueSym r) => Argument r
pointerArg :: Argument r => SValue r -> SValue r
class (ValueSym r) => Literal r
litTrue :: Literal r => SValue r
litFalse :: Literal r => SValue r
litChar :: Literal r => Char -> SValue r
litDouble :: Literal r => Double -> SValue r
litFloat :: Literal r => Float -> SValue r
litInt :: Literal r => Integer -> SValue r
litString :: Literal r => String -> SValue r
litArray :: Literal r => VSType r -> [SValue r] -> SValue r
litList :: Literal r => VSType r -> [SValue r] -> SValue r
class (ValueSym r) => MathConstant r
pi :: MathConstant r => SValue r
class (VariableSym r, ValueSym r) => VariableValue r
valueOf :: VariableValue r => SVariable r -> SValue r
class (ValueSym r) => CommandLineArgs r
arg :: CommandLineArgs r => Integer -> SValue r
argsList :: CommandLineArgs r => SValue r
argExists :: CommandLineArgs r => Integer -> SValue r
class (ValueSym r) => NumericExpression r
(#~) :: NumericExpression r => SValue r -> SValue r
(#/^) :: NumericExpression r => SValue r -> SValue r
(#|) :: NumericExpression r => SValue r -> SValue r
(#+) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#-) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#*) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#/) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#%) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#^) :: NumericExpression r => SValue r -> SValue r -> SValue r
log :: NumericExpression r => SValue r -> SValue r
ln :: NumericExpression r => SValue r -> SValue r
exp :: NumericExpression r => SValue r -> SValue r
sin :: NumericExpression r => SValue r -> SValue r
cos :: NumericExpression r => SValue r -> SValue r
tan :: NumericExpression r => SValue r -> SValue r
csc :: NumericExpression r => SValue r -> SValue r
sec :: NumericExpression r => SValue r -> SValue r
cot :: NumericExpression r => SValue r -> SValue r
arcsin :: NumericExpression r => SValue r -> SValue r
arccos :: NumericExpression r => SValue r -> SValue r
arctan :: NumericExpression r => SValue r -> SValue r
floor :: NumericExpression r => SValue r -> SValue r
ceil :: NumericExpression r => SValue r -> SValue r
infixl 5 #+
infixl 5 #-
infixl 6 #/
infixl 6 #*
infixl 8 #~
infixl 7 #/^
infixl 7 #|
infixl 6 #%
infixl 7 #^
class (ValueSym r) => BooleanExpression r
(?!) :: BooleanExpression r => SValue r -> SValue r
(?&&) :: BooleanExpression r => SValue r -> SValue r -> SValue r
(?||) :: BooleanExpression r => SValue r -> SValue r -> SValue r
infixl 2 ?&&
infixl 1 ?||
infixr 6 ?!
class (ValueSym r) => Comparison r
(?<) :: Comparison r => SValue r -> SValue r -> SValue r
(?<=) :: Comparison r => SValue r -> SValue r -> SValue r
(?>) :: Comparison r => SValue r -> SValue r -> SValue r
(?>=) :: Comparison r => SValue r -> SValue r -> SValue r
(?==) :: Comparison r => SValue r -> SValue r -> SValue r
(?!=) :: Comparison r => SValue r -> SValue r -> SValue r
infixl 4 ?<
infixl 4 ?<=
infixl 4 ?>
infixl 4 ?>=
infixl 3 ?==
infixl 3 ?!=
class (VariableSym r, ValueSym r) => ValueExpression r
inlineIf :: ValueExpression r => SValue r -> SValue r -> SValue r -> SValue r
funcAppMixedArgs :: ValueExpression r => MixedCall r
extFuncAppMixedArgs :: ValueExpression r => Library -> MixedCall r
libFuncAppMixedArgs :: ValueExpression r => Library -> MixedCall r
lambda :: ValueExpression r => [SVariable r] -> SValue r -> SValue r
notNull :: ValueExpression r => SValue r -> SValue r
funcApp :: ValueExpression r => PosCall r
funcAppNamedArgs :: ValueExpression r => Label -> VSType r -> NamedArgs r -> SValue r
extFuncApp :: ValueExpression r => Library -> PosCall r
libFuncApp :: ValueExpression r => Library -> PosCall r
exists :: ValueExpression r => SValue r -> SValue r
class (ValueSym r) => List r

-- | Does any necessary conversions from GOOL's zero-indexed assumptions to
--   the target language's assumptions
intToIndex :: List r => SValue r -> SValue r

-- | Does any necessary conversions from the target language's indexing
--   assumptions assumptions to GOOL's zero-indexed assumptions
indexToInt :: List r => SValue r -> SValue r

-- | Finds the size of a list. Arguments are: List
listSize :: List r => SValue r -> SValue r

-- | Inserts a value into a list. Arguments are: List, Index, Value
listAdd :: List r => SValue r -> SValue r -> SValue r -> SValue r

-- | Appens a value to a list. Arguments are: List, Value
listAppend :: List r => SValue r -> SValue r -> SValue r

-- | Gets the value of an index of a list. Arguments are: List, Index
listAccess :: List r => SValue r -> SValue r -> SValue r

-- | Sets the value of an index of a list. Arguments are: List, Index,
--   Value
listSet :: List r => SValue r -> SValue r -> SValue r -> SValue r

-- | Finds the index of the first occurrence of a value in a list.
--   Arguments are: List, Value
indexOf :: List r => SValue r -> SValue r -> SValue r

-- | Creates a slice of a list and assigns it to a variable. Arguments are:
--   Variable to assign List to read from [Start index] inclusive. (if
--   Nothing, then list start if step &gt; 0, list end if step &lt; 0) [End
--   index] exclusive. (if Nothing, then list end if step &gt; 0, list
--   start if step &gt; 0) [Step] (if Nothing, then defaults to 1)
listSlice :: InternalList r => SVariable r -> SValue r -> Maybe (SValue r) -> Maybe (SValue r) -> Maybe (SValue r) -> MSBlock r
listIndexExists :: (List r, Comparison r) => SValue r -> SValue r -> SValue r
at :: List r => SValue r -> SValue r -> SValue r
class ScopeSym r where {
    type Scope r;
}
global :: ScopeSym r => r (Scope r)
mainFn :: ScopeSym r => r (Scope r)
local :: ScopeSym r => r (Scope r)
class (VariableSym r) => ParameterSym r where {
    type Parameter r;
}
param :: ParameterSym r => SVariable r -> MSParameter r
pointerParam :: ParameterSym r => SVariable r -> MSParameter r
class (BodySym r, ParameterSym r, VisibilitySym r) => MethodSym r where {
    type Method r;
}
docMain :: MethodSym r => MSBody r -> SMethod r
function :: MethodSym r => Label -> r (Visibility r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
mainFunction :: MethodSym r => MSBody r -> SMethod r
docFunc :: MethodSym r => String -> [String] -> Maybe String -> SMethod r -> SMethod r
inOutFunc :: MethodSym r => Label -> r (Visibility r) -> InOutFunc r
docInOutFunc :: MethodSym r => Label -> r (Visibility r) -> DocInOutFunc r
class (MethodSym r) => ModuleSym r where {
    type Module r;
}
buildModule :: ModuleSym r => Label -> [Label] -> [SMethod r] -> FSModule r
convType :: TypeSym r => CodeType -> VSType r
data ProgData
data FileData
data ModData
data VisibilityTag
Pub :: VisibilityTag
Priv :: VisibilityTag
data CodeType
Boolean :: CodeType
Integer :: CodeType
Float :: CodeType
Double :: CodeType
Char :: CodeType
String :: CodeType
InFile :: CodeType
OutFile :: CodeType
List :: CodeType -> CodeType
Array :: CodeType -> CodeType
Object :: ClassName -> CodeType
Func :: [CodeType] -> CodeType -> CodeType
Void :: CodeType
data GOOLState
GS :: [FilePath] -> [FilePath] -> Maybe FilePath -> Map String ClassName -> Map QualifiedName [ExceptionType] -> Map QualifiedName [QualifiedName] -> Bool -> Bool -> GOOLState
[_headers] :: GOOLState -> [FilePath]
[_sources] :: GOOLState -> [FilePath]
[_mainMod] :: GOOLState -> Maybe FilePath
[_classMap] :: GOOLState -> Map String ClassName
[_methodExceptionMap] :: GOOLState -> Map QualifiedName [ExceptionType]
[_callMap] :: GOOLState -> Map QualifiedName [QualifiedName]
[_throwUsed] :: GOOLState -> Bool
[_errorDefined] :: GOOLState -> Bool
lensMStoVS :: Lens' MethodState ValueState
headers :: Lens' GOOLState [FilePath]
sources :: Lens' GOOLState [FilePath]
mainMod :: Lens' GOOLState (Maybe FilePath)
initialState :: GOOLState
onStateValue :: (a -> b) -> State s a -> State s b
onCodeList :: Monad m => ([a] -> b) -> [m a] -> m b
unCI :: CodeInfo a -> a
unPC :: PythonCode a -> a
unJC :: JavaCode a -> a
unCSC :: CSharpCode a -> a
unCPPC :: CppCode CppSrcCode CppHdrCode a -> a
unSC :: SwiftCode a -> a
pyName :: String
pyVersion :: String
jName :: String
jVersion :: String
csName :: String
csVersion :: String
cppName :: String
cppVersion :: String
swiftName :: String
swiftVersion :: String
