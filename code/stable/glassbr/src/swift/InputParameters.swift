/** InputParameters.swift
    Provides the structure for holding input values, the function for reading inputs, the function for calculating derived values, and the function for checking the physical constraints and software constraints on the input
    - Authors: Nikitha Krithnan and W. Spencer Smith
    - Note: Generated by Drasil v0.1-alpha
*/

import Foundation

/** Structure for holding the input values and derived values
*/
class InputParameters {
    var a: Double = 0.0
    var b: Double = 0.0
    var w: Double = 0.0
    var P_btol: Double = 0.0
    var TNT: Double = 0.0
    var g: String = ""
    var t: Double = 0.0
    var SD_x: Double = 0.0
    var SD_y: Double = 0.0
    var SD_z: Double = 0.0
    var h: Double = 0.0
    var LDF: Double = 0.0
    var GTF: Int = 0
    var SD: Double = 0.0
    var AR: Double = 0.0
    var w_TNT: Double = 0.0
    
    /** Initializes input object by reading inputs, calculating derived values, and checking physical constraints and software constraints on the input
        - Parameter filename: name of the input file
    */
    init(_ filename: String) throws {
        var outfile: FileHandle
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("function InputParameters called with inputs: {".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data("  filename = ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(filename.utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data("  }".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        
        try self.get_input(filename)
        try self.derived_values()
        try self.input_constraints()
    }
    
    /** Reads input from a file with the given file name
        - Parameter filename: name of the input file
    */
    private func get_input(_ filename: String) throws -> Void {
        var outfile: FileHandle
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("function get_input called with inputs: {".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data("  filename = ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(filename.utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data("  }".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        
        var infile: URL
        infile = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent(filename)
        var goolContents: [[String]]
        do {
            goolContents = try String(contentsOf: infile).components(separatedBy: "\n").map({(l: String) -> [String] in l.components(separatedBy: " ")})
        } catch {
            throw "Error reading from file."
        }
        self.a = Double(goolContents[1][0])!
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.a' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.a).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        self.b = Double(goolContents[2][0])!
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.b' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.b).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        self.w = Double(goolContents[3][0])!
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.w' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.w).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        self.P_btol = Double(goolContents[4][0])!
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.P_btol' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.P_btol).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        self.TNT = Double(goolContents[5][0])!
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.TNT' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.TNT).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        self.g = goolContents[6][0]
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.g' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(self.g.utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        self.t = Double(goolContents[7][0])!
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.t' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.t).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        self.SD_x = Double(goolContents[8][0])!
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.SD_x' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.SD_x).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        self.SD_y = Double(goolContents[9][0])!
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.SD_y' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.SD_y).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        self.SD_z = Double(goolContents[10][0])!
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.SD_z' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.SD_z).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
    }
    
    /** Calculates values that can be immediately derived from the inputs
    */
    private func derived_values() throws -> Void {
        var outfile: FileHandle
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("function derived_values called with inputs: {".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data("  }".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        
        self.h = 1.0 / 1000.0 * (self.t == 2.5 ? 2.16 : self.t == 2.7 ? 2.59 : self.t == 3.0 ? 2.92 : self.t == 4.0 ? 3.78 : self.t == 5.0 ? 4.57 : self.t == 6.0 ? 5.56 : self.t == 8.0 ? 7.42 : self.t == 10.0 ? 9.02 : self.t == 12.0 ? 11.91 : self.t == 16.0 ? 15.09 : self.t == 19.0 ? 18.26 : 21.44)
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.h' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.h).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        
        self.LDF = pow(3.0 / 60.0, 7.0 / 16.0)
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.LDF' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.LDF).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        
        if self.g == "AN" {
            self.GTF = 1
            do {
                outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
                try outfile.seekToEnd()
            } catch {
                throw "Error opening file."
            }
            do {
                try outfile.write(contentsOf: Data("var 'self.GTF' assigned ".utf8))
            } catch {
                throw "Error printing to file."
            }
            do {
                try outfile.write(contentsOf: Data(String(self.GTF).utf8))
            } catch {
                throw "Error printing to file."
            }
            do {
                try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
                try outfile.write(contentsOf: Data("\n".utf8))
            } catch {
                throw "Error printing to file."
            }
            do {
                try outfile.close()
            } catch {
                throw "Error closing file."
            }
        }
        else if self.g == "FT" {
            self.GTF = 4
            do {
                outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
                try outfile.seekToEnd()
            } catch {
                throw "Error opening file."
            }
            do {
                try outfile.write(contentsOf: Data("var 'self.GTF' assigned ".utf8))
            } catch {
                throw "Error printing to file."
            }
            do {
                try outfile.write(contentsOf: Data(String(self.GTF).utf8))
            } catch {
                throw "Error printing to file."
            }
            do {
                try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
                try outfile.write(contentsOf: Data("\n".utf8))
            } catch {
                throw "Error printing to file."
            }
            do {
                try outfile.close()
            } catch {
                throw "Error closing file."
            }
        }
        else if self.g == "HS" {
            self.GTF = 2
            do {
                outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
                try outfile.seekToEnd()
            } catch {
                throw "Error opening file."
            }
            do {
                try outfile.write(contentsOf: Data("var 'self.GTF' assigned ".utf8))
            } catch {
                throw "Error printing to file."
            }
            do {
                try outfile.write(contentsOf: Data(String(self.GTF).utf8))
            } catch {
                throw "Error printing to file."
            }
            do {
                try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
                try outfile.write(contentsOf: Data("\n".utf8))
            } catch {
                throw "Error printing to file."
            }
            do {
                try outfile.close()
            } catch {
                throw "Error closing file."
            }
        }
        else {
            throw "Undefined case encountered in function GTF"
        }
        
        self.SD = sqrt(pow(self.SD_x, 2.0) + pow(self.SD_y, 2.0) + pow(self.SD_z, 2.0))
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.SD' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.SD).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        
        self.AR = self.a / self.b
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.AR' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.AR).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        
        self.w_TNT = self.w * self.TNT
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("var 'self.w_TNT' assigned ".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(String(self.w_TNT).utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data(" in module InputParameters".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
    }
    
    /** Verifies that input values satisfy the physical constraints and software constraints
    */
    private func input_constraints() throws -> Void {
        var outfile: FileHandle
        do {
            outfile = try FileHandle(forWritingTo: FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent("log.txt"))
            try outfile.seekToEnd()
        } catch {
            throw "Error opening file."
        }
        do {
            try outfile.write(contentsOf: Data("function input_constraints called with inputs: {".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.write(contentsOf: Data("  }".utf8))
            try outfile.write(contentsOf: Data("\n".utf8))
        } catch {
            throw "Error printing to file."
        }
        do {
            try outfile.close()
        } catch {
            throw "Error closing file."
        }
        
        if !(0.1 <= self.a && self.a <= 5.0) {
            print("a has value ", terminator: "")
            print(self.a, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("between ", terminator: "")
            print(0.1, terminator: "")
            print(" (d_min)", terminator: "")
            print(" and ", terminator: "")
            print(5.0, terminator: "")
            print(" (d_max)", terminator: "")
            print(".")
            throw "InputError"
        }
        if !(0.1 <= self.b && self.b <= 5.0) {
            print("b has value ", terminator: "")
            print(self.b, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("between ", terminator: "")
            print(0.1, terminator: "")
            print(" (d_min)", terminator: "")
            print(" and ", terminator: "")
            print(5.0, terminator: "")
            print(" (d_max)", terminator: "")
            print(".")
            throw "InputError"
        }
        if !(4.5 <= self.w && self.w <= 910.0) {
            print("w has value ", terminator: "")
            print(self.w, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("between ", terminator: "")
            print(4.5, terminator: "")
            print(" (w_min)", terminator: "")
            print(" and ", terminator: "")
            print(910.0, terminator: "")
            print(" (w_max)", terminator: "")
            print(".")
            throw "InputError"
        }
        if !(6.0 <= self.SD && self.SD <= 130.0) {
            print("SD has value ", terminator: "")
            print(self.SD, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("between ", terminator: "")
            print(6.0, terminator: "")
            print(" (SD_min)", terminator: "")
            print(" and ", terminator: "")
            print(130.0, terminator: "")
            print(" (SD_max)", terminator: "")
            print(".")
            throw "InputError"
        }
        if !(self.AR <= 5.0) {
            print("AR has value ", terminator: "")
            print(self.AR, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("below ", terminator: "")
            print(5.0, terminator: "")
            print(" (AR_max)", terminator: "")
            print(".")
            throw "InputError"
        }
        
        if !(self.a > 0.0) {
            print("a has value ", terminator: "")
            print(self.a, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("above ", terminator: "")
            print(0.0, terminator: "")
            print(".")
            throw "InputError"
        }
        if !(self.a >= self.b) {
            print("a has value ", terminator: "")
            print(self.a, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("above ", terminator: "")
            print(self.b, terminator: "")
            print(" (b)", terminator: "")
            print(".")
            throw "InputError"
        }
        if !(0.0 < self.b && self.b <= self.a) {
            print("b has value ", terminator: "")
            print(self.b, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("between ", terminator: "")
            print(0.0, terminator: "")
            print(" and ", terminator: "")
            print(self.a, terminator: "")
            print(" (a)", terminator: "")
            print(".")
            throw "InputError"
        }
        if !(self.w > 0.0) {
            print("w has value ", terminator: "")
            print(self.w, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("above ", terminator: "")
            print(0.0, terminator: "")
            print(".")
            throw "InputError"
        }
        if !(0.0 <= self.P_btol && self.P_btol <= 1.0) {
            print("P_btol has value ", terminator: "")
            print(self.P_btol, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("between ", terminator: "")
            print(0.0, terminator: "")
            print(" and ", terminator: "")
            print(1.0, terminator: "")
            print(".")
            throw "InputError"
        }
        if !(self.TNT > 0.0) {
            print("TNT has value ", terminator: "")
            print(self.TNT, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("above ", terminator: "")
            print(0.0, terminator: "")
            print(".")
            throw "InputError"
        }
        if !(self.SD > 0.0) {
            print("SD has value ", terminator: "")
            print(self.SD, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("above ", terminator: "")
            print(0.0, terminator: "")
            print(".")
            throw "InputError"
        }
        if !(self.AR >= 1.0) {
            print("AR has value ", terminator: "")
            print(self.AR, terminator: "")
            print(", but is expected to be ", terminator: "")
            print("above ", terminator: "")
            print(1.0, terminator: "")
            print(".")
            throw "InputError"
        }
    }
}
