""" Calculations.jl
    Provides functions for calculating the outputs
    - Authors: Thulasi Jegatheesan
    - Note: Generated by Drasil v0.1-alpha
"""

module Calculations

import DifferentialEquations

""" Calculates volume of water: the amount of space occupied by a given quantity of water (m^3)
    - Parameter V_tank: volume of the cylindrical tank: the amount of space encompassed by a tank (m^3)
    - Returns: volume of water: the amount of space occupied by a given quantity of water (m^3)
"""
function func_V_W(V_tank::Float64)
    return V_tank
end

""" Calculates mass of water: the quantity of matter within the water (kg)
    - Parameter rho_W: density of water: mass per unit volume of water (kg/m^3)
    - Parameter V_W: volume of water: the amount of space occupied by a given quantity of water (m^3)
    - Returns: mass of water: the quantity of matter within the water (kg)
"""
function func_m_W(rho_W::Float64, V_W::Float64)
    return V_W * rho_W
end

""" Calculates ODE parameter for water related to decay time: derived parameter based on rate of change of temperature of water (s)
    - Parameter C_W: specific heat capacity of water: the amount of energy required to raise the temperature of a given unit mass of water by a given amount (J/(kg degreeC))
    - Parameter h_C: convective heat transfer coefficient between coil and water: the convective heat transfer coefficient that models the thermal flux from the coil to the surrounding water (W/(m^2 degreeC))
    - Parameter A_C: heating coil surface area: area covered by the outermost layer of the coil (m^2)
    - Parameter m_W: mass of water: the quantity of matter within the water (kg)
    - Returns: ODE parameter for water related to decay time: derived parameter based on rate of change of temperature of water (s)
"""
function func_tau_W(C_W::Float64, h_C::Float64, A_C::Float64, m_W::Float64)
    return m_W * C_W / (h_C * A_C)
end

""" Calculates temperature of the water: the average kinetic energy of the particles within the water (degreeC)
    - Parameter T_C: temperature of the heating coil: the average kinetic energy of the particles within the coil (degreeC)
    - Parameter T_init: initial temperature: the temperature at the beginning of the simulation (degreeC)
    - Parameter t_final: final time: the amount of time elapsed from the beginning of the simulation to its conclusion (s)
    - Parameter A_tol: absolute tolerance
    - Parameter R_tol: relative tolerance
    - Parameter t_step: time step for simulation: the finite discretization of time used in the numerical method for solving the computational model (s)
    - Parameter tau_W: ODE parameter for water related to decay time: derived parameter based on rate of change of temperature of water (s)
    - Returns: temperature of the water: the average kinetic energy of the particles within the water (degreeC)
"""
function func_T_W(T_C::Float64, T_init::Float64, t_final::Float64, A_tol::Float64, R_tol::Float64, t_step::Float64, tau_W::Float64)
    function f(T_W::Array{Float64}, p::Nothing, t::Float64)
        return [-(1.0 / tau_W) * T_W[1] + 1.0 / tau_W * T_C]
    end
    t_span = [0.0, t_final]
    
    r = DifferentialEquations.ODEProblem(f, [T_init], t_span)
    algorithm = DifferentialEquations.DP5()
    sol = DifferentialEquations.solve(r, alg=algorithm, reltol=R_tol, abstol=A_tol, saveat=t_step)
    T_W = Float64[]
    for sp in sol
        append!(T_W, sp)
    end
    
    return T_W
end

end
