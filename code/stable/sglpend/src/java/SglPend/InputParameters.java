package SglPend;

/** \file InputParameters.java
    \author Olu Owojaiye
    \brief Provides the function for reading inputs, the function for calculating derived values, and the function for checking the physical constraints on the input
    \note Generated by Drasil v0.1-alpha
*/

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class InputParameters {
    
    /** \brief Reads input from a file with the given file name
        \param filename name of the input file
        \return array containing the following values:
        \return length of the rod (m)
        \return mass (kg)
        \return angular acceleration (rad/s^2)
        \return displacement angle of the pendulum (rad)
        \return initial pendulum angle (rad)
    */
    public static Object[] get_input(String filename) throws FileNotFoundException {
        double L_rod;
        double m;
        double α;
        double θ_p;
        double θ_i;
        
        Scanner infile;
        infile = new Scanner(new File(filename));
        infile.nextLine();
        L_rod = Double.parseDouble(infile.nextLine());
        infile.nextLine();
        m = Double.parseDouble(infile.nextLine());
        infile.nextLine();
        α = Double.parseDouble(infile.nextLine());
        infile.nextLine();
        θ_p = Double.parseDouble(infile.nextLine());
        infile.nextLine();
        θ_i = Double.parseDouble(infile.nextLine());
        infile.close();
        
        Object[] outputs = new Object[5];
        outputs[0] = L_rod;
        outputs[1] = m;
        outputs[2] = α;
        outputs[3] = θ_p;
        outputs[4] = θ_i;
        return outputs;
    }
    
    /** \brief Calculates values that can be immediately derived from the inputs
        \param L_rod length of the rod (m)
        \param θ_i initial pendulum angle (rad)
        \return array containing the following values:
        \return x-component of initial position (m)
        \return y-component of initial position (m)
    */
    public static Object[] derived_values(double L_rod, double θ_i) {
        double p_x^i;
        double p_y^i;
        
        p_x^i = L_rod * Math.sin(θ_i);
        
        p_y^i = -(L_rod * Math.cos(θ_i));
        
        Object[] outputs = new Object[2];
        outputs[0] = p_x^i;
        outputs[1] = p_y^i;
        return outputs;
    }
    
    /** \brief Verifies that input values satisfy the physical constraints
        \param L_rod length of the rod (m)
        \param θ_i initial pendulum angle (rad)
    */
    public static void input_constraints(double L_rod, double θ_i) {
        if (!(L_rod > 0.0)) {
            System.out.print("Warning: ");
            System.out.print("L_rod has value ");
            System.out.print(L_rod);
            System.out.print(", but is suggested to be ");
            System.out.print("above ");
            System.out.print(0.0);
            System.out.println(".");
        }
        if (!(θ_i > 0.0)) {
            System.out.print("Warning: ");
            System.out.print("θ_i has value ");
            System.out.print(θ_i);
            System.out.print(", but is suggested to be ");
            System.out.print("above ");
            System.out.print(0.0);
            System.out.println(".");
        }
    }
}
