-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Using the Drasil generators to create Drasil's website
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-website
@version 0.1.0.0


-- | About Drasil
module Drasil.Website.About

-- | Creates the about section.
aboutSec :: Reference -> Reference -> Reference -> Reference -> Reference -> Reference -> Reference -> Reference -> Reference -> Reference -> Section

-- | Paragraph to about Drasil and its goals.
aboutParagraph1 :: Reference -> Reference -> Sentence

-- | Paragraph to describe the layout of the rest of the Drasil website.
aboutParagraph2 :: Reference -> Reference -> Reference -> Sentence

-- | Lists artifacts that Drasil generates
aboutParagraph3 :: Sentence
currentlyGeneratedArtifacts :: Contents

-- | Lists artifacts that we hope to generate with Drasil
aboutParagraph4 :: Sentence
futureGeneratedArtifacts :: Contents

-- | Paragraph describing information encoding
aboutParagraph5 :: Reference -> Sentence

-- | Paragraph describing chunks
aboutParagraph6 :: Reference -> Sentence

-- | Paragraph describing recipes
aboutParagraph7 :: Reference -> Sentence

-- | Paragraph describing GOOL
aboutParagraph8 :: Reference -> Sentence

-- | Paragraph providing a link to Drasil papers and documents
aboutParagraph9 :: Reference -> Sentence


-- | Contains all the information needed about the structure of the Drasil
--   framework to be displayed on the Drasil website.
module Drasil.Website.Analysis

-- | Creates the Analysis of Drasil Section. This section is split into the
--   following sub-sections:
--   
--   <ul>
--   <li>Data Table (spreadsheet that contains all the information about
--   classes, types, and instances)</li>
--   <li>Type Graphs (graphs showing type dependencies)</li>
--   <li>Class Instance Graphs (graphs showing the relationships between
--   types and classes, taken from Data Table)</li>
--   <li>Package Dependency Graphs (structure of modules within each
--   <tt>drasil-</tt> package)</li>
--   </ul>
analysisSec :: FilePath -> FilePath -> FilePath -> FilePath -> [String] -> Section

-- | Analysis section title.
drasilAnalysisTitle :: Sentence

-- | Analysis section introduction.
analysisIntro :: Sentence

-- | Gathers all references used in this file.
analysisRefs :: FilePath -> FilePath -> FilePath -> FilePath -> [String] -> [Reference]

-- | Data Table subsection.
dataTableSec :: FilePath -> Section

-- | Data Table subsection title.
dataTableTitle :: Sentence

-- | Data table description. Explains the purpose, organization, and links
--   to a downloadable version.
dataTableDesc :: FilePath -> Sentence

-- | HTML table.
--   
--   Data table references.
dataTableHTMLRef :: FilePath -> Reference

-- | Downloadable .csv file.
--   
--   Data table references.
dataTableCSVRef :: FilePath -> Reference

-- | Table of Graphs section. Contains a table for Type dependencies and
--   Class-Instance relations.
tableOfGraphsSec :: FilePath -> FilePath -> [String] -> Section

-- | Table of Graphs title.
tableOfGraphsTitle :: Sentence

-- | Helper to create a graph table based on the kind (either "datatype" or
--   "classInst"), path, and packages.
graphTable :: String -> FilePath -> String -> FilePath -> [String] -> [[Sentence]]

-- | Helper to create a row in a graph table. Based on the kind of table we
--   want, the file path to that graph, and the package name.
graphTableEntry :: String -> FilePath -> String -> FilePath -> String -> [Sentence]

-- | Helper to create a reference that points to the graph specified by its
--   kind (either "datatype" or "classInst"), prefix (either an empty
--   string or "circo_"), file path to the graph folder, and package name.
getGraphsInTableRef :: String -> String -> FilePath -> String -> Reference

-- | Type dependency table description. Includes information about the
--   colour scheme and what the graph actually means.
tableOfGraphsDescType :: Sentence

-- | Class-Instance table description. Includes information about the
--   colour scheme and what the graph actually means.
tableOfGraphsDescClassInst :: Sentence

-- | Creates a table that links to all generated type and class instance
--   graphs.
mkGraphsTable :: FilePath -> FilePath -> [String] -> Contents

-- | Table of graphs reference.
tableGraphRef :: Reference

-- | Creates the Package Dependency Graphs section.
graphSec :: FilePath -> [String] -> Section

-- | Package Dependency Graphs section title.
packDepGraphTitle :: Sentence

-- | Introduces the package dependency graphs.
graphSecIntro :: String
graphSecBwPkgs :: String

-- | Function to create displayable versions of the graphs.
dependencyGraphs :: FilePath -> String -> Contents

-- | Function to get the paths of graphs we want to display on the website.
drasilDisplayDepGraphPath :: FilePath -> FilePath -> String

-- | Gets all the paths to the pdf graphs from a given list of packages.
drasilDepGraphPathsPDF :: FilePath -> [String] -> [String]

-- | Create References to display as links for the dependency graph pdfs.
drasilDepGraphRefs :: FilePath -> [String] -> [Reference]

-- | Create the list of folders with the links to dependency graph pdfs.
folderList :: FilePath -> [String] -> RawContent

-- | Helper to create the list items for dependency graph pdfs.
folderListItems :: FilePath -> [String] -> [ItemType]


-- | Display Drasil documentation nicely for the website.
module Drasil.Website.Documentation

-- | Creates the Haddock documentation for all of Drasil.
docsSec :: FilePath -> Section

-- | Haddock Documentation Section title.
haddockDocsTitle :: Sentence

-- | Body paragraph that directs users to the Haddock documentation and a
--   variant with fully exposed modules.
haddockDocsDesc :: FilePath -> Sentence

-- | Creates references to the haddock documentation (both normal and full
--   variations).
docsRef :: FilePath -> Reference

-- | Creates references to the haddock documentation (both normal and full
--   variations).
fullDocsRef :: FilePath -> Reference

-- | Gathers all references used in this file.
docRefs :: FilePath -> [Reference]


-- | Create the list of Generated Examples for the Drasil website.
module Drasil.Website.Example

-- | Each Example gets placed in here.
data Example
E :: SystemInformation -> [Choices] -> FilePath -> FilePath -> Example

-- | Example system information. Used to get the system name and
--   abbreviation.
[sysInfoE] :: Example -> SystemInformation

-- | Some examples have generated code with specific choices. They may also
--   have more than one set of choices, so we need a list.
[choicesE] :: Example -> [Choices]

-- | Generated code path.
[codePath] :: Example -> FilePath

-- | Generated documents &amp; doxygen path
[srsDoxPath] :: Example -> FilePath

-- | Records example system information.
allExampleSI :: [SystemInformation]

-- | Records example choices. The order of the list must match up with that
--   in <a>allExampleSI</a>, or the Case Studies Table will be incorrect.
allExampleChoices :: [[Choices]]

-- | Combine system info, description, choices, and file paths into one
--   nice package.
allExamples :: [SystemInformation] -> [[Choices]] -> FilePath -> FilePath -> [Example]

-- | Calls <a>allExamples</a> on <a>allExampleSI</a>,
--   <tt>allExampleDesc</tt>, and <a>allExampleChoices</a>. Can be
--   considered a "default" version of <a>allExamples</a>.
examples :: FilePath -> FilePath -> [Example]

-- | Create the full list of examples.
fullExList :: FilePath -> FilePath -> RawContent

-- | Create each example point and call <a>individualExList</a> to do the
--   rest.
allExampleList :: [Example] -> [ItemType]

-- | Display the points for generated documents and call <a>versionList</a>
--   to display the code.
individualExList :: Example -> [ItemType]

-- | Takes a function that gets the needed references (either references
--   for the code or doxygen references) and the example to create the list
--   out of. For examples that have more than one version of generated code
--   (more than one set of choices) like Projectile, we generate the code
--   and doxygen references for each.
versionList :: (Example -> Lang -> String -> Reference) -> Example -> [ItemType]

-- | Show function to display program languages to user.
showLang :: Lang -> String

-- | Example section function generator. Makes a list of examples and
--   generated artifacts.
exampleSec :: FilePath -> FilePath -> Section

-- | Example section title.
exampleTitle :: Sentence

-- | Example section introduction.
exampleIntro :: Sentence

-- | Example list titles.
generatedCodeTitle :: String

-- | Example list titles.
generatedCodeDocsTitle :: String

-- | Similar to <a>showLang</a>, but for use within Drasil for Referencing
--   and UIDs.
convertLang :: Lang -> String

-- | Generate a reference towards the code folder. Uses <a>getCodePath</a>
--   to find the code path.
getCodeRef :: Example -> Lang -> String -> Reference

-- | Similar to <a>getCodeRef</a>, but builds the source code references
buildDrasilExSrcRef :: Example -> Reference

-- | Similar to <a>getCodeRef</a>, but gets the doxygen references and uses
--   <a>getDoxRef</a> instead.
getDoxRef :: Example -> Lang -> String -> Reference

-- | Make references for each of the generated SRS files.
getSRSRef :: FilePath -> String -> String -> Reference

-- | Get the paths of where each reference exist for SRS files. Some
--   example abbreviations have spaces, so we just filter those out. The
--   suffix should only be either html or pdf.
getSRSPath :: FilePath -> String -> String -> FilePath

-- | Uses <tt>repoRt</tt> path (codePath in this module).
--   
--   Get the file paths for generated code and doxygen locations.
getCodePath :: FilePath -> String -> String -> FilePath

-- | Uses <tt>exRt</tt> path (srsDoxPath in this module).
--   
--   Get the file paths for generated code and doxygen locations.
getDoxPath :: FilePath -> String -> String -> FilePath

-- | Gather all references used in making the Examples section.
exampleRefs :: FilePath -> FilePath -> [Reference]

-- | Helpers to pull code and doxygen references from an example. Creates a
--   reference for every possible choice in every possible language.
getCodeRefDB :: Example -> [Reference]

-- | Helpers to pull code and doxygen references from an example. Creates a
--   reference for every possible choice in every possible language.
getDoxRefDB :: Example -> [Reference]

-- | Helper to pull the system name (abbreviation) from an <a>Example</a>.
getAbrv :: Example -> String


-- | Case Studies table for the different choices available when generating
--   code from Drasil. To be used in the Drasil website.
module Drasil.Website.CaseStudy

-- | Creates the Case Study Section.
caseStudySec :: Section

-- | Section title.
caseStudiesTitle :: String

-- | Section description.
caseStudiesDesc :: String

-- | Introduce the Case Study Table Legend as a list.
legendIntro :: String

-- | Creates the Case Study Table
mkCaseTable :: RawContent

-- | Holds individual case studies. System info may not be needed, but it
--   is still nice to keep around for now.
data CaseStudy
CS :: SystemInformation -> Sentence -> Choices -> CaseStudy

-- | Each case study needs a name, so use system information.
[sysInfoCS] :: CaseStudy -> SystemInformation

-- | A case study may have different program names for the same example
--   (ex. Projectile).
[progName] :: CaseStudy -> Sentence

-- | Each case study has code that is generated from a set of choices.
[choicesCS] :: CaseStudy -> Choices

-- | Converts a list of examples into a list of CaseStudies. Currently,
--   projectile is the only one that has more than one set of choices, so
--   we take the naming scheme from there.
mkCaseStudy :: Example -> [CaseStudy]

-- | Hardcoded header row for the Case studies table
headerRow :: [Sentence]

-- | Creates the case study table body.
tableBody :: [CaseStudy] -> [[Sentence]]

-- | Converts a case study into a table row for easy display.
displayCS :: CaseStudy -> [Sentence]

-- | Each entry for the case studies table legend. The title should be the
--   same as the header.
data CSLegend
CSL :: String -> [(String, String)] -> CSLegend

-- | Legend title.
[ttle] :: CSLegend -> String

-- | Legend symbols along with their respective definitions.
[symbAndDefs] :: CSLegend -> [(String, String)]

-- | Make the legend for the case study table as a list.
caseStudyLegend :: RawContent

-- | Helper to convert the Case Study legends into list items.
mkLegendListFunc :: CSLegend -> ItemType

-- | Should eventually take Sentences instead of Strings. Converts into the
--   format of "symbol - definition".
mkTandDSent :: (String, String) -> ItemType

-- | Case Study Table column headers.
caseStudyTitle :: String

-- | Case Study Table column headers.
modularityTitle :: String

-- | Case Study Table column headers.
implementTypeTitle :: String

-- | Case Study Table column headers.
loggingTitle :: String

-- | Case Study Table column headers.
inStructTitle :: String

-- | Case Study Table column headers.
conStructTitle :: String

-- | Case Study Table column headers.
conRepTitle :: String

-- | Case Study Table column headers.
realNumRepTitle :: String

-- | Case study legend entries.
legendEntries :: [CSLegend]

-- | Modularity or Separation of software.
modularityLegend :: CSLegend

-- | Software implementation type.
implementationTypeLegend :: CSLegend

-- | Compiler logging statements.
loggingLegend :: CSLegend

-- | Input value structure.
inputStrLegend :: CSLegend

-- | Constant value structure.
conStrLegend :: CSLegend

-- | Constant value representation.
conRepLegend :: CSLegend

-- | Real number representation.
realNumRepLegend :: CSLegend
getMod :: Modularity -> Sentence
getImp :: ImplementationType -> Sentence
getLog :: [Logging] -> Sentence
getInstr :: Structure -> Sentence
getConstr :: ConstantStructure -> Sentence
getConRep :: ConstantRepr -> Sentence
getRealNum :: [CodeType] -> Sentence

module Drasil.Website.GettingStarted
gettingStartedSec :: Reference -> Reference -> Reference -> Reference -> Reference -> Reference -> Section

-- | Getting started section title.
gettingStartedTitle :: Sentence

-- | Getting started section introduction.
gettingStartedIntro :: Sentence

-- | Quick Start subsection.
quickStartSec :: Reference -> Section

-- | Quick Start subsection title.
quickStartTitle :: Sentence

-- | Link to Quick Start Wiki.
quickStartDesc :: Reference -> Sentence

-- | New workspace subsection.
newWorkspaceSec :: Reference -> Section

-- | New workspace subsection title.
newWorkspaceTitle :: Sentence

-- | Link to new workspace Wiki.
newWorkspaceDesc :: Reference -> Sentence

-- | Contributor's Guide and Workflow subsection.
contribGuideWorkflowSec :: Reference -> Reference -> Section

-- | Contributor's Guide and Workflow title.
contribGuideWorkflowTitle :: Sentence

-- | Link to Contributor's Guide and Workflow Wiki.
contribGuideWorkflowDesc :: Reference -> Reference -> Sentence

-- | Creating Your Own Project subsection.
createOwnProjectSec :: Reference -> Section

-- | Creating Your Own Project title.
createOwnProjectTitle :: Sentence

-- | Link to Creating Your Own Project Wiki.
createOwnProjectDesc :: Reference -> Sentence

-- | Debugging Drasil subsection.
debuggingDrasilSec :: Reference -> Section

-- | Debugging Drasil title.
debuggingDrasilTitle :: Sentence

-- | Debugging Drasil Wiki.
debuggingDrasilDesc :: Reference -> Sentence


-- | Introduce the Drasil website.
module Drasil.Website.Introduction

-- | Creates the about section.
introSec :: Section

-- | Paragraph to introduce Drasil and its goals.
introParagraph1 :: Sentence


-- | Gathers and organizes all the information for the <a>Drasil
--   website</a>.
module Drasil.Website.Body

-- | Printing info to get document to generate. Takes in the
--   <a>FolderLocation</a>.
printSetting :: FolderLocation -> PrintingInformation

-- | Instead of being an <tt>SRSDecl</tt>, this takes the folder locations
--   and generates the document from there.
mkWebsite :: FolderLocation -> Document

-- | Folder locations based on environment variables (using <tt>getEnv</tt>
--   in <a>Drasil.Website.Main</a>).
data FolderLocation
Folder :: FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> FilePath -> [String] -> FolderLocation

-- | Deploy location. Currently unused, but may be needed in the future.
[depL] :: FolderLocation -> FilePath

-- | Haddock documentation root file path. After using <tt>make
--   deploy</tt>, this should be <tt>deploy/docs</tt>.
[docsRt] :: FolderLocation -> FilePath

-- | Example root file path. After using <tt>make deploy</tt>, this should
--   be <tt>deploy/examples</tt>.
[exRt] :: FolderLocation -> FilePath

-- | Package dependency graph root file path. After using <tt>make
--   deploy</tt>, this should be <tt>deploy/graphs</tt>.
[graphRt] :: FolderLocation -> FilePath

-- | Analysis root file path. After using <tt>make deploy</tt>, this should
--   be <tt>deploy/analysis</tt>.
[analysisRt] :: FolderLocation -> FilePath

-- | Type graphs root file path. After using <tt>make deploy</tt>, this
--   should be <tt>deploy/analysis/TypeDependencyGraphs</tt>.
[typeGraphFolder] :: FolderLocation -> FilePath

-- | Class-instance graphs root file path. After using <tt>make
--   deploy</tt>, this should be
--   <tt>deploy/analysis/DataTable/packagegraphs</tt>.
[classInstFolder] :: FolderLocation -> FilePath

-- | Repository root, used for linking to generated code in GitHub.
[repoRt] :: FolderLocation -> FilePath

-- | Deploy build number. Currently unused.
[buildNum] :: FolderLocation -> FilePath

-- | Deploy build path. Currently unused.
[buildPth] :: FolderLocation -> FilePath

-- | List of Drasil packages taken from the <tt>Makefile</tt>.
[packages] :: FolderLocation -> [String]

-- | System information.
si :: FolderLocation -> SystemInformation

-- | Puts all the sections in order. Basically the website version of the
--   SRS declaration.
sections :: FolderLocation -> [Section]

-- | Needed for references and terms to work.
symbMap :: FolderLocation -> ChunkDB

-- | Helper to get the system name as an <a>IdeaDict</a> from
--   <a>SystemInformation</a>.
getSysName :: SystemInformation -> IdeaDict

-- | Empty database needed for <a>si</a> to work.
usedDB :: ChunkDB

-- | Holds all references and links used in the website.
allRefs :: FolderLocation -> [Reference]

-- | Used for system name and kind inside of <a>si</a>.
webName :: CI

-- | Used for system name and kind inside of <a>si</a>.
web :: CI

-- | Header section creator.
headerSec :: Section

-- | For the drasil tree image on the website.
imageContent :: LabelledContent

-- | Used for the repository link.
gitHubRef :: Reference
wikiRef :: Reference
infoEncodingWiki :: Reference
chunksWiki :: Reference
recipesWiki :: Reference
paperGOOL :: Reference
papersWiki :: Reference
quickStartWiki :: Reference
newWorkspaceSetupWiki :: Reference
contribGuideWiki :: Reference
workflowWiki :: Reference
createProjWiki :: Reference
debuggingWiki :: Reference

-- | Hardcoded info for the title, URL, and image path.
websiteTitle :: String
gitHubInfoURL :: FilePath
imagePath :: FilePath

-- | Create the footer section.
footer :: FolderLocation -> Section

-- | <a>footer</a> contents.
copyrightInfo :: Sentence
