""" Projectile.jl
    A program to predict whether a launched projectile hits its target.
    - Authors: Samuel J. Crawford, Brooks MacLachlan, and W. Spencer Smith
    - Note: Generated by Drasil v0.1-alpha
"""

module Projectile

""" Calculates flight duration: the time when the projectile lands (s)
    - Parameter v_launch: launch speed: the initial speed of the projectile when launched (m/s)
    - Parameter theta: launch angle: the angle between the launcher and a straight line from the launcher to the target (rad)
    - Parameter g: magnitude of gravitational acceleration (m/s^2)
    - Returns: flight duration: the time when the projectile lands (s)
"""
function func_t_flight(v_launch::Float64, theta::Float64, g::Float64)
    return 2.0 * v_launch * sin(theta) / g
end

""" Calculates landing position: the distance from the launcher to the final position of the projectile (m)
    - Parameter v_launch: launch speed: the initial speed of the projectile when launched (m/s)
    - Parameter theta: launch angle: the angle between the launcher and a straight line from the launcher to the target (rad)
    - Parameter g: magnitude of gravitational acceleration (m/s^2)
    - Returns: landing position: the distance from the launcher to the final position of the projectile (m)
"""
function func_p_land(v_launch::Float64, theta::Float64, g::Float64)
    return 2.0 * v_launch ^ 2.0 * sin(theta) * cos(theta) / g
end

""" Calculates distance between the target position and the landing position: the offset between the target position and the landing position (m)
    - Parameter p_target: target position: the distance from the launcher to the target (m)
    - Parameter p_land: landing position: the distance from the launcher to the final position of the projectile (m)
    - Returns: distance between the target position and the landing position: the offset between the target position and the landing position (m)
"""
function func_d_offset(p_target::Float64, p_land::Float64)
    return p_land - p_target
end

""" Calculates output message as a string
    - Parameter p_target: target position: the distance from the launcher to the target (m)
    - Parameter epsilon: hit tolerance
    - Parameter d_offset: distance between the target position and the landing position: the offset between the target position and the landing position (m)
    - Returns: output message as a string
"""
function func_s(p_target::Float64, epsilon::Float64, d_offset::Float64)
    if abs(d_offset / p_target) < epsilon
        return "The target was hit."
    elseif d_offset < 0.0
        return "The projectile fell short."
    else
        return "The projectile went long."
    end
end

""" Reads input from a file with the given file name
    - Parameter filename: name of the input file
    - Returns: launch speed: the initial speed of the projectile when launched (m/s)
    - Returns: launch angle: the angle between the launcher and a straight line from the launcher to the target (rad)
    - Returns: target position: the distance from the launcher to the target (m)
"""
function get_input(filename::String)
    infile = open(filename, "r")
    readline(infile)
    v_launch = parse(Float64, readline(infile))
    readline(infile)
    theta = parse(Float64, readline(infile))
    readline(infile)
    p_target = parse(Float64, readline(infile))
    close(infile)
    
    return v_launch, theta, p_target
end

""" Verifies that input values satisfy the physical constraints
    - Parameter v_launch: launch speed: the initial speed of the projectile when launched (m/s)
    - Parameter theta: launch angle: the angle between the launcher and a straight line from the launcher to the target (rad)
    - Parameter p_target: target position: the distance from the launcher to the target (m)
"""
function input_constraints(v_launch::Float64, theta::Float64, p_target::Float64)
    if !(v_launch > 0.0)
        print("Warning: ")
        print("v_launch has value ")
        print(v_launch)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(0.0 < theta && theta < pi / 2.0)
        print("Warning: ")
        print("theta has value ")
        print(theta)
        print(", but is suggested to be ")
        print("between ")
        print(0.0)
        print(" and ")
        print(pi / 2.0)
        print(" ((pi)/(2))")
        println(".")
    end
    if !(p_target > 0.0)
        print("Warning: ")
        print("p_target has value ")
        print(p_target)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
end

""" Writes the output values to output.txt
    - Parameter s: output message as a string
    - Parameter d_offset: distance between the target position and the landing position: the offset between the target position and the landing position (m)
    - Parameter t_flight: flight duration: the time when the projectile lands (s)
"""
function write_output(s::String, d_offset::Float64, t_flight::Float64)
    outputfile = open("output.txt", "w")
    print(outputfile, "s = ")
    println(outputfile, s)
    print(outputfile, "d_offset = ")
    println(outputfile, d_offset)
    print(outputfile, "t_flight = ")
    println(outputfile, t_flight)
    close(outputfile)
end

filename = ARGS[1]
g = 9.8
epsilon = 2.0e-2
v_launch, theta, p_target = get_input(filename)
input_constraints(v_launch, theta, p_target)
t_flight = func_t_flight(v_launch, theta, g)
p_land = func_p_land(v_launch, theta, g)
d_offset = func_d_offset(p_target, p_land)
s = func_s(p_target, epsilon, d_offset)
write_output(s, d_offset, t_flight)

end
