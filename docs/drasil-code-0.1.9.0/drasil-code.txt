-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Code SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-code
@version 0.1.9.0


-- | Re-export code-related smart constructors for external code writing
--   and generation.
module Language.Drasil.Code

-- | Makes code from <a>FileData</a> (<a>FilePath</a>s with module data)
--   and <a>AuxData</a> (<a>FilePath</a>s with auxiliary document
--   information).
makeCode :: [FileData] -> [AuxData] -> Code

-- | Creates the requested <a>Code</a> by producing files.
createCodeFiles :: Code -> IO ()

-- | Initializes the generator's <a>DrasilState</a>. <a>Space</a> parameter
--   is a string representing the date. &lt;math&gt; parameter is the
--   sample input values provided by the user.
generator :: Lang -> String -> [Expr] -> Choices -> CodeSpec -> DrasilState

-- | Generates a package with the given <a>DrasilState</a>. The passed
--   un-representation functions determine which target language the
--   package will be generated in.
generateCode :: (OOProg progRepr, PackageSym packRepr) => Lang -> (progRepr (Program progRepr) -> ProgData) -> (packRepr (Package packRepr) -> PackData) -> DrasilState -> IO ()

-- | Reads data from a file and converts the values to <a>Expr</a>s. The
--   file must be formatted according to the <a>DataDesc'</a> passed as a
--   parameter.
readWithDataDesc :: FilePath -> DataDesc' -> IO [Expr]

-- | Defines the DataDesc for the file containing a sample data set, which
--   a user must supply if they want to generate a sample input file.
sampleInputDD :: [CodeVarChunk] -> DataDesc'

-- | The instruction indicates how the generated program should be written
--   down. Full details of Choices documentation
--   <a>https://github.com/JacquesCarette/Drasil/wiki/The-Code-Generator</a>
data Choices
Choices :: [Lang] -> Architecture -> DataInfo -> Maps -> OptionalFeatures -> Constraints -> [ExtLib] -> (InternalConcept -> Name) -> Int -> Choices

-- | Target languages. Choosing multiple means program will be generated in
--   multiple languages.
[lang] :: Choices -> [Lang]

-- | Architecture of the program, include modularity and implementation
--   type
[architecture] :: Choices -> Architecture

-- | Data structure and represent
[dataInfo] :: Choices -> DataInfo

-- | Maps for 'Drasil concepts' to 'code concepts' or <a>Space</a> to a
--   'CodeType
[maps] :: Choices -> Maps

-- | Setting for Softifacts that can be added to the program or left it out
[optFeats] :: Choices -> OptionalFeatures

-- | Constraint violation behaviour. Exception or Warning.
[srsConstraints] :: Choices -> Constraints

-- | List of external libraries what to utilize
[extLibs] :: Choices -> [ExtLib]

-- | Function to get modifiable function names
[icNames] :: Choices -> InternalConcept -> Name

-- | Number of folders to go up in order to obtain the image
[folderVal] :: Choices -> Int

-- | Comment implementation options.
data Comments

-- | Function/method-level comments.
CommentFunc :: Comments

-- | Class-level comments.
CommentClass :: Comments

-- | File/Module-level comments.
CommentMod :: Comments

-- | Doxygen file verbosity options.
data Verbosity
Verbose :: Verbosity
Quiet :: Verbosity

-- | Constraint behaviour options within program.
data ConstraintBehaviour

-- | Print warning when constraint violated.
Warning :: ConstraintBehaviour

-- | Throw exception when constraint violated.
Exception :: ConstraintBehaviour

-- | Constructor to create a Architecture
makeArchit :: Modularity -> ImplementationType -> Architecture

-- | Architecture of a program
data Architecture
Archt :: Modularity -> ImplementationType -> Architecture

-- | How the program should be modularized.
[modularity] :: Architecture -> Modularity

-- | Implementation type, program or library.
[impType] :: Architecture -> ImplementationType

-- | Data of a program - how information should be encoded.
data DataInfo
DataInfo :: Structure -> ConstantStructure -> ConstantRepr -> DataInfo

-- | Structure of inputs (bundled or not).
[inputStructure] :: DataInfo -> Structure

-- | Structure of constants (inlined or bundled or not, or stored with
--   inputs).
[constStructure] :: DataInfo -> ConstantStructure

-- | Representation of constants (as variables or as constants).
[constRepr] :: DataInfo -> ConstantRepr

-- | Constructor to create a DataInfo
makeData :: Structure -> ConstantStructure -> ConstantRepr -> DataInfo

-- | Maps for Concepts and Space
data Maps
Maps :: ConceptMatchMap -> SpaceMatch -> Maps

-- | Map of <a>UID</a>s for Drasil concepts to code concepts. Matching a
--   <a>UID</a> to a code concept means the code concept should be used
--   instead of the chunk associated with the <a>UID</a>.
[conceptMatch] :: Maps -> ConceptMatchMap

-- | Map of <a>Space</a>s to <a>CodeType</a>s Matching a <a>Space</a> to a
--   <a>CodeType</a> means values of the <a>Space</a> should have that
--   <a>CodeType</a> in the generated code.
[spaceMatch] :: Maps -> SpaceMatch

-- | Constructor to create a Maps
makeMaps :: ConceptMatchMap -> SpaceMatch -> Maps

-- | Default mapping between <tt>Space</tt> and <a>CodeType</a>.
spaceToCodeType :: Space -> [CodeType]

-- | Constructor to create a Constraints
makeConstraints :: ConstraintBehaviour -> ConstraintBehaviour -> Constraints

-- | Constructor to create an ODE
makeODE :: [ODEInfo] -> [ODELibPckg] -> ODE

-- | Constructor to create a DocConfig
makeDocConfig :: [Comments] -> Verbosity -> Visibility -> DocConfig

-- | Constructor to create a LogConfig
makeLogConfig :: [Logging] -> FilePath -> LogConfig

-- | Log Configuration
data LogConfig
LogConfig :: [Logging] -> FilePath -> LogConfig

-- | Turns different forms of logging on or off.
[logging] :: LogConfig -> [Logging]

-- | Name of log file.
[logFile] :: LogConfig -> FilePath
data OptionalFeatures
OptFeats :: DocConfig -> LogConfig -> [AuxFile] -> OptionalFeatures
[docConfig] :: OptionalFeatures -> DocConfig
[logConfig] :: OptionalFeatures -> LogConfig

-- | Turns generation of different auxiliary (non-source-code) files on or
--   off.
[auxFiles] :: OptionalFeatures -> [AuxFile]

-- | Constructor to create a OptionalFeatures
makeOptFeats :: DocConfig -> LogConfig -> [AuxFile] -> OptionalFeatures

-- | External Library Options
newtype ExtLib
Math :: ODE -> ExtLib

-- | Program implementation options.
data ImplementationType

-- | Generated code does not include Controller.
Library :: ImplementationType

-- | Generated code includes Controller.
Program :: ImplementationType

-- | Logging options for function calls and variable assignments. Eq
--   instances required for Logging and Comments because generator needs to
--   check membership of these elements in lists
data Logging

-- | Log messages generated for function calls.
LogFunc :: Logging

-- | Log messages generated for variable assignments.
LogVar :: Logging

-- | Modularity of a program.
data Modularity

-- | Different modules. For controller, input, calculations, output.
Modular :: Modularity

-- | All generated code is in one module/file.
Unmodular :: Modularity

-- | Variable structure options.
data Structure

-- | Individual variables
Unbundled :: Structure

-- | Variables bundled in a class
Bundled :: Structure

-- | Constants options.
data ConstantStructure

-- | Inline values for constants.
Inline :: ConstantStructure

-- | Store constants with inputs.
WithInputs :: ConstantStructure

-- | Store constants separately from inputs, whether bundled or unbundled.
Store :: Structure -> ConstantStructure

-- | Options for representing constants in a program.
data ConstantRepr

-- | Constants represented as regular variables.
Var :: ConstantRepr

-- | Use target language's mechanism for defining constants.
Const :: ConstantRepr

-- | Code concepts. For now, just pi.
data CodeConcept
Pi :: CodeConcept

-- | Builds a <a>ConceptMatchMap</a> from an association list of chunks and
--   <tt>CodeConcepts</tt>.
matchConcepts :: HasUID c => [(c, [CodeConcept])] -> ConceptMatchMap

-- | Specifies which <a>CodeType</a> should be used to represent each
--   mathematical <a>Space</a>. [<a>CodeType</a>] is
--   preferentially-ordered, first <a>CodeType</a> that does not conflict
--   with other choices will be selected.
type SpaceMatch = Space -> [CodeType]

-- | Builds a <a>SpaceMatch</a> from an association list of <tt>Spaces</tt>
--   and <tt>CodeTypes</tt>.
matchSpaces :: [(Space, [CodeType])] -> SpaceMatch

-- | Currently we only support two kind of auxiliary files: sample input
--   file, readme. To generate a sample input file compatible with the
--   generated program, <a>FilePath</a> is the path to the user-provided
--   file containing a sample set of input data.
data AuxFile
SampleInput :: FilePath -> AuxFile
ReadME :: AuxFile

-- | Gets the file path to a sample input data set from a <a>Choices</a>
--   structure, if the user chose to generate a sample input file.
getSampleData :: Choices -> Maybe FilePath

-- | Doxygen date-field visibility options.
data Visibility
Show :: Visibility
Hide :: Visibility

-- | Default choices to be used as the base from which design
--   specifications can be built.
defaultChoices :: Choices

-- | Code specifications. Holds information needed to generate code.
data CodeSpec
[CodeSpec] :: HasName a => Name -> [a] -> Purpose -> Background -> [Input] -> [Input] -> [Derived] -> [Output] -> [FilePath] -> [Def] -> ConstraintCEMap -> [Const] -> ConstantMap -> [Mod] -> ChunkDB -> CodeSpec

-- | Get a <a>UID</a> of a chunk corresponding to a <a>Func</a>.
funcUID :: Func -> UID

-- | Convert a <a>Func</a> to an implementation-stage <a>QuantityDict</a>
--   representing the function.
asVC :: Func -> QuantityDict

-- | Defines a <a>CodeSpec</a> based on the <a>SystemInformation</a>,
--   <a>Choices</a>, and <a>Mod</a>s defined by the user.
codeSpec :: SystemInformation -> Choices -> [Mod] -> CodeSpec

-- | Define an assignment statement.
($:=) :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt

-- | Holds module information.
data Mod
Mod :: Name -> Description -> [Import] -> [Class] -> [Func] -> Mod

-- | State variables hold attach a <a>ScopeTag</a> to a
--   <a>CodeVarChunk</a>.
data StateVariable

-- | Holds a function definition or function data.
data Func
data FuncStmt
[FAsg] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FAsgIndex] :: CodeVarChunk -> Integer -> CodeExpr -> FuncStmt

-- | For-loop; Variable, Start, Stop, Step, Body.
[FFor] :: CodeVarChunk -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt
[FForEach] :: CodeVarChunk -> CodeExpr -> [FuncStmt] -> FuncStmt
[FWhile] :: CodeExpr -> [FuncStmt] -> FuncStmt
[FCond] :: CodeExpr -> [FuncStmt] -> [FuncStmt] -> FuncStmt
[FRet] :: CodeExpr -> FuncStmt
[FThrow] :: String -> FuncStmt
[FTry] :: [FuncStmt] -> [FuncStmt] -> FuncStmt
[FContinue] :: FuncStmt
[FDecDef] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FFuncDef] :: CodeFuncChunk -> [ParameterChunk] -> [FuncStmt] -> FuncStmt
[FVal] :: CodeExpr -> FuncStmt
[FMulti] :: [FuncStmt] -> FuncStmt
[FAppend] :: CodeExpr -> CodeExpr -> FuncStmt

-- | Define a public state variable based on the given <a>CodeVarChunk</a>.
pubStateVar :: CodeVarChunk -> StateVariable

-- | Define a private state variable based on the given
--   <a>CodeVarChunk</a>.
privStateVar :: CodeVarChunk -> StateVariable

-- | Define a declare-define statement.
fDecDef :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt

-- | Define a for-loop. <a>Quantity</a> is for the iteration variable,
--   <a>CodeExpr</a> is the upper bound at that variable (the variable will
--   start with a value of 0). [<a>FuncStmt</a>] is for the loop body.
ffor :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a for-loop. <a>Quantity</a> is for the iteration variable, and
--   3 <a>CodeExpr</a>s for the start, stop, step numbers.
--   [<a>FuncStmt</a>] is for the loop body.
fforRange :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a function that reads data from a file, according to the given
--   <a>DataDesc</a>.
funcData :: Name -> Description -> DataDesc -> Func

-- | Define a function by providing the <a>FuncStmt</a>s for its body.
--   Other parameters are function name, description, list of parameters,
--   space of the returned value, and description of the returned value.
funcDef :: (Quantity c, MayHaveUnit c) => Name -> Description -> [c] -> Space -> Maybe Description -> [FuncStmt] -> Func

-- | Define a <a>Mod</a> with the given <a>Name</a>, <a>Description</a>,
--   <tt>Classes</tt>, and <tt>Functions</tt>.
packmod :: Name -> Description -> [Class] -> [Func] -> Mod

-- | Constructor for junk data.
junkLine :: Data

-- | Constructor for an unknown amount of lines of data.
multiLine :: LinePattern -> Delim -> Data

-- | Constructor for data with a repeated pattern.
repeated :: [DataItem] -> LinePattern

-- | Constructor for a single line of data.
singleLine :: LinePattern -> Delim -> Data

-- | Constructor for a single datum.
singleton :: DataItem -> Data

-- | External library is a group of <a>Step</a>s
type ExternalLibrary = [StepGroup]

-- | A step can be a call to an external library function or method.
data Step

-- | The first item in the <a>Requires</a> list should be where the
--   function being called is defined.
data FunctionInterface

-- | An argument may contain a named argument and argument information.
data Argument

-- | Specifies an external library.
externalLib :: [StepGroup] -> ExternalLibrary

-- | To be used when there are multiple options for a group of consecutive
--   steps, where a single use-case-specific factor decides which step
--   group to use.
choiceSteps :: [[Step]] -> StepGroup

-- | To be used when there are multiple options for a single step, where a
--   use-case-specific factor decides which step to use.
choiceStep :: [Step] -> StepGroup

-- | Specifies a step which must exist in some form in every use case.
mandatoryStep :: Step -> StepGroup

-- | Specifies multiple consecutive steps that all must exist in some form
--   in every use case.
mandatorySteps :: [Step] -> StepGroup
callStep :: FunctionInterface -> Step

-- | Specifies a call to an external library function.
libFunction :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library method.
libMethod :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library function, where the result is
--   assigned to a variable.
libFunctionWithResult :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library method, where the result is
--   assigned to a variable.
libMethodWithResult :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is assigned to a variable.
libConstructor :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library function, where multiple
--   modules from the external library are required, and the result is
--   assigned to a variable.
libConstructorMultiReqs :: [Requires] -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is returned.
constructAndReturn :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies an argument that is not use-case-dependent.
lockedArg :: CodeExpr -> Argument

-- | Specifies a named argument that is not use-case-dependent.
lockedNamedArg :: NamedArgument -> CodeExpr -> Argument

-- | Specifies a use-case-dependent argument whose value can be inlined in
--   the call.
inlineArg :: Space -> Argument

-- | Specifies a use-case-dependent named argument whose value can be
--   inlined in the call.
inlineNamedArg :: NamedArgument -> Space -> Argument

-- | Specifies use-case-dependent argument whose value must be assigned to
--   a variable before being passed in the call.
preDefinedArg :: CodeVarChunk -> Argument

-- | Specifies use-case-dependent named argument whose value must be
--   assigned to a variable before being passed in the call.
preDefinedNamedArg :: NamedArgument -> CodeVarChunk -> Argument

-- | Specifies a function type argument, where the body consists of a
--   single step.
functionArg :: CodeFuncChunk -> [Parameter] -> Step -> Argument

-- | Specifies an argument that is an object of a class that must be
--   defined in the calling program.
customObjArg :: [Requires] -> Description -> CodeVarChunk -> CodeFuncChunk -> ClassInfo -> Argument

-- | Specifies an argument that is an object of a class from the external
--   library. The list of [CodeVarChunk] represents fields of the object
--   that must be set in the calling program.
recordArg :: Requires -> CodeFuncChunk -> CodeVarChunk -> [CodeVarChunk] -> Argument

-- | Specifies a use-case-independent parameter.
lockedParam :: CodeVarChunk -> Parameter

-- | Specifies a parameter whose name depends on the use case.
unnamedParam :: Space -> Parameter

-- | Specifies a class that must be implemented in the calling program.
customClass :: [MethodInfo] -> ClassInfo

-- | Specifies an implementation of an interface from the external library.
implementation :: String -> [MethodInfo] -> ClassInfo

-- | Specifies a constructor.
constructorInfo :: CodeFuncChunk -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a method.
methodInfo :: CodeFuncChunk -> Description -> [Parameter] -> Description -> [Step] -> MethodInfo

-- | Specifies a method that does not return anything.
methodInfoNoReturn :: CodeFuncChunk -> Description -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a statement where a current solution is appended to a
--   solution list.
appendCurrSol :: CodeExpr -> Step

-- | Specifies a statement where a solution list is populated by iterating
--   through a solution array.
populateSolList :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk -> [Step]

-- | Specifies statements where every index of an array is assigned a
--   value.
assignArrayIndex :: Step

-- | Specifies a statement where a solution is assigned from the field of
--   an object.
assignSolFromObj :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with the
--   first element of an array.
initSolListFromArray :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with the
--   first value.
initSolListWithVal :: Step

-- | A solve and populate loop. <a>FunctionInterface</a> for loop
--   condition, <tt>CodeChunk</tt> for solution object, <tt>CodeChunk</tt>
--   for independent var, <a>FunctionInterface</a> for solving,
--   <tt>CodeChunk</tt> for soln array to populate with.
solveAndPopulateWhile :: FunctionInterface -> CodeVarChunk -> CodeVarChunk -> FunctionInterface -> CodeVarChunk -> Step

-- | Specifies a statement where a list is returned, where each value of
--   the list is explicitly defined.
returnExprList :: Step

-- | Specifies a use-case-independent statement that returns a fixed value.
fixedReturn :: CodeExpr -> Step

-- | Specifies a use-case-dependent statement that returns a non-fixed
--   value.
fixedReturn' :: Step

-- | Specifies a statement where a single solution is initialized with a
--   value.
initSolWithVal :: Step

-- | External library call holds a group of step groups.
type ExternalLibraryCall = [StepGroupFill]

-- | Holds a group of steps (<a>StepFill</a>s). The Int is to "choose" from
--   the options in <tt>ExternalLibrary</tt>.
data StepGroupFill
SGF :: Int -> [StepFill] -> StepGroupFill

-- | Mirrors ExternalLibrary's <tt>Step</tt>. A StepFill can be a call to
--   an external library function or method.
data StepFill
CallF :: FunctionIntFill -> StepFill
LoopF :: NonEmpty FunctionIntFill -> [CodeExpr] -> NonEmpty StepFill -> StepFill
StatementF :: [CodeVarChunk] -> [CodeExpr] -> StepFill

-- | Mirrors ExternalLibrary's <tt>FunctionInterface</tt>.
newtype FunctionIntFill
FIF :: [ArgumentFill] -> FunctionIntFill

-- | Mirrors ExternalLibrary's <tt>ArgumentInfo</tt>. Determines the
--   context needed for an argument to work.
data ArgumentFill

-- | For arguments that are completely dependent on use case.
UserDefinedArgF :: Maybe NamedArgument -> CodeExpr -> ArgumentFill

-- | A basic function.
BasicF :: CodeExpr -> ArgumentFill

-- | Fills in the names for the unnamed parameters.
FnF :: [ParameterFill] -> StepFill -> ArgumentFill

-- | List of CodeChunk for state variables.
ClassF :: [StateVariable] -> ClassInfoFill -> ArgumentFill

-- | Fills in the field values.
RecordF :: [CodeExpr] -> ArgumentFill

-- | Mirrors ExternalLibrary's <tt>Parameter</tt>.
data ParameterFill
NameableParamF :: ParameterChunk -> ParameterFill
UserDefined :: ParameterChunk -> ParameterFill

-- | Mirrors ExternalLibrary's <tt>ClassInfo</tt>.
data ClassInfoFill
RegularF :: [MethodInfoFill] -> ClassInfoFill
ImplementsF :: [MethodInfoFill] -> ClassInfoFill

-- | Mirrors ExternalLibrary's <tt>MethodInfo</tt>.
data MethodInfoFill
CIF :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
MIF :: [ParameterFill] -> NonEmpty StepFill -> MethodInfoFill

-- | Constructs an ExternalLibraryCall specification.
externalLibCall :: [StepGroupFill] -> ExternalLibraryCall

-- | Corresponds to ExternalLibrary's <tt>choiceSteps</tt>. Provides the
--   index of the steps that should be used for the current use case.
choiceStepsFill :: Int -> [StepFill] -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>choiceStep</tt>. Provides the
--   index of the step that should be used for the current use case.
choiceStepFill :: Int -> StepFill -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>mandatorySteps</tt>.
mandatoryStepFill :: StepFill -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>mandatoryStep</tt>.
mandatoryStepsFill :: [StepFill] -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>callStep</tt>.
callStepFill :: FunctionIntFill -> StepFill

-- | Corresponds to any of ExternalLibrary's <tt>FunctionInterface</tt>
--   constructors.
libCallFill :: [ArgumentFill] -> FunctionIntFill

-- | Does not correspond to anything in ExternalLibrary. To be used when
--   the presence of an argument is only a consequence of the use case.
userDefinedArgFill :: CodeExpr -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>inlineArg</tt>,
--   <tt>inlineNamedArg</tt>, <tt>preDefinedArg</tt>, and
--   <tt>preDefinedNamedArg</tt>. Provides the <a>CodeExpr</a> for the
--   argument's value.
basicArgFill :: CodeExpr -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>functionArg</tt>.
functionArgFill :: [ParameterFill] -> StepFill -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>customObjArg</tt>. Provides the
--   list of state variables for the class that must be written in the
--   calling program.
customObjArgFill :: [StateVariable] -> ClassInfoFill -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>recordArg</tt>. Provides the list
--   of <a>CodeExpr</a>s for the values of the fields that must be set by
--   the calling program.
recordArgFill :: [CodeExpr] -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>unnamedParam</tt>. Provides the
--   <a>CodeVarChunk</a> representing the parameter.
unnamedParamFill :: CodeVarChunk -> ParameterFill

-- | Corresponds to ExternalLibrary's <tt>unnamedParam</tt>. Provides the
--   <a>CodeVarChunk</a> representing the parameter. Specifies that the
--   parameter is passed by value.
unnamedParamPBVFill :: CodeVarChunk -> ParameterFill

-- | Does not correspond to anything in ExternalLibrary. To be used when
--   the presence of a parameter is only a consequence of the use case.
userDefinedParamFill :: CodeVarChunk -> ParameterFill

-- | Corresponds to ExternalLibrary's <tt>customClass</tt>.
customClassFill :: [MethodInfoFill] -> ClassInfoFill

-- | Corresponds to ExternalLibrary's <tt>implementation</tt>.
implementationFill :: [MethodInfoFill] -> ClassInfoFill

-- | Corresponds to ExternalLibrary's <tt>constructorInfo</tt>. Provides
--   Variable-Value pairs for variables initialized by the constructor.
constructorInfoFill :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill

-- | Corresponds to ExternalLibrary's <tt>methodInfo</tt>.
methodInfoFill :: [ParameterFill] -> [StepFill] -> MethodInfoFill

-- | Corresponds to ExternalLibrary's <tt>appendCurrSol</tt>. Provides the
--   <a>CodeVarChunk</a> for the solution list.
appendCurrSolFill :: CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>populateSolList</tt>. Provides
--   the <a>CodeVarChunk</a> for the solution list.
populateSolListFill :: CodeVarChunk -> [StepFill]

-- | Corresponds to ExternalLibrary's <tt>assignArrayIndex</tt>. Provides
--   the <a>CodeVarChunk</a> for the array variable. Provides the
--   <a>CodeExpr</a>s for the values to assign to each array index.
assignArrayIndexFill :: CodeVarChunk -> [CodeExpr] -> StepFill

-- | Corresponds to ExternalLibrary's <tt>assignSolFromObj</tt>. Provides
--   the <a>CodeVarChunk</a> for the variable that the solution should be
--   assigned to.
assignSolFromObjFill :: CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>initSolListFromArray</tt>.
--   Provides the <a>CodeVarChunk</a> for the solution list.
initSolListFromArrayFill :: CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>initSolListWithVal</tt>. Provides
--   the <a>CodeVarChunk</a> for the solution list and the <a>CodeExpr</a>
--   for the initial element of the solution list
initSolListWithValFill :: CodeVarChunk -> CodeExpr -> StepFill

-- | Corresponds to ExternalLibrary's <tt>solveAndPopulateWhile</tt>.
--   Provides the <a>CodeExpr</a> for the upper bound in the while loop
--   condition and the <a>CodeVarChunk</a> for the solution list.
solveAndPopulateWhileFill :: FunctionIntFill -> CodeExpr -> FunctionIntFill -> CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>returnExprList</tt>. Provides the
--   list of <a>CodeExpr</a>s to return.
returnExprListFill :: [CodeExpr] -> StepFill

-- | Corresponds to ExternalLibrary's <tt>fixedReturn</tt>. No parameters
--   because the statement is not use-case-dependent.
fixedStatementFill :: StepFill

-- | Corresponds to ExternalLibrary's <tt>fixedReturn'</tt>.
--   use-case-specific a <a>CodeExpr</a> that parameterize the statement.
fixedStatementFill' :: CodeExpr -> StepFill

-- | Corresponds to ExternalLibrary's <tt>initSolWithVal</tt>. Provides the
--   <a>CodeVarChunk</a> for one solution and one <a>CodeExpr</a> for the
--   initial element of the solution list
initSolWithValFill :: CodeVarChunk -> CodeExpr -> StepFill

-- | Various OO languages where code may be generated.
data Lang
Cpp :: Lang
CSharp :: Lang
Java :: Lang
Python :: Lang
Swift :: Lang

-- | Members of this class must have all the information necessary for the
--   <a>AuxiliarySym</a> in addition to information necessary to create a
--   package.
class (AuxiliarySym r) => PackageSym r where {
    type Package r;
}
package :: PackageSym r => ProgData -> [r (Auxiliary r)] -> r (Package r)

-- | Members of this class must have a doxygen configuration, ReadMe file,
--   sample input, omptimize doxygen document, information necessary for a
--   makefile, auxiliary helper documents, and auxiliary from data
--   documents.
class AuxiliarySym r where {
    type Auxiliary r;
    type AuxHelper r;
}
doxConfig :: AuxiliarySym r => String -> GOOLState -> Verbosity -> r (Auxiliary r)
readMe :: AuxiliarySym r => ReadMeInfo -> r (Auxiliary r)
sampleInput :: AuxiliarySym r => ChunkDB -> DataDesc -> [Expr] -> r (Auxiliary r)
optimizeDox :: AuxiliarySym r => r (AuxHelper r)
makefile :: AuxiliarySym r => [FilePath] -> ImplementationType -> [Comments] -> GOOLState -> ProgData -> r (Auxiliary r)
auxHelperDoc :: AuxiliarySym r => r (AuxHelper r) -> Doc
auxFromData :: AuxiliarySym r => FilePath -> Doc -> r (Auxiliary r)

-- | The underlying data type for auxiliary files in all renderers.
data AuxData

-- | The underlying data type for packages in all renderers.
data PackData

-- | Basic chunk representation in the code generation context. Contains a
--   QuantityDict and the kind of code (variable or function).
data CodeChunk

-- | Chunk representing a variable. The <tt>obv</tt> field represents the
--   object containing this variable, if it is an object field.
data CodeVarChunk

-- | Chunk representing a function.
data CodeFuncChunk

-- | Construct a <a>CodeVarChunk</a> from a <a>Quantity</a>.
quantvar :: (Quantity c, MayHaveUnit c) => c -> CodeVarChunk

-- | Construct a <a>CodeFuncChunk</a> from a <a>Quantity</a>.
quantfunc :: (Quantity c, MayHaveUnit c) => c -> CodeFuncChunk

-- | Combine an Object-type <a>CodeChunk</a> with another <a>CodeChunk</a>
--   to create a new <a>CodeChunk</a> which represents a field of the
--   first. ex. <tt>ccObjVar obj f = obj.f</tt>.
ccObjVar :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk
listToArray :: CodeVarChunk -> CodeVarChunk

-- | Constructs a CodeExpr representing the field of an actor
field :: CodeExprC r => CodeVarChunk -> CodeVarChunk -> r

-- | Structure to hold ODE information.
data ODEInfo
ODEInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> [CodeExpr] -> [CodeExpr] -> ODEOptions -> ODEInfo

-- | Independent variable.
[indepVar] :: ODEInfo -> CodeVarChunk

-- | Dependent variable.
[depVar] :: ODEInfo -> CodeVarChunk

-- | Other variables in the ODE.
[otherVars] :: ODEInfo -> [CodeVarChunk]
[tInit] :: ODEInfo -> CodeExpr
[tFinal] :: ODEInfo -> CodeExpr

-- | Initial value of an ODE.
[initVal] :: ODEInfo -> [CodeExpr]

-- | ODE equations.
[odeSyst] :: ODEInfo -> [CodeExpr]

-- | Various options related to the ODE, including solution method, step
--   size, initial value of a second order ODE, etc.
[odeOpts] :: ODEInfo -> ODEOptions

-- | Basic <a>ODEInfo</a> constructor.
odeInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> [CodeExpr] -> [CodeExpr] -> ODEOptions -> ODEInfo

-- | Create ODEInfo with Other variables, ODEOptions, DifferentialModel,
--   and InitialValueProblem
odeInfo' :: [CodeVarChunk] -> ODEOptions -> DifferentialModel -> InitialValueProblem -> ODEInfo

-- | Other parameters for solving the ODE numerically
data ODEOptions
ODEOpts :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions

-- | Solution method.
[solveMethod] :: ODEOptions -> ODEMethod

-- | Absolute tolerance.
[absTol] :: ODEOptions -> CodeExpr

-- | Relative tolerance.
[relTol] :: ODEOptions -> CodeExpr

-- | Step size.
[stepSize] :: ODEOptions -> CodeExpr

-- | Basic <a>ODEOptions</a> constructor
odeOptions :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions

-- | Methods for solving ODEs. Includes Runge-Kutta 4-5, Backwards
--   Differentiation Formula, or Adams' method.
data ODEMethod
RK45 :: ODEMethod
BDF :: ODEMethod
Adams :: ODEMethod

-- | Holds an ODE library package.
data ODELibPckg
ODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> Maybe FilePath -> [Lang] -> ODELibPckg

-- | Library name.
[libName] :: ODELibPckg -> Name

-- | Version.
[libVers] :: ODELibPckg -> Version

-- | Library specifications.
[libSpec] :: ODELibPckg -> ExternalLibrary

-- | Library call.
[libCall] :: ODELibPckg -> ODEInfo -> ExternalLibraryCall

-- | Library path.
[libPath] :: ODELibPckg -> Maybe FilePath

-- | Compatible OO languages.
[compatibleLangs] :: ODELibPckg -> [Lang]

-- | Makes an <a>ODELibPckg</a> with the given name, <a>ExternalLibrary</a>
--   specification, <a>ExternalLibraryCall</a> specification parameterized
--   by an <a>ODEInfo</a>, local file path to the library, and list of
--   compatible languages.
mkODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> FilePath -> [Lang] -> ODELibPckg

-- | Makes an <a>ODELibPckg</a> with the given name, <a>ExternalLibrary</a>
--   specification, <a>ExternalLibraryCall</a> specification parameterized
--   by an <a>ODEInfo</a>, and list of compatible languages.
mkODELibNoPath :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> [Lang] -> ODELibPckg
unPP :: PythonProject a -> a
unJP :: JavaProject a -> a
unCSP :: CSharpProject a -> a
unCPPP :: CppProject a -> a
unSP :: SwiftProject a -> a

-- | Any quantity can be a named argument (wrapper for
--   <a>QuantityDict</a>), but with more of a focus on generating code
--   arguments.
data NamedArgument

-- | Smart constructor for <a>NamedArgument</a> .
narg :: (Quantity q, MayHaveUnit q) => q -> NamedArgument


-- | Define and collect information about ODEs and ODE solvers from various
--   libraries.
module Data.Drasil.ExternalLibraries.ODELibraries

-- | <a>SciPy</a> ODE library package.
scipyODEPckg :: ODELibPckg

-- | Collects variables needed for SciPy's ODEs as <a>QuantityDict</a>s.
scipyODESymbols :: [QuantityDict]

-- | <a>Oslo</a> ODE library package.
osloPckg :: ODELibPckg

-- | Collects variables needed for Oslo's ODEs as <a>QuantityDict</a>s.
osloSymbols :: [QuantityDict]

-- | Oslo's Vector type behaves like an array, so needs to be represented
--   as one or else will hit type errors in GOOL.
arrayVecDepVar :: ODEInfo -> CodeVarChunk

-- | <a>Apache Commons</a> ODE library package.
apacheODEPckg :: ODELibPckg

-- | Collects variables needed for Apache's ODEs as <a>QuantityDict</a>s.
apacheODESymbols :: [QuantityDict]

-- | <a>odeint</a> ODE library package.
odeintPckg :: ODELibPckg

-- | Collects variables needed for odeint's ODEs as <a>QuantityDict</a>s.
odeintSymbols :: [QuantityDict]
