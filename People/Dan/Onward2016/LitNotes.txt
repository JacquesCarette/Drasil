Best practices (WilsonEtAl2014 -- Newest? version).
  -Box 1 -> Great summary.
  -Very quotable (i.e. DRY principal we've previously mentioned)

Toward Sustainable Software (NIER Track) -> Amsel et al 2011
  -External sources mention "feature creep", "second-system effect", "software bloat" as recurring problems with upgraded software (could mention that Drasil will tend to avoid, as upgrading is actually re-generating, not just adding features)
  -Goal with sustainable SE: create better quality software ...
  -Not a very useful paper overall, but might be worth checking it's refs.
  
Adoption of Software Engineering Process Innovation: The Case of Object Orientation -> Fichman & Kenerer
  - Might be worth looking up Computer Aided Software Engineering (CASE)

Literate Programming Simplified -> Ramsey 1994
  - "Proliferation of LP tools made it hard for LP to enter the mainstream, but led to better understanding of what such tools should do"
  - Today field = more mature -> emerging demand for simple, easy to learn tools not tied to a particular language
  - noweb : Programs are composed of named chunks in any order w/ documentation interleaved.
  - "web's complexities" <- Good section for comparison points on web, noweb, etc.
  -- Feature comparison would be good to use.
  
Literate Software Development -> Al-Maati & Boujarwah 2002
  - Combines Box structures (see work by Harlan Mills) and LP
  - Software development is the science of abstractions (begins w/ high-level description and moves to more concrete; analysis phase -> coding phase).
  - Software Engineers continually stop & regroup between phases to comprehend/translate artifacts produced from the prior phase to the next
  - Translation typically involves creating separate & discrete artifacts requiring more effort to link the refinement of both together.
  - Major benefits of LP:
    1) encourages consistent & up-to-date docs
    2) makes program structure more visible to reader
    3) Greater understanding and maintainability
    4) Produces book format of software/doc
    5) encourages step-wise refinement
  - Limitations of LP:
    1) Not widely accepted b/c of lack of integration of LP into software development life cycle
    2) Inability of current (2002) LP system for specifying interfaces between modules
  - Box Structure - idea of views: system specs, design, code.
    - Each view is an abstraction in that it communicates the same info but in diff levels of detail & for diff purposes.
  Benefits of Box Structure:
    1) Software developed in stepwise refine/verify process leading to system design
    2) Single structure defines abstraction in 3 views
    3) based on function theory that permit analysis & design to be tightly coupled.
  Limitations:
    1) No decomposition of boxes
    2) No supportive tools (Deck [13] states need for more research and tools)
    3) Only for analysis & design -- results in high-level pseudocode.
  WebBox = tool using boxes and chunks
    - ADDITIONS: 
      1) new chunk types
      2) ability to refine into more chunks (and eventually Java)
      3) ability to specify interfaces and communication between boxes
      4) box decomposition at any level
      
Literate Programming - Knuth 1984
  - Obviously useful (we've quoted it before)
  - instruct humans what we want the computer to do, not just instructing computer.
  - Related work -> "web" is not new ideas, combined older ideas
    - Look into Holon Programming

Scientific Software Development viewed as knowledge acquisition ... - Kelly 2015
  - Highly useful introduction
    - Characterization of SC
      - Scientific domain specialist involved in software development
      - User has some minimum knowledge of the scientific domain
      - User receives all output of the software
      - software's primary purpose is to provide data for understanding specific real-world problems (i.e. model real-world stuff)
      - Trustworthiness ( /correctness) is the overriding software quality
  - Studies mentioned are good for setting up the "state of SC today"
  - Scientists = "end-user programmers" (they're not in the software business)
    - See Segal 2005 for differences / conflicts between SEs and scientists
    - "Process of creating software is highly iterative and unpredictable" [Ko et al. 2011]
  - Change from method-based view of software dev where product is software to a non-method view of software dev where the product is scientists' knowledge.
  - act of developing the software adds to the scientist's understanding
  - for the scientist: recording understanding after refinement is not only in the code, but also scientific reports & other products based on the scientist's acquired understanding.
  - Good stuff on knowledge domains (Table 1)
  - Also Fig 2 (knowledge acquisition model)
  - Section 5 has lots ('How scientists develop software outside the "methods" approach')
    - Scientists practices in readability reflected in SE tenets
      - Vars named w/ the goal to develop a common vocab that is consistent through the docs, code, and user manual
        - Naming conventions agreed on "by everyone"
      - "Documentation in code has to be very clean"
      - "Modularization should represent physical entities being modelled" - (one of the scientists surveyed)
      - Prefer to use programming languages that look like the mathematics of their theory, allowing simple transition
      - "Write on the assumption twenty years later you'll have to change it"
      
Literate Programming using noweb - Johnson & Johnson 2000
  - Good in-depth example of noweb in action
  - Conclusion makes good points on short-term investment for long-term gains
    - > initial effort = > quality = time saved in maintenance)
    
MathModelica - An Extensible Modeling ... with Integrated Graphics and Literate Programming - Fritzson, Gunnarrson, and Jirstrand 2002
  - Combines Mathematica with Modelica
  - Strictly used for modeling
  - Has an interactive wysiwyg realization of LP
  - Feels like we can get more out of this, not sure what.
  
AOPS: An Abstraction-Oriented Programming System for Literate Programming - Shum & Cook 1993
  - "[Programmers] generally keep [the thought process that led to the program] in auxiliary documents, if it is generated at all"
  - Web-like systems exist for C, C++, Smalltalk, Fortran
    - Extensions include hierarchically structured document description and programming environments.
  - LP not popular; Why?
    - Language/text processor dependent
    - Lack of flexibility on what to present/suppress (This is a great point!)
  - AOPS = Programming lang & text processor independent literate programming system
    - Write progs using levels of abstractions. Rules define highest lvl and all (in)directly used abstractions by that level.
      - A rule is structured as: Name (delimited by some otherwise unused character, ex: @) = type body
    - Fairly similar style to standard LP stuff like Web.
    - Adds graphicdoc rule (graphical documentation)
      - use word processor to compose graphics
  - AOPS Tools:
    - AOB (browser): Navigate source file by visiting nodes
    - AOL (lister): Produce a listing containing selected portions of any subtree of the program tree
      - When extracting requested code/doc, does not insert formatting commands
    - AOP (processor): Extracts program source code.
  - Phantom abstracting: Invisible to AOP, but helpful for understanding.
  - Experimentally found LP leads to better consistency between code and documentation
  
A Case for Contemporary Literate Programming - Pieterse, Kourie, and Boake 2004
  - LP Essentials -> program seen as doc explaining problem's sol'n to a human
  - LP leads to better programs (more elegant, effective, transportable, understandable, & maintainabile)
  - Literate Quality -> "The completed program is a literate work of art"
  - Psychological Order -> "different modules ... are arranged into a logical order that will enhance [the program's] understanding"
    - May be sig. diff from the order necessary for the computer.
  - Integrated Documentation -> Code/Doc developed simultaneously.
  - Cross references -> "Must have"
  - Versimilitude -> generation of code & doc from same source doc
  - Huge list of existing LP environments
    - lots of good stuff (too much?) in there like: WYSIWYG, Interactive code/debugging, elucidative programming, & theme-based LP.
  - Trends:
    - Much said about advantages of proper doc [Heyman 1990, Kotula 2000]
    - Much said about disadvantages of docs that don't match the system [Kotula 2000, Thimbleby 1986]
    - Javadoc widely accepted => less resistance to emphasis on documentation
    - IDEs support many LP essentials
    - Ream2002: example of an LP environment implementing XML technology to integrate different tools.
    
ProgDoc - a Program Documentation System - Simonis 2003
  - Good section on WEB drawbacks (pretty printing, extensibility, "one source")
  - Good section on Javadoc and the like
    - Stuck using Java & HTML as programming / typesetting languages (javadoc)
    - DOC++ is similar to Javadoc, but for C++
    - Doxygen can output to RTF, PDF, and Unix man-page
    - DOC++ & Doxygen can create graphs (dependency, call, etc.)
  - ProgDoc loses "one source" idea
    - Essentially composed of two tools: pdhighlight and pdweave
    
A Multi-Language Computing Environment for Literate Programming and Reproducible Research - Schulte et al. 2012
  - Decent background on LP and RR
  - Table 1 -> Great comparison of LP tools
  - Introduction to Org-Mode (emacs extension), supports:
    - Structured documents (hierarchy)
    - Metadata tagging
    - Special Content (matrices, code, vectors, etc.)
    - Code syntax (using #+name: where name is the name for the code chunk)
    - Evaluation -> evaluated output of code shown by default
    - Results -> Added to org-mode buffer using the #+results: tag
    - Weave to HTML/LaTeX
    - Tangle -> uses reference system identical to that of noweb
    - Programming language independence

What does Sustainability mean in and for Software Engineering - Penzenstadler 2013
  - Relevant section = 4 (maybe some part of 3 as well)
  - Improve software development process to improve sustainability
    - Use of a common artefact model during development increases maintainability
    - Producing energy aware software designs
    - (The other points didn't seem to fit with what we're doing)