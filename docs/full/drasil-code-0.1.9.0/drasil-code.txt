-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Code SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-code
@version 0.1.9.0

module Language.Drasil.Chunk.CodeBase

-- | Construct a <a>CodeVarChunk</a> from a <a>Quantity</a>.
quantvar :: (Quantity c, MayHaveUnit c) => c -> CodeVarChunk

-- | Construct a <a>CodeFuncChunk</a> from a <a>Quantity</a>.
quantfunc :: (Quantity c, MayHaveUnit c) => c -> CodeFuncChunk

-- | Get a list of <a>CodeChunk</a>s from an equation.
codevars :: CodeExpr -> ChunkDB -> [CodeVarChunk]

-- | Get a list of <a>CodeChunk</a>s from an equation (no functions).
codevars' :: CodeExpr -> ChunkDB -> [CodeVarChunk]

-- | Make a <a>CodeVarChunk</a> from a <a>UID</a> in the <a>ChunkDB</a>.
varResolve :: ChunkDB -> UID -> CodeVarChunk

-- | Make a <a>CodeFuncChunk</a> from a <a>UID</a> in the <a>ChunkDB</a>.
funcResolve :: ChunkDB -> UID -> CodeFuncChunk


-- | Defines chunk types for use in code generation.
module Language.Drasil.Chunk.Code

-- | A <a>CodeIdea</a> must include some code and its name.
class () => CodeIdea c

-- | Name of the idea.
codeName :: CodeIdea c => c -> String

-- | Code chunk associated with the idea.
codeChunk :: CodeIdea c => c -> CodeChunk

-- | Basic chunk representation in the code generation context. Contains a
--   QuantityDict and the kind of code (variable or function).
data () => CodeChunk
CodeC :: QuantityDict -> VarOrFunc -> CodeChunk
[_qc] :: CodeChunk -> QuantityDict
[kind] :: CodeChunk -> VarOrFunc

-- | Chunk representing a variable. The <tt>obv</tt> field represents the
--   object containing this variable, if it is an object field.
data () => CodeVarChunk
CodeVC :: CodeChunk -> Maybe CodeChunk -> CodeVarChunk
[_ccv] :: CodeVarChunk -> CodeChunk
[_obv] :: CodeVarChunk -> Maybe CodeChunk

-- | Chunk representing a function.
newtype () => CodeFuncChunk
CodeFC :: CodeChunk -> CodeFuncChunk
[_ccf] :: CodeFuncChunk -> CodeChunk

-- | Details if a piece of code is meant to be a variable or a function.
data () => VarOrFunc
Var :: VarOrFunc
Func :: VarOrFunc
obv :: Lens' CodeVarChunk (Maybe CodeChunk)

-- | Construct a <a>CodeVarChunk</a> from a <a>Quantity</a>.
quantvar :: (Quantity c, MayHaveUnit c) => c -> CodeVarChunk

-- | Construct a <a>CodeFuncChunk</a> from a <a>Quantity</a>.
quantfunc :: (Quantity c, MayHaveUnit c) => c -> CodeFuncChunk

-- | Combine an Object-type <a>CodeChunk</a> with another <a>CodeChunk</a>
--   to create a new <a>CodeChunk</a> which represents a field of the
--   first. ex. <tt>ccObjVar obj f = obj.f</tt>.
ccObjVar :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk

-- | Get a list of <a>CodeChunk</a>s from an equation.
codevars :: CodeExpr -> ChunkDB -> [CodeVarChunk]

-- | Get a list of <a>CodeChunk</a>s from an equation (no functions).
codevars' :: CodeExpr -> ChunkDB -> [CodeVarChunk]

-- | Make a <a>CodeFuncChunk</a> from a <a>UID</a> in the <a>ChunkDB</a>.
funcResolve :: ChunkDB -> UID -> CodeFuncChunk

-- | Make a <a>CodeVarChunk</a> from a <a>UID</a> in the <a>ChunkDB</a>.
varResolve :: ChunkDB -> UID -> CodeVarChunk
listToArray :: CodeVarChunk -> CodeVarChunk

-- | Convert an abbreviation into one deemed 'code-friendly', removing
--   spaces, and replacing special characters with underscores.
--   
--   FIXME: This should NOT be treated as a <tt>getter</tt>, but something
--   we cache local to something that has a 'program name'.
programName :: CommonIdea c => c -> String

-- | Used when a function name needs to be distinguishable from a variable
--   name.
funcPrefix :: String

-- | A <a>DefiningCodeExpr</a> must have it's underlying chunk defined in
--   the CodeExpr language.
class CodeIdea c => DefiningCodeExpr c
codeExpr :: DefiningCodeExpr c => Lens' c CodeExpr
instance Language.Drasil.Chunk.CodeVar.CodeIdea Language.Drasil.Chunk.CodeVar.CodeChunk
instance Language.Drasil.Chunk.CodeVar.CodeIdea Language.Drasil.Chunk.CodeVar.CodeVarChunk
instance Language.Drasil.Chunk.CodeVar.CodeIdea Language.Drasil.Chunk.CodeVar.CodeFuncChunk

module Language.Drasil.Chunk.ConstraintMap

-- | Constraints map. Contains all <a>Constraint</a>s.
type ConstraintCEMap = Map UID [ConstraintCE]

-- | Type synonym for 'Constraint CodeExpr'
type ConstraintCE = Constraint CodeExpr

-- | Creates a map from <a>UID</a> to <a>Constraint</a>s for constrained
--   chunks.
constraintMap :: (HasUID c, Constrained c) => [c] -> ConstraintCEMap

-- | Returns a pair of a chunk and its physical constraints.
physLookup :: HasUID q => ConstraintCEMap -> q -> (q, [ConstraintCE])

-- | Returns a pair of a chunk and its software constraints.
sfwrLookup :: HasUID q => ConstraintCEMap -> q -> (q, [ConstraintCE])


-- | Named arguments used in generating code.
module Language.Drasil.Chunk.NamedArgument

-- | Any quantity can be a named argument (wrapper for
--   <a>QuantityDict</a>), but with more of a focus on generating code
--   arguments.
newtype NamedArgument
NA :: QuantityDict -> NamedArgument
[_qtd] :: NamedArgument -> QuantityDict

-- | Smart constructor for <a>NamedArgument</a> .
narg :: (Quantity q, MayHaveUnit q) => q -> NamedArgument
instance Language.Drasil.UID.HasUID Language.Drasil.Chunk.NamedArgument.NamedArgument
instance Language.Drasil.Chunk.NamedIdea.NamedIdea Language.Drasil.Chunk.NamedArgument.NamedArgument
instance Language.Drasil.Chunk.NamedIdea.Idea Language.Drasil.Chunk.NamedArgument.NamedArgument
instance Language.Drasil.Space.HasSpace Language.Drasil.Chunk.NamedArgument.NamedArgument
instance Language.Drasil.Symbol.HasSymbol Language.Drasil.Chunk.NamedArgument.NamedArgument
instance Language.Drasil.Classes.Quantity Language.Drasil.Chunk.NamedArgument.NamedArgument
instance Language.Drasil.Classes.IsArgumentName Language.Drasil.Chunk.NamedArgument.NamedArgument
instance GHC.Classes.Eq Language.Drasil.Chunk.NamedArgument.NamedArgument
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Language.Drasil.Chunk.NamedArgument.NamedArgument

module Language.Drasil.Chunk.Parameter

-- | Determines whether a parameter is passed by value or by reference.
data PassBy
Val :: PassBy
Ref :: PassBy

-- | Chunk representing a parameter.
data ParameterChunk
PC :: CodeChunk -> PassBy -> ParameterChunk
[_pcc] :: ParameterChunk -> CodeChunk
[passBy] :: ParameterChunk -> PassBy

-- | Automatically chooses <a>PassBy</a> based on <a>Space</a>
--   (<a>Vect</a>ors and <a>Actor</a>s passed by reference).
pcAuto :: CodeIdea c => c -> ParameterChunk

-- | Constructs a pass-by-value parameter.
pcVal :: CodeIdea c => c -> ParameterChunk
instance Language.Drasil.UID.HasUID Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Chunk.NamedIdea.NamedIdea Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Chunk.NamedIdea.Idea Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Space.HasSpace Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Symbol.HasSymbol Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Classes.Quantity Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Chunk.CodeVar.CodeIdea Language.Drasil.Chunk.Parameter.ParameterChunk
instance GHC.Classes.Eq Language.Drasil.Chunk.Parameter.ParameterChunk
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Language.Drasil.Chunk.Parameter.ParameterChunk


-- | Defines the <a>Code</a> data type.
module Language.Drasil.Code.Code

-- | Represents the generated code as a list of file names and rendered
--   code pairs.
newtype Code
Code :: [(FilePath, Doc)] -> Code
[unCode] :: Code -> [(FilePath, Doc)]

-- | Default mapping between <tt>Space</tt> and <a>CodeType</a>.
spaceToCodeType :: Space -> [CodeType]


-- | Defines QuantityDicts needed in the code generation stage.
module Language.Drasil.Code.CodeQuantityDicts

-- | Variable for the input file's name.
inFileName :: QuantityDict

-- | Variable for an object of the InputParameters class.
inParams :: QuantityDict

-- | Variable for an object of the Constants class.
consts :: QuantityDict

module Language.Drasil.Code.DataDesc

-- | A <a>DataItem</a> is just a <a>CodeVarChunk</a> (a piece of data).
type DataItem = CodeVarChunk

-- | A data description either has data connected to other pieces of data,
--   or a single piece of data.
data DataDesc'
DD :: Data' -> Delimiter -> DataDesc' -> DataDesc'
End :: Data' -> DataDesc'
data Data'

-- | Single data item. | To be used in cases where multiple list-type data
--   have their elements intermixed, and thus need to be described
--   together.
Datum :: DataItem' -> Data'
Data :: NonEmpty DataItem' -> Integer -> Delimiter -> Data'

-- | Data that can be ignored/skipped over.
Junk :: Data'

-- | A piece of data that contains the datum described and delimeters
--   between elements. The size of the list of delimiters should be equal
--   to the dimension of datum.
data DataItem'
DI :: CodeVarChunk -> [Delimiter] -> DataItem'

-- | Delimiter between elements of data.
type Delimiter = String

-- | Organize a list of data with a given <a>Delimiter</a> into a
--   <a>DataDesc'</a>.
dataDesc :: [Data'] -> Delimiter -> DataDesc'

-- | Constructor for creating a single datum.
singleton' :: CodeVarChunk -> Data'

-- | Constructor for creating data from a description of the data and a
--   list of delimiters with a size equal to the dimension.
list :: CodeVarChunk -> [Delimiter] -> Data'

-- | Weaves elements of data together given a list of data items, a degree
--   of intermixing, and a delimiter for the data.
interwovenLists :: [DataItem'] -> Integer -> Delimiter -> Data'

-- | Constructor for data that should be skipped.
junk :: Data'

-- | Older version of <a>DataDesc'</a>. Holds a list of <a>Data'</a>.
type DataDesc = [Data]

-- | Older version of <a>Delimiter</a>. Holds a <a>Char</a>.
type Delim = Char

-- | Older version of <a>Data'</a>.
data Data

-- | Single datum.
Singleton :: DataItem -> Data

-- | Junk data (can be skipped).
JunkData :: Data

-- | Single-line pattern of data with a delimiter.
Line :: LinePattern -> Delim -> Data

-- | Multi-line data. <tt>Maybe Int</tt> determines the number of lines. If
--   it is Nothing, then it is unknown so go to end of file. | Determines
--   the pattern of data.
Lines :: LinePattern -> Maybe Integer -> Delim -> Data
data LinePattern

-- | Line of data with no pattern.
Straight :: [DataItem] -> LinePattern

-- | Line of data with repeated pattern.
Repeat :: [DataItem] -> LinePattern

-- | Constructor for a single datum.
singleton :: DataItem -> Data

-- | Constructor for junk data.
junkLine :: Data

-- | Constructor for a single line of data.
singleLine :: LinePattern -> Delim -> Data

-- | Constructor for an unknown amount of lines of data.
multiLine :: LinePattern -> Delim -> Data

-- | Constructor for multi-line data with a specified number of lines.
multiLine' :: LinePattern -> Integer -> Delim -> Data

-- | Constructor for data with no pattern.
straight :: [DataItem] -> LinePattern

-- | Constructor for data with a repeated pattern.
repeated :: [DataItem] -> LinePattern

-- | Checks if a piece of <a>Data'</a> is <a>JunkData</a>.
isJunk :: Data -> Bool

-- | Checks if a piece of <a>Data'</a> is only a single line.
isLine :: Data -> Bool

-- | Checks if a piece of <a>Data'</a> is multi-line.
isLines :: Data -> Bool

-- | Gets the data inputs from a <a>DataDesc</a>.
getInputs :: DataDesc -> [DataItem]

-- | Helper that gets data inputs from <a>Data'</a>.
getDataInputs :: Data -> [DataItem]

-- | Helper that gets the data inputs from single-line or multi-line data.
getPatternInputs :: LinePattern -> [DataItem]

module Language.Drasil.Code.Imperative.Build.AST

-- | Used to build commands. Type synonym of a <a>MakeString</a> for
--   clarity.
type CommandFragment = MakeString

-- | Type for holding the build name.
data BuildName
BMain :: BuildName
BPackName :: BuildName
BPack :: BuildName -> BuildName
BWithExt :: BuildName -> Ext -> BuildName

-- | File extentions.
data Ext
CodeExt :: Ext
OtherExt :: MakeString -> Ext

-- | Builds may only require themselves or have a dependency.
data BuildDependencies
BcSource :: BuildDependencies
BcSingle :: BuildName -> BuildDependencies

-- | Build configuration. In the function parameter, the first parameter is
--   the list of inputs, 2nd parameter is the output file, 3rd parameter is
--   additional name if needed. The two <a>Maybe</a> <a>BuildName</a>s are
--   the output file and the additional name. Also holds the build
--   dependencies.
data BuildConfig
BuildConfig :: ([CommandFragment] -> CommandFragment -> CommandFragment -> [BuildCommand]) -> Maybe BuildName -> Maybe BuildName -> BuildDependencies -> BuildConfig

-- | Run commands as they are or through an interpreter.
data RunType
Standalone :: RunType
Interpreter :: [CommandFragment] -> RunType

-- | Contains all the information needed to run a command.
data Runnable
Runnable :: BuildName -> NameOpts -> RunType -> Runnable

-- | Configures a document based on dependencies and commands.
data DocConfig
DocConfig :: Dependencies -> [Command] -> DocConfig

-- | Naming options. Includes a package separator and an option for
--   including extensions.
data NameOpts
NameOpts :: String -> Bool -> NameOpts
[packSep] :: NameOpts -> String
[includeExt] :: NameOpts -> Bool

-- | Default name options. Packages separately by "/" and includes
--   extension.
nameOpts :: NameOpts

-- | Build commands. Made up of <a>CommandFragment</a>s.
type BuildCommand = [CommandFragment]

-- | Interpreter commands are made up of a <a>String</a>.
type InterpreterCommand = String

-- | Interpreter options are made up of a <a>String</a>.
type InterpreterOption = String

-- | Translates a <a>String</a> into a command fragment.
asFragment :: String -> CommandFragment

-- | OS default variable (Windows). Calls <a>mkWindowsVar</a>.
osClassDefault :: String -> String -> String -> CommandFragment

-- | Constructor for a build configuration. No additional name included.
buildAll :: ([CommandFragment] -> CommandFragment -> [BuildCommand]) -> BuildName -> Maybe BuildConfig

-- | Constructor for a build configuration with an additional name
--   included.
buildAllAdditionalName :: ([CommandFragment] -> CommandFragment -> CommandFragment -> [BuildCommand]) -> BuildName -> BuildName -> Maybe BuildConfig

-- | Constructor for a build configuration. No additional name included,
--   but takes in a single dependency.
buildSingle :: ([CommandFragment] -> CommandFragment -> [BuildCommand]) -> BuildName -> BuildName -> Maybe BuildConfig

-- | Default runnable information.
nativeBinary :: Maybe Runnable

-- | Default target extension is ".exe".
executable :: BuildName

-- | Default library has the extentions ".dll, .dylib, .so".
sharedLibrary :: BuildName

-- | Constructor for a runnable command that goes through an interpreter.
interp :: BuildName -> NameOpts -> InterpreterCommand -> [InterpreterOption] -> Maybe Runnable

-- | Constructs a runnable command that goes through an interpreter (for
--   main module file).
interpMM :: InterpreterCommand -> Maybe Runnable

-- | Main module.
mainModule :: BuildName

-- | Main module with a default code extension.
mainModuleFile :: BuildName

-- | Module for an in-code package.
inCodePackage :: BuildName -> BuildName

-- | Adds an extension to a <a>BuildName</a>.
withExt :: BuildName -> String -> BuildName

-- | C compiler command fragment.
cCompiler :: CommandFragment

-- | C++ compiler command fragment.
cppCompiler :: CommandFragment

-- | Helper for configuring doxygen documentation.
doxygenDocConfig :: FilePath -> DocConfig

module Language.Drasil.Code.Imperative.Build.Import

-- | Creates a Makefile.
makeBuild :: Maybe DocConfig -> Maybe BuildConfig -> Maybe Runnable -> GOOLState -> ProgData -> Doc
instance Build.Drasil.Make.Import.RuleTransformer Language.Drasil.Code.Imperative.Build.Import.CodeHarness


-- | Defines the underlying data types used in the package extension.
module Language.Drasil.Code.Imperative.GOOL.Data

-- | The underlying data type for auxiliary files in all renderers.
data AuxData

-- | Constructor for auxiliary files.
ad :: FilePath -> Doc -> AuxData

-- | The underlying data type for packages in all renderers.
data PackData

-- | Constructor for package data.
packD :: ProgData -> [AuxData] -> PackData


-- | Contains the high-level functionality to create <a>Code</a> and then
--   produce the actual generated code files.
module Language.Drasil.Code.CodeGeneration

-- | Makes code from <a>FileData</a> (<a>FilePath</a>s with module data)
--   and <a>AuxData</a> (<a>FilePath</a>s with auxiliary document
--   information).
makeCode :: [FileData] -> [AuxData] -> Code

-- | Creates the requested <a>Code</a> by producing files.
createCodeFiles :: Code -> IO ()

module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer

-- | "doxConfig".
--   
--   Common syntax for several renderers.
doxConfigName :: String

-- | "Makefile".
--   
--   Common syntax for several renderers.
makefileName :: String

-- | "input.txt".
--   
--   Common syntax for several renderers.
sampleInputName :: String

-- | "README.md".
--   
--   Common syntax for several renderers.
readMeName :: String


-- | Defines functions for reading values from a file corresponding to a
--   DataDesc
module Language.Drasil.Code.Imperative.ReadInput

-- | Defines the DataDesc for the file containing a sample data set, which
--   a user must supply if they want to generate a sample input file.
sampleInputDD :: [CodeVarChunk] -> DataDesc'

-- | Reads data from a file and converts the values to <a>Expr</a>s. The
--   file must be formatted according to the <a>DataDesc'</a> passed as a
--   parameter.
readWithDataDesc :: FilePath -> DataDesc' -> IO [Expr]

module Language.Drasil.Code.Imperative.WriteInput

-- | Generate a sample input file.
makeInputFile :: ChunkDB -> DataDesc -> [Expr] -> Doc


-- | Defines an enumerated type of target languages for code generation.
module Language.Drasil.Code.Lang

-- | Various OO languages where code may be generated.
data Lang
Cpp :: Lang
CSharp :: Lang
Java :: Lang
Python :: Lang
Swift :: Lang
Julia :: Lang
instance GHC.Show.Show Language.Drasil.Code.Lang.Lang
instance GHC.Classes.Eq Language.Drasil.Code.Lang.Lang


-- | Defines a structure to contain scientifically-relevant information
--   about an ODE.
module Language.Drasil.Data.ODEInfo

-- | Structure to hold ODE information.
data ODEInfo
ODEInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> [CodeExpr] -> [CodeExpr] -> ODEOptions -> ODEInfo

-- | Independent variable.
[indepVar] :: ODEInfo -> CodeVarChunk

-- | Dependent variable.
[depVar] :: ODEInfo -> CodeVarChunk

-- | Other variables in the ODE.
[otherVars] :: ODEInfo -> [CodeVarChunk]
[tInit] :: ODEInfo -> CodeExpr
[tFinal] :: ODEInfo -> CodeExpr

-- | Initial value of an ODE.
[initVal] :: ODEInfo -> [CodeExpr]

-- | ODE equations.
[odeSyst] :: ODEInfo -> [CodeExpr]

-- | Various options related to the ODE, including solution method, step
--   size, initial value of a second order ODE, etc.
[odeOpts] :: ODEInfo -> ODEOptions

-- | Basic <a>ODEInfo</a> constructor.
odeInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> [CodeExpr] -> [CodeExpr] -> ODEOptions -> ODEInfo

-- | Create ODEInfo with Other variables, ODEOptions, DifferentialModel,
--   and InitialValueProblem
odeInfo' :: [CodeVarChunk] -> ODEOptions -> DifferentialModel -> InitialValueProblem -> ODEInfo

-- | Other parameters for solving the ODE numerically
data ODEOptions
ODEOpts :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions

-- | Solution method.
[solveMethod] :: ODEOptions -> ODEMethod

-- | Absolute tolerance.
[absTol] :: ODEOptions -> CodeExpr

-- | Relative tolerance.
[relTol] :: ODEOptions -> CodeExpr

-- | Step size.
[stepSize] :: ODEOptions -> CodeExpr

-- | Basic <a>ODEOptions</a> constructor
odeOptions :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions

-- | Methods for solving ODEs. Includes Runge-Kutta 4-5, Backwards
--   Differentiation Formula, or Adams' method.
data ODEMethod
RK45 :: ODEMethod
BDF :: ODEMethod
Adams :: ODEMethod

module Language.Drasil.Chunk.CodeDefinition

-- | A chunk for pairing a mathematical definition with a <a>CodeChunk</a>.
data CodeDefinition

-- | The definition may be specialized to use ODEs.
data DefinitionType
Definition :: DefinitionType
ODE :: DefinitionType

-- | Constructs a <a>CodeDefinition</a> where the underlying
--   <a>CodeChunk</a> is for a function.
qtoc :: (Quantity (q Expr), MayHaveUnit (q Expr), DefiningExpr q) => q Expr -> CodeDefinition

-- | Constructs a <a>CodeDefinition</a> where the underlying
--   <a>CodeChunk</a> is for a variable.
qtov :: CanGenCode e => QDefinition e -> CodeDefinition

-- | Constructs a <a>CodeDefinition</a> for an ODE.
odeDef :: ODEInfo -> CodeDefinition
auxExprs :: Lens' CodeDefinition [CodeExpr]
defType :: Lens' CodeDefinition DefinitionType
instance Language.Drasil.UID.HasUID Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Chunk.NamedIdea.NamedIdea Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Chunk.NamedIdea.Idea Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Space.HasSpace Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Symbol.HasSymbol Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Classes.Quantity Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Chunk.CodeVar.CodeIdea Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance GHC.Classes.Eq Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Language.Drasil.Chunk.CodeDefinition.CodeDefinition
instance Language.Drasil.Chunk.CodeVar.DefiningCodeExpr Language.Drasil.Chunk.CodeDefinition.CodeDefinition


-- | Defines an AST for defining Modules.
module Language.Drasil.Mod

-- | Holds information needed to define a class.
data Class
ClassDef :: Name -> Maybe Name -> Description -> [StateVariable] -> [Func] -> [Func] -> Class
[className] :: Class -> Name
[implements] :: Class -> Maybe Name
[classDesc] :: Class -> Description
[stateVars] :: Class -> [StateVariable]
[constructors] :: Class -> [Func]
[methods] :: Class -> [Func]

-- | State variables hold attach a <a>VisibilityTag</a> to a
--   <a>CodeVarChunk</a>.
data StateVariable
SV :: VisibilityTag -> CodeVarChunk -> StateVariable
[svVisibility] :: StateVariable -> VisibilityTag
[stVar] :: StateVariable -> CodeVarChunk

-- | Holds a function definition or function data.
data Func
FDef :: FuncDef -> Func
FData :: FuncData -> Func

-- | Function data. Holds a name, description, and pieces of data with its
--   own description.
data FuncData
[FuncData] :: Name -> Description -> DataDesc -> FuncData

-- | Defines a function.
data FuncDef

-- | Parameters are: Name, description, parameters, return type, return
--   description, statements.
[FuncDef] :: Name -> Description -> [ParameterChunk] -> Space -> Maybe Description -> [FuncStmt] -> FuncDef
[CtorDef] :: Name -> Description -> [ParameterChunk] -> [Initializer] -> [FuncStmt] -> FuncDef
data FuncStmt
[FAsg] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FAsgIndex] :: CodeVarChunk -> Integer -> CodeExpr -> FuncStmt

-- | For-loop; Variable, Start, Stop, Step, Body.
[FFor] :: CodeVarChunk -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt
[FForEach] :: CodeVarChunk -> CodeExpr -> [FuncStmt] -> FuncStmt
[FWhile] :: CodeExpr -> [FuncStmt] -> FuncStmt
[FCond] :: CodeExpr -> [FuncStmt] -> [FuncStmt] -> FuncStmt
[FRet] :: CodeExpr -> FuncStmt
[FThrow] :: String -> FuncStmt
[FTry] :: [FuncStmt] -> [FuncStmt] -> FuncStmt
[FContinue] :: FuncStmt
[FDecDef] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FFuncDef] :: CodeFuncChunk -> [ParameterChunk] -> [FuncStmt] -> FuncStmt
[FVal] :: CodeExpr -> FuncStmt
[FMulti] :: [FuncStmt] -> FuncStmt
[FAppend] :: CodeExpr -> CodeExpr -> FuncStmt

-- | Variable-value pair.
type Initializer = (CodeVarChunk, CodeExpr)

-- | Holds module information.
data Mod
Mod :: Name -> Description -> [Import] -> [Class] -> [Func] -> Mod

-- | Type synonym for clarity.
type Name = String

-- | Type synonym for clarity.
type Version = String

-- | Type synonym for clarity.
type Description = String

-- | Type synonym for clarity.
type Import = String

-- | Define an assignment statement.
($:=) :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt

-- | Define a public state variable based on the given <a>CodeVarChunk</a>.
pubStateVar :: CodeVarChunk -> StateVariable

-- | Define a private state variable based on the given
--   <a>CodeVarChunk</a>.
privStateVar :: CodeVarChunk -> StateVariable

-- | Define a class with the given <a>Name</a>, <a>Description</a>, state
--   variables, and methods.
classDef :: Name -> Description -> [StateVariable] -> [Func] -> [Func] -> Class

-- | Define a class that implements an interface. 1st <a>Name</a> is class
--   name, 2nd is interface name.
classImplements :: Name -> Name -> Description -> [StateVariable] -> [Func] -> [Func] -> Class

-- | Define a constructor, with the given name, description, parameters,
--   initializers (variable-value pairs), and <a>FuncStmt</a>s for the
--   body.
ctorDef :: Name -> Description -> [ParameterChunk] -> [Initializer] -> [FuncStmt] -> Func

-- | Define a for-loop. <a>Quantity</a> is for the iteration variable,
--   <a>CodeExpr</a> is the upper bound at that variable (the variable will
--   start with a value of 0). [<a>FuncStmt</a>] is for the loop body.
ffor :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a for-loop. <a>Quantity</a> is for the iteration variable, and
--   3 <a>CodeExpr</a>s for the start, stop, step numbers.
--   [<a>FuncStmt</a>] is for the loop body.
fforRange :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a declare-define statement.
fDecDef :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt

-- | Gets the name of a function.
fname :: Func -> Name

-- | Returns the list of <a>CodeVarChunk</a>s that are used in the list of
--   <a>FuncStmt</a>s but are not declared in any of the <a>FuncStmt</a>s.
fstdecl :: ChunkDB -> [FuncStmt] -> [CodeVarChunk]

-- | Define a function that reads data from a file, according to the given
--   <a>DataDesc</a>.
funcData :: Name -> Description -> DataDesc -> Func

-- | Define a function by providing the <a>FuncStmt</a>s for its body.
--   Other parameters are function name, description, list of parameters,
--   space of the returned value, and description of the returned value.
funcDef :: (Quantity c, MayHaveUnit c) => Name -> Description -> [c] -> Space -> Maybe Description -> [FuncStmt] -> Func

-- | Like <a>funcDef</a> but uses <a>ParameterChunk</a>s to represent the
--   parameters.
funcDefParams :: Name -> Description -> [ParameterChunk] -> Space -> Maybe Description -> [FuncStmt] -> Func

-- | Define a <a>Mod</a> with the given <a>Name</a>, <a>Description</a>,
--   <tt>Classes</tt>, and <tt>Functions</tt>.
packmod :: Name -> Description -> [Class] -> [Func] -> Mod

-- | Define a <a>Mod</a> that requires some library imports, with the given
--   Name, Description, Classes, and Functions.
packmodRequires :: Name -> Description -> [Import] -> [Class] -> [Func] -> Mod


-- | Defines an AST to be paired with an ExternalLibrary for a specific
--   use-case
module Language.Drasil.Code.ExternalLibraryCall

-- | External library call holds a group of step groups.
type ExternalLibraryCall = [StepGroupFill]

-- | Holds a group of steps (<a>StepFill</a>s). The Int is to "choose" from
--   the options in <tt>ExternalLibrary</tt>.
data StepGroupFill
SGF :: Int -> [StepFill] -> StepGroupFill

-- | Mirrors ExternalLibrary's <tt>Step</tt>. A StepFill can be a call to
--   an external library function or method.
data StepFill
CallF :: FunctionIntFill -> StepFill
LoopF :: NonEmpty FunctionIntFill -> [CodeExpr] -> NonEmpty StepFill -> StepFill
StatementF :: [CodeVarChunk] -> [CodeExpr] -> StepFill

-- | Mirrors ExternalLibrary's <tt>FunctionInterface</tt>.
newtype FunctionIntFill
FIF :: [ArgumentFill] -> FunctionIntFill

-- | Mirrors ExternalLibrary's <tt>ArgumentInfo</tt>. Determines the
--   context needed for an argument to work.
data ArgumentFill

-- | For arguments that are completely dependent on use case.
UserDefinedArgF :: Maybe NamedArgument -> CodeExpr -> ArgumentFill

-- | A basic function.
BasicF :: CodeExpr -> ArgumentFill

-- | Fills in the names for the unnamed parameters.
FnF :: [ParameterFill] -> StepFill -> ArgumentFill

-- | List of CodeChunk for state variables.
ClassF :: [StateVariable] -> ClassInfoFill -> ArgumentFill

-- | Fills in the field values.
RecordF :: [CodeExpr] -> ArgumentFill

-- | Mirrors ExternalLibrary's <tt>Parameter</tt>.
data ParameterFill
NameableParamF :: ParameterChunk -> ParameterFill
UserDefined :: ParameterChunk -> ParameterFill

-- | Mirrors ExternalLibrary's <tt>ClassInfo</tt>.
data ClassInfoFill
RegularF :: [MethodInfoFill] -> ClassInfoFill
ImplementsF :: [MethodInfoFill] -> ClassInfoFill

-- | Mirrors ExternalLibrary's <tt>MethodInfo</tt>.
data MethodInfoFill
CIF :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
MIF :: [ParameterFill] -> NonEmpty StepFill -> MethodInfoFill

-- | Constructs an ExternalLibraryCall specification.
externalLibCall :: [StepGroupFill] -> ExternalLibraryCall

-- | Corresponds to ExternalLibrary's <tt>choiceSteps</tt>. Provides the
--   index of the steps that should be used for the current use case.
choiceStepsFill :: Int -> [StepFill] -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>choiceStep</tt>. Provides the
--   index of the step that should be used for the current use case.
choiceStepFill :: Int -> StepFill -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>mandatorySteps</tt>.
mandatoryStepFill :: StepFill -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>mandatoryStep</tt>.
mandatoryStepsFill :: [StepFill] -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>callStep</tt>.
callStepFill :: FunctionIntFill -> StepFill

-- | Corresponds to any of ExternalLibrary's <tt>FunctionInterface</tt>
--   constructors.
libCallFill :: [ArgumentFill] -> FunctionIntFill

-- | Does not correspond to anything in ExternalLibrary. To be used when
--   the presence of an argument is only a consequence of the use case.
userDefinedArgFill :: CodeExpr -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>inlineArg</tt>,
--   <tt>inlineNamedArg</tt>, <tt>preDefinedArg</tt>, and
--   <tt>preDefinedNamedArg</tt>. Provides the <a>CodeExpr</a> for the
--   argument's value.
basicArgFill :: CodeExpr -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>functionArg</tt>.
functionArgFill :: [ParameterFill] -> StepFill -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>customObjArg</tt>. Provides the
--   list of state variables for the class that must be written in the
--   calling program.
customObjArgFill :: [StateVariable] -> ClassInfoFill -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>recordArg</tt>. Provides the list
--   of <a>CodeExpr</a>s for the values of the fields that must be set by
--   the calling program.
recordArgFill :: [CodeExpr] -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>unnamedParam</tt>. Provides the
--   <a>CodeVarChunk</a> representing the parameter.
unnamedParamFill :: CodeVarChunk -> ParameterFill

-- | Corresponds to ExternalLibrary's <tt>unnamedParam</tt>. Provides the
--   <a>CodeVarChunk</a> representing the parameter. Specifies that the
--   parameter is passed by value.
unnamedParamPBVFill :: CodeVarChunk -> ParameterFill

-- | Does not correspond to anything in ExternalLibrary. To be used when
--   the presence of a parameter is only a consequence of the use case.
userDefinedParamFill :: CodeVarChunk -> ParameterFill

-- | Corresponds to ExternalLibrary's <tt>customClass</tt>.
customClassFill :: [MethodInfoFill] -> ClassInfoFill

-- | Corresponds to ExternalLibrary's <tt>implementation</tt>.
implementationFill :: [MethodInfoFill] -> ClassInfoFill

-- | Corresponds to ExternalLibrary's <tt>constructorInfo</tt>. Provides
--   Variable-Value pairs for variables initialized by the constructor.
constructorInfoFill :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill

-- | Corresponds to ExternalLibrary's <tt>methodInfo</tt>.
methodInfoFill :: [ParameterFill] -> [StepFill] -> MethodInfoFill

-- | Corresponds to ExternalLibrary's <tt>appendCurrSol</tt>. Provides the
--   <a>CodeVarChunk</a> for the solution list.
appendCurrSolFill :: CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>populateSolList</tt>. Provides
--   the <a>CodeVarChunk</a> for the solution list.
populateSolListFill :: CodeVarChunk -> [StepFill]

-- | Corresponds to ExternalLibrary's <tt>assignArrayIndex</tt>. Provides
--   the <a>CodeVarChunk</a> for the array variable. Provides the
--   <a>CodeExpr</a>s for the values to assign to each array index.
assignArrayIndexFill :: CodeVarChunk -> [CodeExpr] -> StepFill

-- | Corresponds to ExternalLibrary's <tt>assignSolFromObj</tt>. Provides
--   the <a>CodeVarChunk</a> for the variable that the solution should be
--   assigned to.
assignSolFromObjFill :: CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>initSolListFromArray</tt>.
--   Provides the <a>CodeVarChunk</a> for the solution list.
initSolListFromArrayFill :: CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>initSolListWithVal</tt>. Provides
--   the <a>CodeVarChunk</a> for the solution list and the <a>CodeExpr</a>
--   for the initial element of the solution list
initSolListWithValFill :: CodeVarChunk -> CodeExpr -> StepFill

-- | Corresponds to ExternalLibrary's <tt>solveAndPopulateWhile</tt>.
--   Provides the <a>CodeExpr</a> for the upper bound in the while loop
--   condition and the <a>CodeVarChunk</a> for the solution list.
solveAndPopulateWhileFill :: FunctionIntFill -> CodeExpr -> FunctionIntFill -> CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>returnExprList</tt>. Provides the
--   list of <a>CodeExpr</a>s to return.
returnExprListFill :: [CodeExpr] -> StepFill

-- | Corresponds to ExternalLibrary's <tt>fixedReturn</tt>. No parameters
--   because the statement is not use-case-dependent.
fixedStatementFill :: StepFill

-- | Corresponds to ExternalLibrary's <tt>fixedReturn'</tt>.
--   use-case-specific a <a>CodeExpr</a> that parameterize the statement.
fixedStatementFill' :: CodeExpr -> StepFill

-- | Corresponds to ExternalLibrary's <tt>initSolWithVal</tt>. Provides the
--   <a>CodeVarChunk</a> for one solution and one <a>CodeExpr</a> for the
--   initial element of the solution list
initSolWithValFill :: CodeVarChunk -> CodeExpr -> StepFill


-- | Defines a language for specifying external library use scenarios
module Language.Drasil.Code.ExternalLibrary

-- | External library is a group of <a>Step</a>s
type ExternalLibrary = [StepGroup]

-- | A step can be a call to an external library function or method.
data Step
Call :: FunctionInterface -> Step

-- | A while loop. The function calls in the condition, other conditions,
--   and steps for the body of the loop.
Loop :: NonEmpty FunctionInterface -> ([CodeExpr] -> Condition) -> NonEmpty Step -> Step
Statement :: ([CodeVarChunk] -> [CodeExpr] -> FuncStmt) -> Step

-- | The first item in the <a>Requires</a> list should be where the
--   function being called is defined.
data FunctionInterface
FI :: NonEmpty Requires -> FuncType -> CodeFuncChunk -> [Argument] -> Maybe Result -> FunctionInterface

-- | The result of a function call can be assigned to a variable or
--   returned.
data Result
Assign :: CodeVarChunk -> Result
Return :: Result

-- | An argument may contain a named argument and argument information.
data Argument
Arg :: Maybe NamedArgument -> ArgumentInfo -> Argument

-- | Determines the context needed for an argument to work.
data ArgumentInfo

-- | An argument not dependent on use case.
LockedArg :: CodeExpr -> ArgumentInfo

-- | An argument dependent on the use case. Maybe is the variable if it
--   needs to be declared and defined prior to calling.
Basic :: Space -> Maybe CodeVarChunk -> ArgumentInfo

-- | A function-type argument, with a single <a>Step</a> for the body.
Fn :: CodeFuncChunk -> [Parameter] -> Step -> ArgumentInfo

-- | An argument that is an object of a class that must be implemented in
--   the calling program. Parameters: Requires, description, object,
--   constructor, class info.
Class :: [Requires] -> Description -> CodeVarChunk -> CodeFuncChunk -> ClassInfo -> ArgumentInfo

-- | An argument that is an object of a record class defined by the
--   external library, where some fields need to be set by the calling
--   program. Parameters: Requires, constructor, object, fields. First
--   Require should be where the record type is defined.
Record :: NonEmpty Requires -> CodeFuncChunk -> CodeVarChunk -> [CodeVarChunk] -> ArgumentInfo

-- | Function parameter may or may not be dependent on use case.
data Parameter
LockedParam :: ParameterChunk -> Parameter
NameableParam :: Space -> Parameter

-- | For classes that need to be generated in the calling program. May be a
--   regular class or a class that implements an interface from the
--   external library.
data ClassInfo
Regular :: [MethodInfo] -> ClassInfo
Implements :: String -> [MethodInfo] -> ClassInfo

-- | Constructor: description, known parameters, body. (CodeFuncChunk for
--   constructor is not here because it is higher up in the AST, at the
--   <a>Class</a> node).
data MethodInfo
CI :: Description -> [Parameter] -> [Step] -> MethodInfo

-- | Method, description, known parameters, maybe return description, body.
MI :: CodeFuncChunk -> Description -> [Parameter] -> Maybe Description -> NonEmpty Step -> MethodInfo

-- | Function type may be a function, a method, or a constructor.
data FuncType
Function :: FuncType
Method :: CodeVarChunk -> FuncType
Constructor :: FuncType

-- | Specifies an external library.
externalLib :: [StepGroup] -> ExternalLibrary

-- | To be used when there are multiple options for a group of consecutive
--   steps, where a single use-case-specific factor decides which step
--   group to use.
choiceSteps :: [[Step]] -> StepGroup

-- | To be used when there are multiple options for a single step, where a
--   use-case-specific factor decides which step to use.
choiceStep :: [Step] -> StepGroup

-- | Specifies a step which must exist in some form in every use case.
mandatoryStep :: Step -> StepGroup

-- | Specifies multiple consecutive steps that all must exist in some form
--   in every use case.
mandatorySteps :: [Step] -> StepGroup
callStep :: FunctionInterface -> Step

-- | Specifies a call to an external library function.
libFunction :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library method.
libMethod :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library function, where the result is
--   assigned to a variable.
libFunctionWithResult :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library method, where the result is
--   assigned to a variable.
libMethodWithResult :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is assigned to a variable.
libConstructor :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library function, where multiple
--   modules from the external library are required, and the result is
--   assigned to a variable.
libConstructorMultiReqs :: [Requires] -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is returned.
constructAndReturn :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies an argument that is not use-case-dependent.
lockedArg :: CodeExpr -> Argument

-- | Specifies a named argument that is not use-case-dependent.
lockedNamedArg :: NamedArgument -> CodeExpr -> Argument

-- | Specifies a use-case-dependent argument whose value can be inlined in
--   the call.
inlineArg :: Space -> Argument

-- | Specifies a use-case-dependent named argument whose value can be
--   inlined in the call.
inlineNamedArg :: NamedArgument -> Space -> Argument

-- | Specifies use-case-dependent argument whose value must be assigned to
--   a variable before being passed in the call.
preDefinedArg :: CodeVarChunk -> Argument

-- | Specifies use-case-dependent named argument whose value must be
--   assigned to a variable before being passed in the call.
preDefinedNamedArg :: NamedArgument -> CodeVarChunk -> Argument

-- | Specifies a function type argument, where the body consists of a
--   single step.
functionArg :: CodeFuncChunk -> [Parameter] -> Step -> Argument

-- | Specifies an argument that is an object of a class that must be
--   defined in the calling program.
customObjArg :: [Requires] -> Description -> CodeVarChunk -> CodeFuncChunk -> ClassInfo -> Argument

-- | Specifies an argument that is an object of a class from the external
--   library. The list of [CodeVarChunk] represents fields of the object
--   that must be set in the calling program.
recordArg :: Requires -> CodeFuncChunk -> CodeVarChunk -> [CodeVarChunk] -> Argument

-- | Specifies a use-case-independent parameter.
lockedParam :: CodeVarChunk -> Parameter

-- | Specifies a parameter whose name depends on the use case.
unnamedParam :: Space -> Parameter

-- | Specifies a class that must be implemented in the calling program.
customClass :: [MethodInfo] -> ClassInfo

-- | Specifies an implementation of an interface from the external library.
implementation :: String -> [MethodInfo] -> ClassInfo

-- | Specifies a constructor.
constructorInfo :: CodeFuncChunk -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a method.
methodInfo :: CodeFuncChunk -> Description -> [Parameter] -> Description -> [Step] -> MethodInfo

-- | Specifies a method that does not return anything.
methodInfoNoReturn :: CodeFuncChunk -> Description -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a statement where a current solution is appended to a
--   solution list.
appendCurrSol :: CodeExpr -> Step

-- | Specifies a statement where a solution list is populated by iterating
--   through a solution array.
populateSolList :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk -> [Step]

-- | Specifies statements where every index of an array is assigned a
--   value.
assignArrayIndex :: Step

-- | Specifies a statement where a solution is assigned from the field of
--   an object.
assignSolFromObj :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with the
--   first element of an array.
initSolListFromArray :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with the
--   first value.
initSolListWithVal :: Step

-- | A solve and populate loop. <a>FunctionInterface</a> for loop
--   condition, <tt>CodeChunk</tt> for solution object, <tt>CodeChunk</tt>
--   for independent var, <a>FunctionInterface</a> for solving,
--   <tt>CodeChunk</tt> for soln array to populate with.
solveAndPopulateWhile :: FunctionInterface -> CodeVarChunk -> CodeVarChunk -> FunctionInterface -> CodeVarChunk -> Step

-- | Specifies a statement where a list is returned, where each value of
--   the list is explicitly defined.
returnExprList :: Step

-- | Specifies a use-case-independent statement that returns a fixed value.
fixedReturn :: CodeExpr -> Step

-- | Specifies a use-case-dependent statement that returns a non-fixed
--   value.
fixedReturn' :: Step

-- | Specifies a statement where a single solution is initialized with a
--   value.
initSolWithVal :: Step


-- | Defines a type for representing ODE-solving external libraries.
module Language.Drasil.Data.ODELibPckg

-- | Holds an ODE library package.
data ODELibPckg
ODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> Maybe FilePath -> [Lang] -> ODELibPckg

-- | Library name.
[libName] :: ODELibPckg -> Name

-- | Version.
[libVers] :: ODELibPckg -> Version

-- | Library specifications.
[libSpec] :: ODELibPckg -> ExternalLibrary

-- | Library call.
[libCall] :: ODELibPckg -> ODEInfo -> ExternalLibraryCall

-- | Library path.
[libPath] :: ODELibPckg -> Maybe FilePath

-- | Compatible OO languages.
[compatibleLangs] :: ODELibPckg -> [Lang]

-- | Makes an <a>ODELibPckg</a> with the given name, <a>ExternalLibrary</a>
--   specification, <a>ExternalLibraryCall</a> specification parameterized
--   by an <a>ODEInfo</a>, local file path to the library, and list of
--   compatible languages.
mkODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> FilePath -> [Lang] -> ODELibPckg

-- | Makes an <a>ODELibPckg</a> with the given name, <a>ExternalLibrary</a>
--   specification, <a>ExternalLibraryCall</a> specification parameterized
--   by an <a>ODEInfo</a>, and list of compatible languages.
mkODELibNoPath :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> [Lang] -> ODELibPckg


-- | Defines functions for simultaneous interpretation of ExternalLibrary
--   and ExternalLibraryCall.
module Language.Drasil.Code.ExtLibImport

-- | State object used during interpretation of an <a>ExternalLibrary</a>
--   and <a>ExternalLibraryCall</a>.
data ExtLibState
ELS :: [Mod] -> [FuncStmt] -> [Name] -> [FuncStmt] -> [String] -> [(Name, Name)] -> ExtLibState

-- | Additional modules that must be generated to use the library.
[_auxMods] :: ExtLibState -> [Mod]

-- | The defining statements for variables that must be pre-defined before
--   being passed as arguments in an external library call.
[_defs] :: ExtLibState -> [FuncStmt]

-- | The names of variables for which a defining statement has already been
--   generated.
[_defined] :: ExtLibState -> [Name]

-- | The statements corresponding to the external library use case.
[_steps] :: ExtLibState -> [FuncStmt]

-- | The imports required to use the external library.
[_imports] :: ExtLibState -> [String]

-- | An association list between library method/function names and the
--   external library module that exports them.
[_modExports] :: ExtLibState -> [(Name, Name)]
auxMods :: Lens' ExtLibState [Mod]
defs :: Lens' ExtLibState [FuncStmt]
imports :: Lens' ExtLibState [String]
modExports :: Lens' ExtLibState [(Name, Name)]
steps :: Lens' ExtLibState [FuncStmt]

-- | Interprets an <a>ExternalLibrary</a> and <a>ExternalLibraryCall</a>
--   and returns the resulting <a>ExtLibState</a>.
genExternalLibraryCall :: ExternalLibrary -> ExternalLibraryCall -> ExtLibState


-- | Defines the design language for SCS.
module Language.Drasil.Choices

-- | The instruction indicates how the generated program should be written
--   down. Full details of Choices documentation
--   <a>https://github.com/JacquesCarette/Drasil/wiki/The-Code-Generator</a>
data Choices
Choices :: [Lang] -> Architecture -> DataInfo -> Maps -> OptionalFeatures -> Constraints -> [ExtLib] -> (InternalConcept -> Name) -> Int -> Choices

-- | Target languages. Choosing multiple means program will be generated in
--   multiple languages.
[lang] :: Choices -> [Lang]

-- | Architecture of the program, include modularity and implementation
--   type
[architecture] :: Choices -> Architecture

-- | Data structure and represent
[dataInfo] :: Choices -> DataInfo

-- | Maps for 'Drasil concepts' to 'code concepts' or <a>Space</a> to a
--   'CodeType
[maps] :: Choices -> Maps

-- | Setting for Softifacts that can be added to the program or left it out
[optFeats] :: Choices -> OptionalFeatures

-- | Constraint violation behaviour. Exception or Warning.
[srsConstraints] :: Choices -> Constraints

-- | List of external libraries what to utilize
[extLibs] :: Choices -> [ExtLib]

-- | Function to get modifiable function names
[icNames] :: Choices -> InternalConcept -> Name

-- | Number of folders to go up in order to obtain the image
[folderVal] :: Choices -> Int

-- | Architecture of a program
data Architecture
Archt :: Modularity -> ImplementationType -> Architecture

-- | How the program should be modularized.
[modularity] :: Architecture -> Modularity

-- | Implementation type, program or library.
[impType] :: Architecture -> ImplementationType

-- | Constructor to create a Architecture
makeArchit :: Modularity -> ImplementationType -> Architecture

-- | Data of a program - how information should be encoded.
data DataInfo
DataInfo :: Structure -> ConstantStructure -> ConstantRepr -> DataInfo

-- | Structure of inputs (bundled or not).
[inputStructure] :: DataInfo -> Structure

-- | Structure of constants (inlined or bundled or not, or stored with
--   inputs).
[constStructure] :: DataInfo -> ConstantStructure

-- | Representation of constants (as variables or as constants).
[constRepr] :: DataInfo -> ConstantRepr

-- | Constructor to create a DataInfo
makeData :: Structure -> ConstantStructure -> ConstantRepr -> DataInfo

-- | Maps for Concepts and Space
data Maps
Maps :: ConceptMatchMap -> SpaceMatch -> Maps

-- | Map of <a>UID</a>s for Drasil concepts to code concepts. Matching a
--   <a>UID</a> to a code concept means the code concept should be used
--   instead of the chunk associated with the <a>UID</a>.
[conceptMatch] :: Maps -> ConceptMatchMap

-- | Map of <a>Space</a>s to <a>CodeType</a>s Matching a <a>Space</a> to a
--   <a>CodeType</a> means values of the <a>Space</a> should have that
--   <a>CodeType</a> in the generated code.
[spaceMatch] :: Maps -> SpaceMatch

-- | Constructor to create a Maps
makeMaps :: ConceptMatchMap -> SpaceMatch -> Maps

-- | Default mapping between <tt>Space</tt> and <a>CodeType</a>.
spaceToCodeType :: Space -> [CodeType]

-- | SRS Constraints
data Constraints
Constraints :: ConstraintBehaviour -> ConstraintBehaviour -> Constraints
[onSfwrConstraint] :: Constraints -> ConstraintBehaviour
[onPhysConstraint] :: Constraints -> ConstraintBehaviour

-- | Constructor to create a Constraints
makeConstraints :: ConstraintBehaviour -> ConstraintBehaviour -> Constraints

-- | All Information needed to solve an ODE
data ODE
ODE :: [ODEInfo] -> [ODELibPckg] -> ODE

-- | ODE information.
[odeInfo] :: ODE -> [ODEInfo]

-- | Preferentially-ordered list ODE libraries to try.
[odeLib] :: ODE -> [ODELibPckg]

-- | Constructor to create an ODE
makeODE :: [ODEInfo] -> [ODELibPckg] -> ODE

-- | Configuration for Doxygen documentation
data DocConfig
DocConfig :: [Comments] -> Verbosity -> Visibility -> DocConfig

-- | Turns Doxygen comments for different code structures on or off.
[comments] :: DocConfig -> [Comments]

-- | Standard output from running Doxygen: verbose or quiet?
[doxVerbosity] :: DocConfig -> Verbosity

-- | Turns date field on or off in the generated module-level Doxygen
--   comments.
[dates] :: DocConfig -> Visibility

-- | Constructor to create a DocConfig
makeDocConfig :: [Comments] -> Verbosity -> Visibility -> DocConfig

-- | Log Configuration
data LogConfig
LogConfig :: [Logging] -> FilePath -> LogConfig

-- | Turns different forms of logging on or off.
[logging] :: LogConfig -> [Logging]

-- | Name of log file.
[logFile] :: LogConfig -> FilePath

-- | Constructor to create a LogConfig
makeLogConfig :: [Logging] -> FilePath -> LogConfig
data OptionalFeatures
OptFeats :: DocConfig -> LogConfig -> [AuxFile] -> OptionalFeatures
[docConfig] :: OptionalFeatures -> DocConfig
[logConfig] :: OptionalFeatures -> LogConfig

-- | Turns generation of different auxiliary (non-source-code) files on or
--   off.
[auxFiles] :: OptionalFeatures -> [AuxFile]

-- | Constructor to create a OptionalFeatures
makeOptFeats :: DocConfig -> LogConfig -> [AuxFile] -> OptionalFeatures

-- | External Library Options
newtype ExtLib
Math :: ODE -> ExtLib

-- | Modularity of a program.
data Modularity

-- | Different modules. For controller, input, calculations, output.
Modular :: Modularity

-- | All generated code is in one module/file.
Unmodular :: Modularity

-- | Variable structure options.
data Structure

-- | Individual variables
Unbundled :: Structure

-- | Variables bundled in a class
Bundled :: Structure

-- | Constants options.
data ConstantStructure

-- | Inline values for constants.
Inline :: ConstantStructure

-- | Store constants with inputs.
WithInputs :: ConstantStructure

-- | Store constants separately from inputs, whether bundled or unbundled.
Store :: Structure -> ConstantStructure

-- | Options for representing constants in a program.
data ConstantRepr

-- | Constants represented as regular variables.
Var :: ConstantRepr

-- | Use target language's mechanism for defining constants.
Const :: ConstantRepr

-- | Specifies matches between chunks and <a>CodeConcept</a>s, meaning the
--   target language's pre-existing definition of the concept should be
--   used instead of defining a new variable for the concept in the
--   generated code. [<a>CodeConcept</a>] is preferentially-ordered,
--   generator concretizes a <a>ConceptMatchMap</a> to a
--   <a>MatchedConceptMap</a> by checking user's other choices.
type ConceptMatchMap = Map UID [CodeConcept]

-- | Concrete version of ConceptMatchMap dependent on user choices.
type MatchedConceptMap = Map UID CodeConcept

-- | Code concepts. For now, just pi.
data CodeConcept
Pi :: CodeConcept

-- | Builds a <a>ConceptMatchMap</a> from an association list of chunks and
--   <tt>CodeConcepts</tt>.
matchConcepts :: HasUID c => [(c, [CodeConcept])] -> ConceptMatchMap

-- | Specifies which <a>CodeType</a> should be used to represent each
--   mathematical <a>Space</a>. [<a>CodeType</a>] is
--   preferentially-ordered, first <a>CodeType</a> that does not conflict
--   with other choices will be selected.
type SpaceMatch = Space -> [CodeType]

-- | Builds a <a>SpaceMatch</a> from an association list of <tt>Spaces</tt>
--   and <tt>CodeTypes</tt>.
matchSpaces :: [(Space, [CodeType])] -> SpaceMatch

-- | Program implementation options.
data ImplementationType

-- | Generated code does not include Controller.
Library :: ImplementationType

-- | Generated code includes Controller.
Program :: ImplementationType

-- | Constraint behaviour options within program.
data ConstraintBehaviour

-- | Print warning when constraint violated.
Warning :: ConstraintBehaviour

-- | Throw exception when constraint violated.
Exception :: ConstraintBehaviour

-- | Comment implementation options.
data Comments

-- | Function/method-level comments.
CommentFunc :: Comments

-- | Class-level comments.
CommentClass :: Comments

-- | File/Module-level comments.
CommentMod :: Comments

-- | Doxygen file verbosity options.
data Verbosity
Verbose :: Verbosity
Quiet :: Verbosity

-- | Doxygen date-field visibility options.
data Visibility
Show :: Visibility
Hide :: Visibility

-- | Logging options for function calls and variable assignments. Eq
--   instances required for Logging and Comments because generator needs to
--   check membership of these elements in lists
data Logging

-- | Log messages generated for function calls.
LogFunc :: Logging

-- | Log messages generated for variable assignments.
LogVar :: Logging

-- | Currently we only support two kind of auxiliary files: sample input
--   file, readme. To generate a sample input file compatible with the
--   generated program, <a>FilePath</a> is the path to the user-provided
--   file containing a sample set of input data.
data AuxFile
SampleInput :: FilePath -> AuxFile
ReadME :: AuxFile

-- | Gets the file path to a sample input data set from a <a>Choices</a>
--   structure, if the user chose to generate a sample input file.
getSampleData :: Choices -> Maybe FilePath

-- | Predicate that returns true if the list of <a>AuxFile</a>s includes a
--   <a>SampleInput</a>.
hasSampleInput :: [AuxFile] -> Bool

-- | Default choices to be used as the base from which design
--   specifications can be built.
defaultChoices :: Choices

-- | Renders <a>Choices</a> as <a>Sentence</a>s.
choicesSent :: Choices -> [Sentence]
showChs :: RenderChoices a => a -> Sentence

-- | Data type of internal concepts
data InternalConcept
InputConstraintsFn :: InternalConcept
InputConstraintsMod :: InternalConcept
WriteOutput :: InternalConcept
DerivedValuesFn :: InternalConcept
DerivedValuesMod :: InternalConcept
GetInput :: InternalConcept
InputParameters :: InternalConcept
InputFormat :: InternalConcept
OutputFormat :: InternalConcept
Calculations :: InternalConcept
Constants :: InternalConcept
instance GHC.Classes.Eq Language.Drasil.Choices.CodeConcept
instance GHC.Classes.Eq Language.Drasil.Choices.Comments
instance GHC.Classes.Eq Language.Drasil.Choices.Logging
instance GHC.Classes.Eq Language.Drasil.Choices.AuxFile
instance GHC.Classes.Ord Language.Drasil.Choices.InternalConcept
instance GHC.Classes.Eq Language.Drasil.Choices.InternalConcept
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.ConstraintBehaviour
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.AuxFile
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Logging
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Visibility
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Verbosity
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Comments
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.CodeConcept
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.ConstantRepr
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.ConstantStructure
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Structure
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.ImplementationType
instance Language.Drasil.Choices.RenderChoices Language.Drasil.Choices.Modularity


-- | Defines the CodeSpec structure and related functions.
module Language.Drasil.CodeSpec

-- | Program input.
type Input = CodeVarChunk

-- | Program output.
type Output = CodeVarChunk

-- | Constants in the problem.
type Const = CodeDefinition

-- | Derived inputs.
type Derived = CodeDefinition

-- | Mathematical definition.
type Def = CodeDefinition

-- | Code specifications. Holds information needed to generate code.
data CodeSpec
[CodeSpec] :: HasName a => Name -> [a] -> Purpose -> Background -> [Input] -> [Input] -> [Derived] -> [Output] -> [FilePath] -> [Def] -> ConstraintCEMap -> [Const] -> ConstantMap -> [Mod] -> ChunkDB -> CodeSpec

-- | Maps constants to their respective <a>CodeDefinition</a>.
type ConstantMap = Map UID CodeDefinition

-- | Converts a list of chunks that have <a>UID</a>s to a Map from
--   <a>UID</a> to the associated chunk.
assocToMap :: HasUID a => [a] -> Map UID a

-- | Get ODE from ExtLib
getODE :: [ExtLib] -> Maybe ODE

-- | Maps ODE to their respective <a>CodeDefinition</a>.
mapODE :: Maybe ODE -> [CodeDefinition]

-- | Defines a <a>CodeSpec</a> based on the <a>SystemInformation</a>,
--   <a>Choices</a>, and <a>Mod</a>s defined by the user.
codeSpec :: SystemInformation -> Choices -> [Mod] -> CodeSpec

-- | Convert a <a>Func</a> to an implementation-stage <a>QuantityDict</a>
--   representing the function.
asVC :: Func -> QuantityDict

-- | Get a <a>UID</a> of a chunk corresponding to a <a>Func</a>.
funcUID :: Func -> UID

-- | Determines the derived inputs, which can be immediately calculated
--   from the knowns (inputs and constants). If there are DDs, the derived
--   inputs will come from those. If there are none, then the
--   <a>QDefinition</a>s are used instead.
getDerivedInputs :: [DataDefinition] -> [Input] -> [Const] -> ChunkDB -> [SimpleQDef]

-- | Known values.
type Known = CodeVarChunk

-- | Calculated values.
type Need = CodeVarChunk

-- | Orders a list of definitions such that they form a path between
--   <a>Known</a> values and values that <a>Need</a> to be calculated.
getExecOrder :: [Def] -> [Known] -> [Need] -> ChunkDB -> [Def]

-- | Get a list of <a>Constraint</a>s for a list of <a>CodeChunk</a>s.
getConstraints :: HasUID c => ConstraintCEMap -> [c] -> [ConstraintCE]

-- | Get a list of <a>CodeChunk</a>s from a constraint.
constraintvars :: ConstraintCE -> ChunkDB -> [CodeChunk]

module Language.Drasil.Code.Imperative.GenODE

-- | Chooses the first <a>ODELibPckg</a> from the list specified by the
--   user that is compatible with the current target <a>Lang</a>.
--   Interprets the ExternalLibrary and ExternalLibraryCall for the
--   selected <a>ODELibPckg</a> by concretizing the ExternalLibraryCall
--   with each of the <tt>ODEInfo</tt>s The internal helper chooseODELib'
--   keeps a read only preference list and a currently considered
--   preference list (which can change), this facilitates the
--   <a>firstChoiceODELib</a> check.
chooseODELib :: Lang -> Maybe ODE -> State [Sentence] ODEGenInfo


-- | Defines a package extension for GOOL, with functions for pairing a
--   GOOL program with auxiliary, non-source-code files.
module Language.Drasil.Code.Imperative.GOOL.ClassInterface

-- | Holds all information needed to create a README file.
data ReadMeInfo
ReadMeInfo :: LangAbbrev -> LangVers -> Maybe String -> ImplementationType -> [(Name, Version)] -> [FilePath] -> [Contributor] -> [FilePath] -> CaseName -> ExamplePurpose -> ExampleDescr -> Int -> (InFile, OutFile) -> ReadMeInfo
[langName] :: ReadMeInfo -> LangAbbrev
[langVersion] :: ReadMeInfo -> LangVers
[invalidOS] :: ReadMeInfo -> Maybe String
[implementType] :: ReadMeInfo -> ImplementationType
[extLibNV] :: ReadMeInfo -> [(Name, Version)]
[extLibFP] :: ReadMeInfo -> [FilePath]
[contributors] :: ReadMeInfo -> [Contributor]
[configFP] :: ReadMeInfo -> [FilePath]
[caseName] :: ReadMeInfo -> CaseName
[examplePurpose] :: ReadMeInfo -> ExamplePurpose
[exampleDescr] :: ReadMeInfo -> ExampleDescr
[folderNum] :: ReadMeInfo -> Int
[inputOutput] :: ReadMeInfo -> (InFile, OutFile)

-- | Members of this class must have all the information necessary for the
--   <a>AuxiliarySym</a> in addition to information necessary to create a
--   package.
class (AuxiliarySym r) => PackageSym r where {
    type Package r;
}
package :: PackageSym r => ProgData -> [r (Auxiliary r)] -> r (Package r)

-- | Members of this class must have a doxygen configuration, ReadMe file,
--   sample input, omptimize doxygen document, information necessary for a
--   makefile, auxiliary helper documents, and auxiliary from data
--   documents.
class AuxiliarySym r where {
    type Auxiliary r;
    type AuxHelper r;
}
doxConfig :: AuxiliarySym r => String -> GOOLState -> Verbosity -> r (Auxiliary r)
readMe :: AuxiliarySym r => ReadMeInfo -> r (Auxiliary r)
sampleInput :: AuxiliarySym r => ChunkDB -> DataDesc -> [Expr] -> r (Auxiliary r)
optimizeDox :: AuxiliarySym r => r (AuxHelper r)
makefile :: AuxiliarySym r => [FilePath] -> ImplementationType -> [Comments] -> GOOLState -> ProgData -> r (Auxiliary r)
auxHelperDoc :: AuxiliarySym r => r (AuxHelper r) -> Doc
auxFromData :: AuxiliarySym r => FilePath -> Doc -> r (Auxiliary r)

module Language.Drasil.Code.Imperative.WriteReadMe

-- | Generates a README file.
makeReadMe :: ReadMeInfo -> Doc

module Language.Drasil.Code.Imperative.DrasilState

-- | Abbreviation used throughout generator.
type GenState = State DrasilState

-- | Private State, used to push these options around the generator.
data DrasilState
DrasilState :: CodeSpec -> Modularity -> ImplementationType -> Structure -> ConstantStructure -> ConstantRepr -> MatchedConceptMap -> MatchedSpaces -> ConstraintBehaviour -> ConstraintBehaviour -> [Comments] -> Verbosity -> String -> String -> [Logging] -> [AuxFile] -> [Expr] -> (InternalConcept -> Name) -> [Mod] -> [(Name, Version)] -> ExtLibMap -> [FilePath] -> ModExportMap -> ModExportMap -> ClassDefinitionMap -> Set Name -> Int -> String -> String -> Doc -> [(Space, CodeType)] -> DrasilState
[codeSpec] :: DrasilState -> CodeSpec
[modular] :: DrasilState -> Modularity
[implType] :: DrasilState -> ImplementationType
[inStruct] :: DrasilState -> Structure
[conStruct] :: DrasilState -> ConstantStructure
[conRepr] :: DrasilState -> ConstantRepr
[concMatches] :: DrasilState -> MatchedConceptMap
[spaceMatches] :: DrasilState -> MatchedSpaces
[onSfwrC] :: DrasilState -> ConstraintBehaviour
[onPhysC] :: DrasilState -> ConstraintBehaviour
[commented] :: DrasilState -> [Comments]
[doxOutput] :: DrasilState -> Verbosity
[date] :: DrasilState -> String
[logName] :: DrasilState -> String
[logKind] :: DrasilState -> [Logging]
[auxiliaries] :: DrasilState -> [AuxFile]
[sampleData] :: DrasilState -> [Expr]
[dsICNames] :: DrasilState -> InternalConcept -> Name
[modules] :: DrasilState -> [Mod]
[extLibNames] :: DrasilState -> [(Name, Version)]
[extLibMap] :: DrasilState -> ExtLibMap
[libPaths] :: DrasilState -> [FilePath]
[eMap] :: DrasilState -> ModExportMap
[libEMap] :: DrasilState -> ModExportMap
[clsMap] :: DrasilState -> ClassDefinitionMap
[defSet] :: DrasilState -> Set Name
[getVal] :: DrasilState -> Int
[currentModule] :: DrasilState -> String
[currentClass] :: DrasilState -> String
[_designLog] :: DrasilState -> Doc
[_loggedSpaces] :: DrasilState -> [(Space, CodeType)]
designLog :: Lens' DrasilState Doc

-- | Type for the mapping between <a>Space</a>s and <a>CodeType</a>s.
type MatchedSpaces = Space -> GenState CodeType

-- | Variable/function name maps to module name.
type ModExportMap = Map String String

-- | Variable/function name maps to class name.
type ClassDefinitionMap = Map String String

-- | Builds the module export map, mapping each function and state variable
--   name in the generated code to the name of the generated module that
--   exports it.
modExportMap :: CodeSpec -> Choices -> [Mod] -> ModExportMap

-- | Builds the class definition map, mapping each generated method and
--   state variable name to the name of the generated class where it is
--   defined.
clsDefMap :: CodeSpec -> Choices -> [Mod] -> ClassDefinitionMap

-- | Adds a message to the design log if the given
--   <a>Space</a>-<a>CodeType</a> match has not already been logged.
addToDesignLog :: Space -> CodeType -> Doc -> DrasilState -> DrasilState

-- | Adds a <a>Space</a>-<a>CodeType</a> pair to the loggedSpaces list in
--   <a>DrasilState</a> to prevent a duplicate log from being generated for
--   that <a>Space</a>-<a>CodeType</a> pair.
addLoggedSpace :: Space -> CodeType -> DrasilState -> DrasilState

-- | Get InternalConcept name using DrasilState
genICName :: InternalConcept -> GenState Name

module Language.Drasil.Code.Imperative.SpaceMatch

-- | Concretizes the <a>spaceMatch</a> in <a>Choices</a> to a
--   <tt>MatchedSpace</tt> based on target language.
chooseSpace :: Lang -> Choices -> MatchedSpaces

module Language.Drasil.Code.Imperative.Parameters

-- | Since the input constructor calls the three input-related methods, the
--   parameters to the constructor are the parameters to the three methods,
--   except excluding any of variables that are state variables in the
--   class, since they are already in scope. If InputParameters is not in
--   the definition list, then the default constructor is used, which takes
--   no parameters.
getInConstructorParams :: GenState [CodeVarChunk]

-- | The inputs to the function for reading inputs are the input file name.
getInputFormatIns :: GenState [CodeVarChunk]

-- | The outputs from the function for reading inputs are the inputs.
getInputFormatOuts :: GenState [CodeVarChunk]

-- | The inputs to the function for calculating derived inputs are any
--   variables used in the equations for the derived inputs.
getDerivedIns :: GenState [CodeVarChunk]

-- | The outputs from the function for calculating derived inputs are the
--   derived inputs.
getDerivedOuts :: GenState [CodeVarChunk]

-- | The parameters to the function for checking constraints on the inputs
--   are any inputs with constraints, and any variables used in the
--   expressions of the constraints.
getConstraintParams :: GenState [CodeVarChunk]

-- | The parameters to a calculation function are any variables used in the
--   expression representing the calculation.
getCalcParams :: CodeDefinition -> GenState [CodeVarChunk]

-- | The parameters to the function for printing outputs are the outputs.
getOutputParams :: GenState [CodeVarChunk]
instance GHC.Classes.Eq Language.Drasil.Code.Imperative.Parameters.ParamType

module Language.Drasil.Code.Imperative.Logging

-- | Generates a statement that logs the given variable's value, if the
--   user chose to turn on logging of variable assignments.
maybeLog :: SharedProg r => SVariable r -> r (Scope r) -> GenState [MSStatement r]

-- | Generates the body of a function with the given name, list of
--   parameters, and blocks to include in the body. If the user chose to
--   turn on logging of function calls, statements that log how the
--   function was called are added to the beginning of the body.
logBody :: SharedProg r => Label -> [SVariable r] -> [MSBlock r] -> GenState (MSBody r)

-- | Generates a block that logs, to the given <a>FilePath</a>, the name of
--   a function, and the names and values of the passed list of variables.
--   Intended to be used as the first block in the function, to log that it
--   was called and what inputs it was called with.
loggedMethod :: SharedProg r => FilePath -> Label -> [SVariable r] -> MSBlock r

-- | The variable representing the log file in write mode.
varLogFile :: SharedProg r => r (Scope r) -> SVariable r

module Language.Drasil.Code.Imperative.Helpers

-- | Puts a state-dependent value into a singleton list.
liftS :: State a b -> State a [b]

-- | Gets the <a>QuantityDict</a> corresponding to a <a>UID</a>.
lookupC :: DrasilState -> UID -> QuantityDict

module Language.Drasil.Code.Imperative.GenerateGOOL
data ClassType
Primary :: ClassType
Auxiliary :: ClassType

-- | Defines a GOOL module. If the user chose <a>CommentMod</a>, the module
--   will have Doxygen comments. If the user did not choose
--   <a>CommentMod</a> but did choose <a>CommentFunc</a>, a module-level
--   Doxygen comment is still created, though it only documents the file
--   name, because without this Doxygen will not find the function-level
--   comments in the file.
genModuleWithImports :: OOProg r => Name -> Description -> [Import] -> [GenState (Maybe (SMethod r))] -> [GenState (Maybe (SClass r))] -> GenState (SFile r)

-- | Defines a GOOL module. If the user chose <a>CommentMod</a>, the module
--   will have Doxygen comments. If the user did not choose
--   <a>CommentMod</a> but did choose <a>CommentFunc</a>, a module-level
--   Doxygen comment is still created, though it only documents the file
--   name, because without this Doxygen will not find the function-level
--   comments in the file.
genModuleWithImportsProc :: ProcProg r => Name -> Description -> [Import] -> [GenState (Maybe (SMethod r))] -> GenState (SFile r)

-- | Generates a module for when imports do not need to be explicitly
--   stated.
genModule :: OOProg r => Name -> Description -> [GenState (Maybe (SMethod r))] -> [GenState (Maybe (SClass r))] -> GenState (SFile r)

-- | Generates a module for when imports do not need to be explicitly
--   stated.
genModuleProc :: ProcProg r => Name -> Description -> [GenState (Maybe (SMethod r))] -> GenState (SFile r)

-- | Generates a Doxygen configuration file if the user has comments
--   enabled.
genDoxConfig :: AuxiliarySym r => GOOLState -> GenState (Maybe (r (Auxiliary r)))

-- | Generates a README file.
genReadMe :: AuxiliarySym r => ReadMeInfo -> GenState (Maybe (r (Auxiliary r)))

-- | Generates a primary class.
primaryClass :: OOProg r => Name -> Maybe Name -> Description -> [CSStateVar r] -> GenState [SMethod r] -> GenState [SMethod r] -> GenState (SClass r)

-- | Generates an auxiliary class (for when a module contains multiple
--   classes).
auxClass :: OOProg r => Name -> Maybe Name -> Description -> [CSStateVar r] -> GenState [SMethod r] -> GenState [SMethod r] -> GenState (SClass r)

-- | Function call generator. The first parameter (<tt>m</tt>) is the
--   module where the function is defined. If <tt>m</tt> is not the current
--   module, use GOOL's function for calling functions from external
--   modules. If <tt>m</tt> is the current module and the function is in
--   export map, use GOOL's basic function for function applications. If
--   <tt>m</tt> is the current module and function is not exported, use
--   GOOL's function for calling a method on self. This assumes all private
--   methods are dynamic, which is true for this generator.
fApp :: OOProg r => Name -> Name -> VSType r -> [SValue r] -> NamedArgs r -> GenState (SValue r)

-- | Function call generator. The first parameter (<tt>m</tt>) is the
--   module where the function is defined. If <tt>m</tt> is not the current
--   module, use GOOL's function for calling functions from external
--   modules. If <tt>m</tt> is the current module and the function is in
--   export map, use GOOL's basic function for function applications. If
--   <tt>m</tt> is the current module and function is not exported, use
--   GOOL's function for calling a method on self. This assumes all private
--   methods are dynamic, which is true for this generator.
fAppProc :: SharedProg r => Name -> Name -> VSType r -> [SValue r] -> NamedArgs r -> GenState (SValue r)

-- | Logic similar to <a>fApp</a>, but the self case is not required here
--   (because constructor will never be private). Calls
--   <a>newObjMixedArgs</a>.
ctorCall :: OOProg r => Name -> VSType r -> [SValue r] -> NamedArgs r -> GenState (SValue r)

-- | Logic similar to <a>fApp</a>, but for In/Out calls.
fAppInOut :: OOProg r => Name -> Name -> [SValue r] -> [SVariable r] -> [SVariable r] -> GenState (MSStatement r)

-- | Logic similar to <a>fApp</a>, but for In/Out calls.
fAppInOutProc :: SharedProg r => Name -> Name -> [SValue r] -> [SVariable r] -> [SVariable r] -> GenState (MSStatement r)


-- | Contains functions for generating code comments that describe a chunk.
module Language.Drasil.Code.Imperative.Comments

-- | Generates a comment string for a chunk, including the term, definition
--   (if applicable), and unit (if applicable).
getComment :: CodeIdea c => c -> GenState String

module Language.Drasil.Code.Imperative.Doxygen.Import

-- | Renders a Doxygen configuration file.
--   
--   <ul>
--   <li>Sets the PROJECT_NAME field according to the given name.</li>
--   <li>Sets the INPUT field to the header files contained in the given
--   GOOLState.</li>
--   <li>Sets the OPTIMIZE_OUTPUT_JAVA field according to the
--   OptimizeChoice parameter.</li>
--   <li>Sets the QUIET field according to the given Verbosity.</li>
--   </ul>
makeDoxConfig :: ProjName -> GOOLState -> OptimizeChoice -> Verbosity -> Doc

-- | Renderings of values commonly used in the configuration file.
yes :: Doc

-- | Renderings of values commonly used in the configuration file.
no :: Doc

module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.LanguagePolymorphic

-- | Defines a Doxygen configuration file.
doxConfig :: AuxiliarySym r => r (AuxHelper r) -> String -> GOOLState -> Verbosity -> r (Auxiliary r)

-- | Defines a markdown file.
readMe :: AuxiliarySym r => ReadMeInfo -> r (Auxiliary r)

-- | Defines a sample input file.
sampleInput :: AuxiliarySym r => ChunkDB -> DataDesc -> [Expr] -> r (Auxiliary r)

-- | Defines a Makefile.
makefile :: AuxiliarySym r => Maybe BuildConfig -> Maybe Runnable -> Maybe DocConfig -> GOOLState -> ProgData -> r (Auxiliary r)

-- | Changes a <a>Runnable</a> to <a>Nothing</a> if the user chose
--   <a>Library</a> for the <a>ImplementationType</a>.
noRunIfLib :: ImplementationType -> Maybe Runnable -> Maybe Runnable

-- | A DocConfig for Doxygen documentation.
doxDocConfig :: DocConfig

-- | Returns Nothing if no comments are enabled.
docIfEnabled :: [Comments] -> DocConfig -> Maybe DocConfig


-- | The logic to render Swift auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer

-- | Holds a Swift project.
newtype SwiftProject a
SP :: a -> SwiftProject a
[unSP] :: SwiftProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer.SwiftProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer.SwiftProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer.SwiftProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer.SwiftProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.SwiftRenderer.SwiftProject


-- | The logic to render Python auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer

-- | Holds a Python project.
newtype PythonProject a
PP :: a -> PythonProject a
[unPP] :: PythonProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer.PythonProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer.PythonProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer.PythonProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer.PythonProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.PythonRenderer.PythonProject


-- | The logic to render Julia auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JuliaRenderer

-- | Holds a Julia project
newtype JuliaProject a
JLP :: a -> JuliaProject a
[unJLP] :: JuliaProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JuliaRenderer.JuliaProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JuliaRenderer.JuliaProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JuliaRenderer.JuliaProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JuliaRenderer.JuliaProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JuliaRenderer.JuliaProject


-- | The logic to render Java auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer

-- | Holds a Java project.
newtype JavaProject a
JP :: a -> JavaProject a
[unJP] :: JavaProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer.JavaProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer.JavaProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer.JavaProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer.JavaProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.JavaRenderer.JavaProject


-- | The logic to render C++ auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer

-- | Holds a C++ project.
newtype CppProject a
CPPP :: a -> CppProject a
[unCPPP] :: CppProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer.CppProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer.CppProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer.CppProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer.CppProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CppRenderer.CppProject


-- | The logic to render C# auxiliary files is contained in this module
module Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer

-- | Holds a C# project.
newtype CSharpProject a
CSP :: a -> CSharpProject a
[unCSP] :: CSharpProject a -> a
instance GHC.Base.Functor Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer.CSharpProject
instance GHC.Base.Applicative Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer.CSharpProject
instance GHC.Base.Monad Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer.CSharpProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.PackageSym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer.CSharpProject
instance Language.Drasil.Code.Imperative.GOOL.ClassInterface.AuxiliarySym Language.Drasil.Code.Imperative.GOOL.LanguageRenderer.CSharpRenderer.CSharpProject


-- | Defines description generators for common SCS functions, classes, and
--   modules.
module Language.Drasil.Code.Imperative.Descriptions

-- | Returns a module description based on a list of descriptions of what
--   is contained in the module.
modDesc :: GenState [Description] -> GenState Description

-- | Returns description of what is contained in the module that is
--   generated when the user chooses an Unmodular design. Module is
--   described as either a program or library, depending on the user's
--   choice of implementation type.
unmodularDesc :: GenState Description

-- | Returns description of what is contained in the Input Parameters
--   module. If user chooses the <a>Bundled</a> input parameter, this
--   module will include the structure for holding the input values. Does
--   not include the structure if they choose <a>Unbundled</a>. This module
--   includes the input-related functions.
inputParametersDesc :: GenState [Description]

-- | Returns a description of the input constructor, checking whether each
--   possible method that may be called by the constructor is defined, and
--   including it in the description if so.
inputConstructorDesc :: GenState Description

-- | Returns a description of what is contained in the Input Format module,
--   if it exists.
inputFormatDesc :: GenState Description

-- | Returns a description of what is contained in the Derived Values
--   module, if it exists.
derivedValuesDesc :: GenState Description

-- | Returns a description of what is contained in the Input Constraints
--   module, if it exists.
inputConstraintsDesc :: GenState Description

-- | Returns a description of what is contained in the Constants module, if
--   it exists.
constModDesc :: GenState Description

-- | Returns a description of what is contained in the Output Format
--   module, if it exists.
outputFormatDesc :: GenState Description

-- | Returns a description for the generated function that stores inputs,
--   if it exists. Checks whether explicit inputs, derived inputs, and
--   constants are defined in the InputParameters class and includes each
--   in the description if so.
inputClassDesc :: GenState Description

-- | Returns a description for the generated class that stores constants,
--   if it exists. If no constants are defined in the Constants class, then
--   it does not exist and an empty description is returned.
constClassDesc :: GenState Description

-- | Returns a description for the generated function that reads input from
--   a file, if it exists.
inFmtFuncDesc :: GenState Description

-- | Returns a description for the generated function that checks input
--   constraints, if it exists.
inConsFuncDesc :: GenState Description

-- | Returns a description for the generated function that calculates
--   derived inputs, if it exists.
dvFuncDesc :: GenState Description

-- | Description of the generated Calculations module.
calcModDesc :: Description

-- | Returns description for generated output-printing function, if it
--   exists.
woFuncDesc :: GenState Description


-- | Contains functions related to the choice of concept matches.
module Language.Drasil.Code.Imperative.ConceptMatch

-- | Concretizes the ConceptMatchMap in Choices to a
--   <a>MatchedConceptMap</a>. Currently we don't have any Choices that
--   would prevent a <a>CodeConcept</a> from being mapped, so we just take
--   the head of the list of <a>CodeConcept</a>s The ConceptMatchMap from
--   choices is passed to chooseConcept' internally, this way any
--   <a>CodeConcept</a> list can be matched to its appropiate <a>UID</a>.
chooseConcept :: Choices -> State [Sentence] MatchedConceptMap

-- | Translates a <a>CodeConcept</a> into GOOL.
conceptToGOOL :: SharedProg r => CodeConcept -> SValue r

module Language.Drasil.Code.Imperative.Import

-- | Gets a chunk's <a>CodeType</a>, by checking which <a>CodeType</a> the
--   user has chosen to match the chunk's <a>Space</a> to.
codeType :: HasSpace c => c -> GenState CodeType

-- | Gets the <a>CodeType</a> for a <a>Space</a>, based on the user's
--   choice.
spaceCodeType :: Space -> GenState CodeType

-- | Generates a public function.
publicFunc :: OOProg r => Label -> VSType r -> Description -> [ParameterChunk] -> Maybe Description -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a public function.
publicFuncProc :: SharedProg r => Label -> VSType r -> Description -> [ParameterChunk] -> Maybe Description -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a private method.
privateMethod :: OOProg r => Label -> VSType r -> Description -> [ParameterChunk] -> Maybe Description -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a private function.
privateFuncProc :: SharedProg r => Label -> VSType r -> Description -> [ParameterChunk] -> Maybe Description -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a public function, defined by its inputs and outputs.
publicInOutFunc :: OOProg r => Label -> Description -> [CodeVarChunk] -> [CodeVarChunk] -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a public function, defined by its inputs and outputs.
publicInOutFuncProc :: SharedProg r => Label -> Description -> [CodeVarChunk] -> [CodeVarChunk] -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a private method, defined by its inputs and outputs.
privateInOutMethod :: OOProg r => Label -> Description -> [CodeVarChunk] -> [CodeVarChunk] -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a private function, defined by its inputs and outputs.
privateInOutFuncProc :: SharedProg r => Label -> Description -> [CodeVarChunk] -> [CodeVarChunk] -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a constructor.
genConstructor :: OOProg r => Label -> Description -> [ParameterChunk] -> [MSBlock r] -> GenState (SMethod r)

-- | Generates a GOOL Variable for a variable represented by a
--   <a>CodeVarChunk</a>.
mkVar :: OOProg r => CodeVarChunk -> r (Scope r) -> GenState (SVariable r)

-- | Generates a GOOL Variable for a variable represented by a
--   <a>CodeVarChunk</a>.
mkVarProc :: SharedProg r => CodeVarChunk -> r (Scope r) -> GenState (SVariable r)

-- | Generates a GOOL Value for a variable represented by a
--   <a>CodeVarChunk</a>.
mkVal :: OOProg r => CodeVarChunk -> r (Scope r) -> GenState (SValue r)

-- | Generates a GOOL Value for a variable represented by a
--   <a>CodeVarChunk</a>.
mkValProc :: SharedProg r => CodeVarChunk -> r (Scope r) -> GenState (SValue r)

-- | Converts an <tt>Expr</tt> to a GOOL Value.
convExpr :: OOProg r => CodeExpr -> GenState (SValue r)

-- | Converts an <tt>Expr</tt> to a GOOL Value.
convExprProc :: SharedProg r => CodeExpr -> GenState (SValue r)

-- | Converts a <a>FuncStmt</a> to a GOOL Statement.
convStmt :: OOProg r => FuncStmt -> GenState (MSStatement r)

-- | Converts a <a>FuncStmt</a> to a GOOL Statement.
convStmtProc :: SharedProg r => FuncStmt -> GenState (MSStatement r)

-- | Converts a <a>Mod</a> to GOOL.
genModDef :: OOProg r => Mod -> GenState (SFile r)

-- | Converts a <a>Mod</a> to GOOL.
genModDefProc :: ProcProg r => Mod -> GenState (SFile r)

-- | Converts a <a>Mod</a>'s functions to GOOL.
genModFuncs :: OOProg r => Mod -> [GenState (SMethod r)]

-- | Converts a <a>Mod</a>'s functions to GOOL.
genModFuncsProc :: SharedProg r => Mod -> [GenState (SMethod r)]

-- | Converts a <a>Mod</a>'s classes to GOOL.
genModClasses :: OOProg r => Mod -> [GenState (SClass r)]

-- | Read from a data description into a <a>MSBlock</a> of
--   <a>MSStatement</a>s.
readData :: OOProg r => DataDesc -> r (Scope r) -> GenState [MSBlock r]

-- | Read from a data description into a <a>MSBlock</a> of
--   <a>MSStatement</a>s.
readDataProc :: SharedProg r => DataDesc -> r (Scope r) -> GenState [MSBlock r]

-- | Converts a <a>Constraint</a> to a <a>CodeExpr</a>.
renderC :: (HasUID c, HasSymbol c) => c -> Constraint CodeExpr -> CodeExpr

module Language.Drasil.Code.Imperative.FunctionCalls

-- | Generates calls to all of the input-related functions. First is the
--   call to the function for reading inputs, then the function for
--   calculating derived inputs, then the function for checking input
--   constraints.
genAllInputCalls :: OOProg r => GenState [MSStatement r]

-- | Generates calls to all of the input-related functions. First is the
--   call to the function for reading inputs, then the function for
--   calculating derived inputs, then the function for checking input
--   constraints.
genAllInputCallsProc :: SharedProg r => GenState [MSStatement r]

-- | Generates a call to the function for reading inputs from a file.
genInputCall :: OOProg r => GenState (Maybe (MSStatement r))

-- | Generates a call to the function for reading inputs from a file.
genInputCallProc :: SharedProg r => GenState (Maybe (MSStatement r))

-- | Generates a call to the function for calculating derived inputs.
genDerivedCall :: OOProg r => GenState (Maybe (MSStatement r))

-- | Generates a call to the function for calculating derived inputs.
genDerivedCallProc :: SharedProg r => GenState (Maybe (MSStatement r))

-- | Generates a call to the function for checking constraints on the
--   input.
genConstraintCall :: OOProg r => GenState (Maybe (MSStatement r))

-- | Generates a call to the function for checking constraints on the
--   input.
genConstraintCallProc :: SharedProg r => GenState (Maybe (MSStatement r))

-- | Generates a call to a calculation function, given the
--   <a>CodeDefinition</a> for the value being calculated.
genCalcCall :: OOProg r => CodeDefinition -> r (Scope r) -> GenState (Maybe (MSStatement r))

-- | Generates a call to a calculation function, given the
--   <a>CodeDefinition</a> for the value being calculated.
genCalcCallProc :: SharedProg r => CodeDefinition -> r (Scope r) -> GenState (Maybe (MSStatement r))

-- | Generates a call to the function for printing outputs.
genOutputCall :: OOProg r => GenState (Maybe (MSStatement r))

-- | Generates a call to the function for printing outputs.
genOutputCallProc :: SharedProg r => GenState (Maybe (MSStatement r))

module Language.Drasil.Code.Imperative.Modules

-- | Generates a controller module.
genMain :: OOProg r => GenState (SFile r)

-- | Generates a controller module.
genMainProc :: ProcProg r => GenState (SFile r)

-- | Generates a main function, to act as the controller for an SCS
--   program. The controller declares input and constant variables, then
--   calls the functions for reading input values, calculating derived
--   inputs, checking constraints, calculating outputs, and printing
--   outputs. Returns Nothing if the user chose to generate a library.
genMainFunc :: OOProg r => GenState (Maybe (SMethod r))

-- | Generates a main function, to act as the controller for an SCS
--   program. The controller declares input and constant variables, then
--   calls the functions for reading input values, calculating derived
--   inputs, checking constraints, calculating outputs, and printing
--   outputs. Returns Nothing if the user chose to generate a library.
genMainFuncProc :: SharedProg r => GenState (Maybe (SMethod r))

-- | Returns <a>Nothing</a> if no inputs or constants are mapped to
--   InputParameters in the class definition map. If any inputs or
--   constants are defined in InputParameters, this generates the
--   InputParameters class containing the inputs and constants as state
--   variables. If the InputParameters constructor is also exported, then
--   the generated class also contains the input-related functions as
--   private methods.
genInputClass :: OOProg r => ClassType -> GenState (Maybe (SClass r))

-- | Generates a function for calculating derived inputs.
genInputDerived :: OOProg r => VisibilityTag -> GenState (Maybe (SMethod r))

-- | Generates a function for calculating derived inputs.
genInputDerivedProc :: SharedProg r => VisibilityTag -> GenState (Maybe (SMethod r))

-- | Generates a single module containing all input-related components.
genInputMod :: OOProg r => GenState [SFile r]

-- | Generates a single module containing all input-related components.
genInputModProc :: ProcProg r => GenState [SFile r]

-- | Generates function that checks constraints on the input.
genInputConstraints :: OOProg r => VisibilityTag -> GenState (Maybe (SMethod r))

-- | Generates function that checks constraints on the input.
genInputConstraintsProc :: SharedProg r => VisibilityTag -> GenState (Maybe (SMethod r))

-- | | Generates a function for reading inputs from a file.
genInputFormat :: OOProg r => VisibilityTag -> GenState (Maybe (SMethod r))

-- | | Generates a function for reading inputs from a file.
genInputFormatProc :: SharedProg r => VisibilityTag -> GenState (Maybe (SMethod r))

-- | Generates a module containing the class where constants are stored.
genConstMod :: OOProg r => GenState [SFile r]

-- | Checks if a class is needed to store constants, i.e. if constants are
--   mapped to the constants class in the class definition map.
checkConstClass :: GenState Bool

-- | Generates a class to store constants, if constants are mapped to the
--   Constants class in the class definition map, otherwise returns
--   Nothing.
genConstClass :: OOProg r => ClassType -> GenState (Maybe (SClass r))

-- | Generates a module containing calculation functions.
genCalcMod :: OOProg r => GenState (SFile r)

-- | Generates a module containing calculation functions.
genCalcModProc :: ProcProg r => GenState (SFile r)

-- | Generates a calculation function corresponding to the
--   <a>CodeDefinition</a>. For solving ODEs, the <tt>ExtLibState</tt>
--   containing the information needed to generate code is found by looking
--   it up in the external library map.
genCalcFunc :: OOProg r => CodeDefinition -> GenState (SMethod r)

-- | Generates a calculation function corresponding to the
--   <a>CodeDefinition</a>. For solving ODEs, the <tt>ExtLibState</tt>
--   containing the information needed to generate code is found by looking
--   it up in the external library map.
genCalcFuncProc :: SharedProg r => CodeDefinition -> GenState (SMethod r)

-- | Generates a module containing the function for printing outputs.
genOutputMod :: OOProg r => GenState [SFile r]

-- | Generates a module containing the function for printing outputs.
genOutputModProc :: ProcProg r => GenState [SFile r]

-- | Generates a function for printing output values.
genOutputFormat :: OOProg r => GenState (Maybe (SMethod r))

-- | Generates a function for printing output values.
genOutputFormatProc :: SharedProg r => GenState (Maybe (SMethod r))

-- | Generates a sample input file compatible with the generated program,
--   if the user chose to.
genSampleInput :: AuxiliarySym r => GenState (Maybe (r (Auxiliary r)))
instance GHC.Classes.Eq Language.Drasil.Code.Imperative.Modules.CalcType


-- | Defines generation functions for SCS code packages.
module Language.Drasil.Code.Imperative.Generator

-- | Initializes the generator's <a>DrasilState</a>. <a>Space</a> parameter
--   is a string representing the date. &lt;math&gt; parameter is the
--   sample input values provided by the user.
generator :: Lang -> String -> [Expr] -> Choices -> CodeSpec -> DrasilState

-- | Generates a package with the given <a>DrasilState</a>. The passed
--   un-representation functions determine which target language the
--   package will be generated in.
generateCode :: (OOProg progRepr, PackageSym packRepr) => Lang -> (progRepr (Program progRepr) -> ProgData) -> (packRepr (Package packRepr) -> PackData) -> DrasilState -> IO ()

-- | Generates a package with the given <a>DrasilState</a>. The passed
--   un-representation functions determine which target language the
--   package will be generated in.
generateCodeProc :: (ProcProg progRepr, PackageSym packRepr) => Lang -> (progRepr (Program progRepr) -> ProgData) -> (packRepr (Package packRepr) -> PackData) -> DrasilState -> IO ()


-- | Re-export code-related smart constructors for external code writing
--   and generation.
module Language.Drasil.Code

-- | Makes code from <a>FileData</a> (<a>FilePath</a>s with module data)
--   and <a>AuxData</a> (<a>FilePath</a>s with auxiliary document
--   information).
makeCode :: [FileData] -> [AuxData] -> Code

-- | Creates the requested <a>Code</a> by producing files.
createCodeFiles :: Code -> IO ()

-- | Initializes the generator's <a>DrasilState</a>. <a>Space</a> parameter
--   is a string representing the date. &lt;math&gt; parameter is the
--   sample input values provided by the user.
generator :: Lang -> String -> [Expr] -> Choices -> CodeSpec -> DrasilState

-- | Generates a package with the given <a>DrasilState</a>. The passed
--   un-representation functions determine which target language the
--   package will be generated in.
generateCode :: (OOProg progRepr, PackageSym packRepr) => Lang -> (progRepr (Program progRepr) -> ProgData) -> (packRepr (Package packRepr) -> PackData) -> DrasilState -> IO ()

-- | Generates a package with the given <a>DrasilState</a>. The passed
--   un-representation functions determine which target language the
--   package will be generated in.
generateCodeProc :: (ProcProg progRepr, PackageSym packRepr) => Lang -> (progRepr (Program progRepr) -> ProgData) -> (packRepr (Package packRepr) -> PackData) -> DrasilState -> IO ()

-- | Reads data from a file and converts the values to <a>Expr</a>s. The
--   file must be formatted according to the <a>DataDesc'</a> passed as a
--   parameter.
readWithDataDesc :: FilePath -> DataDesc' -> IO [Expr]

-- | Defines the DataDesc for the file containing a sample data set, which
--   a user must supply if they want to generate a sample input file.
sampleInputDD :: [CodeVarChunk] -> DataDesc'

-- | The instruction indicates how the generated program should be written
--   down. Full details of Choices documentation
--   <a>https://github.com/JacquesCarette/Drasil/wiki/The-Code-Generator</a>
data Choices
Choices :: [Lang] -> Architecture -> DataInfo -> Maps -> OptionalFeatures -> Constraints -> [ExtLib] -> (InternalConcept -> Name) -> Int -> Choices

-- | Target languages. Choosing multiple means program will be generated in
--   multiple languages.
[lang] :: Choices -> [Lang]

-- | Architecture of the program, include modularity and implementation
--   type
[architecture] :: Choices -> Architecture

-- | Data structure and represent
[dataInfo] :: Choices -> DataInfo

-- | Maps for 'Drasil concepts' to 'code concepts' or <a>Space</a> to a
--   'CodeType
[maps] :: Choices -> Maps

-- | Setting for Softifacts that can be added to the program or left it out
[optFeats] :: Choices -> OptionalFeatures

-- | Constraint violation behaviour. Exception or Warning.
[srsConstraints] :: Choices -> Constraints

-- | List of external libraries what to utilize
[extLibs] :: Choices -> [ExtLib]

-- | Function to get modifiable function names
[icNames] :: Choices -> InternalConcept -> Name

-- | Number of folders to go up in order to obtain the image
[folderVal] :: Choices -> Int

-- | Comment implementation options.
data Comments

-- | Function/method-level comments.
CommentFunc :: Comments

-- | Class-level comments.
CommentClass :: Comments

-- | File/Module-level comments.
CommentMod :: Comments

-- | Doxygen file verbosity options.
data Verbosity
Verbose :: Verbosity
Quiet :: Verbosity

-- | Constraint behaviour options within program.
data ConstraintBehaviour

-- | Print warning when constraint violated.
Warning :: ConstraintBehaviour

-- | Throw exception when constraint violated.
Exception :: ConstraintBehaviour

-- | Constructor to create a Architecture
makeArchit :: Modularity -> ImplementationType -> Architecture

-- | Architecture of a program
data Architecture
Archt :: Modularity -> ImplementationType -> Architecture

-- | How the program should be modularized.
[modularity] :: Architecture -> Modularity

-- | Implementation type, program or library.
[impType] :: Architecture -> ImplementationType

-- | Data of a program - how information should be encoded.
data DataInfo
DataInfo :: Structure -> ConstantStructure -> ConstantRepr -> DataInfo

-- | Structure of inputs (bundled or not).
[inputStructure] :: DataInfo -> Structure

-- | Structure of constants (inlined or bundled or not, or stored with
--   inputs).
[constStructure] :: DataInfo -> ConstantStructure

-- | Representation of constants (as variables or as constants).
[constRepr] :: DataInfo -> ConstantRepr

-- | Constructor to create a DataInfo
makeData :: Structure -> ConstantStructure -> ConstantRepr -> DataInfo

-- | Maps for Concepts and Space
data Maps
Maps :: ConceptMatchMap -> SpaceMatch -> Maps

-- | Map of <a>UID</a>s for Drasil concepts to code concepts. Matching a
--   <a>UID</a> to a code concept means the code concept should be used
--   instead of the chunk associated with the <a>UID</a>.
[conceptMatch] :: Maps -> ConceptMatchMap

-- | Map of <a>Space</a>s to <a>CodeType</a>s Matching a <a>Space</a> to a
--   <a>CodeType</a> means values of the <a>Space</a> should have that
--   <a>CodeType</a> in the generated code.
[spaceMatch] :: Maps -> SpaceMatch

-- | Constructor to create a Maps
makeMaps :: ConceptMatchMap -> SpaceMatch -> Maps

-- | Default mapping between <tt>Space</tt> and <a>CodeType</a>.
spaceToCodeType :: Space -> [CodeType]

-- | Constructor to create a Constraints
makeConstraints :: ConstraintBehaviour -> ConstraintBehaviour -> Constraints

-- | Constructor to create an ODE
makeODE :: [ODEInfo] -> [ODELibPckg] -> ODE

-- | Constructor to create a DocConfig
makeDocConfig :: [Comments] -> Verbosity -> Visibility -> DocConfig

-- | Constructor to create a LogConfig
makeLogConfig :: [Logging] -> FilePath -> LogConfig

-- | Log Configuration
data LogConfig
LogConfig :: [Logging] -> FilePath -> LogConfig

-- | Turns different forms of logging on or off.
[logging] :: LogConfig -> [Logging]

-- | Name of log file.
[logFile] :: LogConfig -> FilePath
data OptionalFeatures
OptFeats :: DocConfig -> LogConfig -> [AuxFile] -> OptionalFeatures
[docConfig] :: OptionalFeatures -> DocConfig
[logConfig] :: OptionalFeatures -> LogConfig

-- | Turns generation of different auxiliary (non-source-code) files on or
--   off.
[auxFiles] :: OptionalFeatures -> [AuxFile]

-- | Constructor to create a OptionalFeatures
makeOptFeats :: DocConfig -> LogConfig -> [AuxFile] -> OptionalFeatures

-- | External Library Options
newtype ExtLib
Math :: ODE -> ExtLib

-- | Program implementation options.
data ImplementationType

-- | Generated code does not include Controller.
Library :: ImplementationType

-- | Generated code includes Controller.
Program :: ImplementationType

-- | Logging options for function calls and variable assignments. Eq
--   instances required for Logging and Comments because generator needs to
--   check membership of these elements in lists
data Logging

-- | Log messages generated for function calls.
LogFunc :: Logging

-- | Log messages generated for variable assignments.
LogVar :: Logging

-- | Modularity of a program.
data Modularity

-- | Different modules. For controller, input, calculations, output.
Modular :: Modularity

-- | All generated code is in one module/file.
Unmodular :: Modularity

-- | Variable structure options.
data Structure

-- | Individual variables
Unbundled :: Structure

-- | Variables bundled in a class
Bundled :: Structure

-- | Constants options.
data ConstantStructure

-- | Inline values for constants.
Inline :: ConstantStructure

-- | Store constants with inputs.
WithInputs :: ConstantStructure

-- | Store constants separately from inputs, whether bundled or unbundled.
Store :: Structure -> ConstantStructure

-- | Options for representing constants in a program.
data ConstantRepr

-- | Constants represented as regular variables.
Var :: ConstantRepr

-- | Use target language's mechanism for defining constants.
Const :: ConstantRepr

-- | Code concepts. For now, just pi.
data CodeConcept
Pi :: CodeConcept

-- | Builds a <a>ConceptMatchMap</a> from an association list of chunks and
--   <tt>CodeConcepts</tt>.
matchConcepts :: HasUID c => [(c, [CodeConcept])] -> ConceptMatchMap

-- | Specifies which <a>CodeType</a> should be used to represent each
--   mathematical <a>Space</a>. [<a>CodeType</a>] is
--   preferentially-ordered, first <a>CodeType</a> that does not conflict
--   with other choices will be selected.
type SpaceMatch = Space -> [CodeType]

-- | Builds a <a>SpaceMatch</a> from an association list of <tt>Spaces</tt>
--   and <tt>CodeTypes</tt>.
matchSpaces :: [(Space, [CodeType])] -> SpaceMatch

-- | Currently we only support two kind of auxiliary files: sample input
--   file, readme. To generate a sample input file compatible with the
--   generated program, <a>FilePath</a> is the path to the user-provided
--   file containing a sample set of input data.
data AuxFile
SampleInput :: FilePath -> AuxFile
ReadME :: AuxFile

-- | Gets the file path to a sample input data set from a <a>Choices</a>
--   structure, if the user chose to generate a sample input file.
getSampleData :: Choices -> Maybe FilePath

-- | Doxygen date-field visibility options.
data Visibility
Show :: Visibility
Hide :: Visibility

-- | Default choices to be used as the base from which design
--   specifications can be built.
defaultChoices :: Choices

-- | Code specifications. Holds information needed to generate code.
data CodeSpec
[CodeSpec] :: HasName a => Name -> [a] -> Purpose -> Background -> [Input] -> [Input] -> [Derived] -> [Output] -> [FilePath] -> [Def] -> ConstraintCEMap -> [Const] -> ConstantMap -> [Mod] -> ChunkDB -> CodeSpec

-- | Get a <a>UID</a> of a chunk corresponding to a <a>Func</a>.
funcUID :: Func -> UID

-- | Convert a <a>Func</a> to an implementation-stage <a>QuantityDict</a>
--   representing the function.
asVC :: Func -> QuantityDict

-- | Defines a <a>CodeSpec</a> based on the <a>SystemInformation</a>,
--   <a>Choices</a>, and <a>Mod</a>s defined by the user.
codeSpec :: SystemInformation -> Choices -> [Mod] -> CodeSpec

-- | Define an assignment statement.
($:=) :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt

-- | Holds module information.
data Mod
Mod :: Name -> Description -> [Import] -> [Class] -> [Func] -> Mod

-- | State variables hold attach a <a>VisibilityTag</a> to a
--   <a>CodeVarChunk</a>.
data StateVariable

-- | Holds a function definition or function data.
data Func
data FuncStmt
[FAsg] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FAsgIndex] :: CodeVarChunk -> Integer -> CodeExpr -> FuncStmt

-- | For-loop; Variable, Start, Stop, Step, Body.
[FFor] :: CodeVarChunk -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt
[FForEach] :: CodeVarChunk -> CodeExpr -> [FuncStmt] -> FuncStmt
[FWhile] :: CodeExpr -> [FuncStmt] -> FuncStmt
[FCond] :: CodeExpr -> [FuncStmt] -> [FuncStmt] -> FuncStmt
[FRet] :: CodeExpr -> FuncStmt
[FThrow] :: String -> FuncStmt
[FTry] :: [FuncStmt] -> [FuncStmt] -> FuncStmt
[FContinue] :: FuncStmt
[FDecDef] :: CodeVarChunk -> CodeExpr -> FuncStmt
[FFuncDef] :: CodeFuncChunk -> [ParameterChunk] -> [FuncStmt] -> FuncStmt
[FVal] :: CodeExpr -> FuncStmt
[FMulti] :: [FuncStmt] -> FuncStmt
[FAppend] :: CodeExpr -> CodeExpr -> FuncStmt

-- | Define a public state variable based on the given <a>CodeVarChunk</a>.
pubStateVar :: CodeVarChunk -> StateVariable

-- | Define a private state variable based on the given
--   <a>CodeVarChunk</a>.
privStateVar :: CodeVarChunk -> StateVariable

-- | Define a declare-define statement.
fDecDef :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> FuncStmt

-- | Define a for-loop. <a>Quantity</a> is for the iteration variable,
--   <a>CodeExpr</a> is the upper bound at that variable (the variable will
--   start with a value of 0). [<a>FuncStmt</a>] is for the loop body.
ffor :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a for-loop. <a>Quantity</a> is for the iteration variable, and
--   3 <a>CodeExpr</a>s for the start, stop, step numbers.
--   [<a>FuncStmt</a>] is for the loop body.
fforRange :: (Quantity c, MayHaveUnit c) => c -> CodeExpr -> CodeExpr -> CodeExpr -> [FuncStmt] -> FuncStmt

-- | Define a function that reads data from a file, according to the given
--   <a>DataDesc</a>.
funcData :: Name -> Description -> DataDesc -> Func

-- | Define a function by providing the <a>FuncStmt</a>s for its body.
--   Other parameters are function name, description, list of parameters,
--   space of the returned value, and description of the returned value.
funcDef :: (Quantity c, MayHaveUnit c) => Name -> Description -> [c] -> Space -> Maybe Description -> [FuncStmt] -> Func

-- | Define a <a>Mod</a> with the given <a>Name</a>, <a>Description</a>,
--   <tt>Classes</tt>, and <tt>Functions</tt>.
packmod :: Name -> Description -> [Class] -> [Func] -> Mod

-- | Constructor for junk data.
junkLine :: Data

-- | Constructor for an unknown amount of lines of data.
multiLine :: LinePattern -> Delim -> Data

-- | Constructor for data with a repeated pattern.
repeated :: [DataItem] -> LinePattern

-- | Constructor for a single line of data.
singleLine :: LinePattern -> Delim -> Data

-- | Constructor for a single datum.
singleton :: DataItem -> Data

-- | External library is a group of <a>Step</a>s
type ExternalLibrary = [StepGroup]

-- | A step can be a call to an external library function or method.
data Step

-- | The first item in the <a>Requires</a> list should be where the
--   function being called is defined.
data FunctionInterface

-- | An argument may contain a named argument and argument information.
data Argument

-- | Specifies an external library.
externalLib :: [StepGroup] -> ExternalLibrary

-- | To be used when there are multiple options for a group of consecutive
--   steps, where a single use-case-specific factor decides which step
--   group to use.
choiceSteps :: [[Step]] -> StepGroup

-- | To be used when there are multiple options for a single step, where a
--   use-case-specific factor decides which step to use.
choiceStep :: [Step] -> StepGroup

-- | Specifies a step which must exist in some form in every use case.
mandatoryStep :: Step -> StepGroup

-- | Specifies multiple consecutive steps that all must exist in some form
--   in every use case.
mandatorySteps :: [Step] -> StepGroup
callStep :: FunctionInterface -> Step

-- | Specifies a call to an external library function.
libFunction :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library method.
libMethod :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies a call to an external library function, where the result is
--   assigned to a variable.
libFunctionWithResult :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library method, where the result is
--   assigned to a variable.
libMethodWithResult :: Requires -> CodeVarChunk -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is assigned to a variable.
libConstructor :: Requires -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library function, where multiple
--   modules from the external library are required, and the result is
--   assigned to a variable.
libConstructorMultiReqs :: [Requires] -> CodeFuncChunk -> [Argument] -> CodeVarChunk -> FunctionInterface

-- | Specifies a call to an external library constructor, where the result
--   is returned.
constructAndReturn :: Requires -> CodeFuncChunk -> [Argument] -> FunctionInterface

-- | Specifies an argument that is not use-case-dependent.
lockedArg :: CodeExpr -> Argument

-- | Specifies a named argument that is not use-case-dependent.
lockedNamedArg :: NamedArgument -> CodeExpr -> Argument

-- | Specifies a use-case-dependent argument whose value can be inlined in
--   the call.
inlineArg :: Space -> Argument

-- | Specifies a use-case-dependent named argument whose value can be
--   inlined in the call.
inlineNamedArg :: NamedArgument -> Space -> Argument

-- | Specifies use-case-dependent argument whose value must be assigned to
--   a variable before being passed in the call.
preDefinedArg :: CodeVarChunk -> Argument

-- | Specifies use-case-dependent named argument whose value must be
--   assigned to a variable before being passed in the call.
preDefinedNamedArg :: NamedArgument -> CodeVarChunk -> Argument

-- | Specifies a function type argument, where the body consists of a
--   single step.
functionArg :: CodeFuncChunk -> [Parameter] -> Step -> Argument

-- | Specifies an argument that is an object of a class that must be
--   defined in the calling program.
customObjArg :: [Requires] -> Description -> CodeVarChunk -> CodeFuncChunk -> ClassInfo -> Argument

-- | Specifies an argument that is an object of a class from the external
--   library. The list of [CodeVarChunk] represents fields of the object
--   that must be set in the calling program.
recordArg :: Requires -> CodeFuncChunk -> CodeVarChunk -> [CodeVarChunk] -> Argument

-- | Specifies a use-case-independent parameter.
lockedParam :: CodeVarChunk -> Parameter

-- | Specifies a parameter whose name depends on the use case.
unnamedParam :: Space -> Parameter

-- | Specifies a class that must be implemented in the calling program.
customClass :: [MethodInfo] -> ClassInfo

-- | Specifies an implementation of an interface from the external library.
implementation :: String -> [MethodInfo] -> ClassInfo

-- | Specifies a constructor.
constructorInfo :: CodeFuncChunk -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a method.
methodInfo :: CodeFuncChunk -> Description -> [Parameter] -> Description -> [Step] -> MethodInfo

-- | Specifies a method that does not return anything.
methodInfoNoReturn :: CodeFuncChunk -> Description -> [Parameter] -> [Step] -> MethodInfo

-- | Specifies a statement where a current solution is appended to a
--   solution list.
appendCurrSol :: CodeExpr -> Step

-- | Specifies a statement where a solution list is populated by iterating
--   through a solution array.
populateSolList :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk -> [Step]

-- | Specifies statements where every index of an array is assigned a
--   value.
assignArrayIndex :: Step

-- | Specifies a statement where a solution is assigned from the field of
--   an object.
assignSolFromObj :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with the
--   first element of an array.
initSolListFromArray :: CodeVarChunk -> Step

-- | Specifies a statement where a solution list is initialized with the
--   first value.
initSolListWithVal :: Step

-- | A solve and populate loop. <a>FunctionInterface</a> for loop
--   condition, <tt>CodeChunk</tt> for solution object, <tt>CodeChunk</tt>
--   for independent var, <a>FunctionInterface</a> for solving,
--   <tt>CodeChunk</tt> for soln array to populate with.
solveAndPopulateWhile :: FunctionInterface -> CodeVarChunk -> CodeVarChunk -> FunctionInterface -> CodeVarChunk -> Step

-- | Specifies a statement where a list is returned, where each value of
--   the list is explicitly defined.
returnExprList :: Step

-- | Specifies a use-case-independent statement that returns a fixed value.
fixedReturn :: CodeExpr -> Step

-- | Specifies a use-case-dependent statement that returns a non-fixed
--   value.
fixedReturn' :: Step

-- | Specifies a statement where a single solution is initialized with a
--   value.
initSolWithVal :: Step

-- | External library call holds a group of step groups.
type ExternalLibraryCall = [StepGroupFill]

-- | Holds a group of steps (<a>StepFill</a>s). The Int is to "choose" from
--   the options in <tt>ExternalLibrary</tt>.
data StepGroupFill
SGF :: Int -> [StepFill] -> StepGroupFill

-- | Mirrors ExternalLibrary's <tt>Step</tt>. A StepFill can be a call to
--   an external library function or method.
data StepFill
CallF :: FunctionIntFill -> StepFill
LoopF :: NonEmpty FunctionIntFill -> [CodeExpr] -> NonEmpty StepFill -> StepFill
StatementF :: [CodeVarChunk] -> [CodeExpr] -> StepFill

-- | Mirrors ExternalLibrary's <tt>FunctionInterface</tt>.
newtype FunctionIntFill
FIF :: [ArgumentFill] -> FunctionIntFill

-- | Mirrors ExternalLibrary's <tt>ArgumentInfo</tt>. Determines the
--   context needed for an argument to work.
data ArgumentFill

-- | For arguments that are completely dependent on use case.
UserDefinedArgF :: Maybe NamedArgument -> CodeExpr -> ArgumentFill

-- | A basic function.
BasicF :: CodeExpr -> ArgumentFill

-- | Fills in the names for the unnamed parameters.
FnF :: [ParameterFill] -> StepFill -> ArgumentFill

-- | List of CodeChunk for state variables.
ClassF :: [StateVariable] -> ClassInfoFill -> ArgumentFill

-- | Fills in the field values.
RecordF :: [CodeExpr] -> ArgumentFill

-- | Mirrors ExternalLibrary's <tt>Parameter</tt>.
data ParameterFill
NameableParamF :: ParameterChunk -> ParameterFill
UserDefined :: ParameterChunk -> ParameterFill

-- | Mirrors ExternalLibrary's <tt>ClassInfo</tt>.
data ClassInfoFill
RegularF :: [MethodInfoFill] -> ClassInfoFill
ImplementsF :: [MethodInfoFill] -> ClassInfoFill

-- | Mirrors ExternalLibrary's <tt>MethodInfo</tt>.
data MethodInfoFill
CIF :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill
MIF :: [ParameterFill] -> NonEmpty StepFill -> MethodInfoFill

-- | Constructs an ExternalLibraryCall specification.
externalLibCall :: [StepGroupFill] -> ExternalLibraryCall

-- | Corresponds to ExternalLibrary's <tt>choiceSteps</tt>. Provides the
--   index of the steps that should be used for the current use case.
choiceStepsFill :: Int -> [StepFill] -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>choiceStep</tt>. Provides the
--   index of the step that should be used for the current use case.
choiceStepFill :: Int -> StepFill -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>mandatorySteps</tt>.
mandatoryStepFill :: StepFill -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>mandatoryStep</tt>.
mandatoryStepsFill :: [StepFill] -> StepGroupFill

-- | Corresponds to ExternalLibrary's <tt>callStep</tt>.
callStepFill :: FunctionIntFill -> StepFill

-- | Corresponds to any of ExternalLibrary's <tt>FunctionInterface</tt>
--   constructors.
libCallFill :: [ArgumentFill] -> FunctionIntFill

-- | Does not correspond to anything in ExternalLibrary. To be used when
--   the presence of an argument is only a consequence of the use case.
userDefinedArgFill :: CodeExpr -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>inlineArg</tt>,
--   <tt>inlineNamedArg</tt>, <tt>preDefinedArg</tt>, and
--   <tt>preDefinedNamedArg</tt>. Provides the <a>CodeExpr</a> for the
--   argument's value.
basicArgFill :: CodeExpr -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>functionArg</tt>.
functionArgFill :: [ParameterFill] -> StepFill -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>customObjArg</tt>. Provides the
--   list of state variables for the class that must be written in the
--   calling program.
customObjArgFill :: [StateVariable] -> ClassInfoFill -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>recordArg</tt>. Provides the list
--   of <a>CodeExpr</a>s for the values of the fields that must be set by
--   the calling program.
recordArgFill :: [CodeExpr] -> ArgumentFill

-- | Corresponds to ExternalLibrary's <tt>unnamedParam</tt>. Provides the
--   <a>CodeVarChunk</a> representing the parameter.
unnamedParamFill :: CodeVarChunk -> ParameterFill

-- | Corresponds to ExternalLibrary's <tt>unnamedParam</tt>. Provides the
--   <a>CodeVarChunk</a> representing the parameter. Specifies that the
--   parameter is passed by value.
unnamedParamPBVFill :: CodeVarChunk -> ParameterFill

-- | Does not correspond to anything in ExternalLibrary. To be used when
--   the presence of a parameter is only a consequence of the use case.
userDefinedParamFill :: CodeVarChunk -> ParameterFill

-- | Corresponds to ExternalLibrary's <tt>customClass</tt>.
customClassFill :: [MethodInfoFill] -> ClassInfoFill

-- | Corresponds to ExternalLibrary's <tt>implementation</tt>.
implementationFill :: [MethodInfoFill] -> ClassInfoFill

-- | Corresponds to ExternalLibrary's <tt>constructorInfo</tt>. Provides
--   Variable-Value pairs for variables initialized by the constructor.
constructorInfoFill :: [ParameterFill] -> [Initializer] -> [StepFill] -> MethodInfoFill

-- | Corresponds to ExternalLibrary's <tt>methodInfo</tt>.
methodInfoFill :: [ParameterFill] -> [StepFill] -> MethodInfoFill

-- | Corresponds to ExternalLibrary's <tt>appendCurrSol</tt>. Provides the
--   <a>CodeVarChunk</a> for the solution list.
appendCurrSolFill :: CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>populateSolList</tt>. Provides
--   the <a>CodeVarChunk</a> for the solution list.
populateSolListFill :: CodeVarChunk -> [StepFill]

-- | Corresponds to ExternalLibrary's <tt>assignArrayIndex</tt>. Provides
--   the <a>CodeVarChunk</a> for the array variable. Provides the
--   <a>CodeExpr</a>s for the values to assign to each array index.
assignArrayIndexFill :: CodeVarChunk -> [CodeExpr] -> StepFill

-- | Corresponds to ExternalLibrary's <tt>assignSolFromObj</tt>. Provides
--   the <a>CodeVarChunk</a> for the variable that the solution should be
--   assigned to.
assignSolFromObjFill :: CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>initSolListFromArray</tt>.
--   Provides the <a>CodeVarChunk</a> for the solution list.
initSolListFromArrayFill :: CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>initSolListWithVal</tt>. Provides
--   the <a>CodeVarChunk</a> for the solution list and the <a>CodeExpr</a>
--   for the initial element of the solution list
initSolListWithValFill :: CodeVarChunk -> CodeExpr -> StepFill

-- | Corresponds to ExternalLibrary's <tt>solveAndPopulateWhile</tt>.
--   Provides the <a>CodeExpr</a> for the upper bound in the while loop
--   condition and the <a>CodeVarChunk</a> for the solution list.
solveAndPopulateWhileFill :: FunctionIntFill -> CodeExpr -> FunctionIntFill -> CodeVarChunk -> StepFill

-- | Corresponds to ExternalLibrary's <tt>returnExprList</tt>. Provides the
--   list of <a>CodeExpr</a>s to return.
returnExprListFill :: [CodeExpr] -> StepFill

-- | Corresponds to ExternalLibrary's <tt>fixedReturn</tt>. No parameters
--   because the statement is not use-case-dependent.
fixedStatementFill :: StepFill

-- | Corresponds to ExternalLibrary's <tt>fixedReturn'</tt>.
--   use-case-specific a <a>CodeExpr</a> that parameterize the statement.
fixedStatementFill' :: CodeExpr -> StepFill

-- | Corresponds to ExternalLibrary's <tt>initSolWithVal</tt>. Provides the
--   <a>CodeVarChunk</a> for one solution and one <a>CodeExpr</a> for the
--   initial element of the solution list
initSolWithValFill :: CodeVarChunk -> CodeExpr -> StepFill

-- | Various OO languages where code may be generated.
data Lang
Cpp :: Lang
CSharp :: Lang
Java :: Lang
Python :: Lang
Swift :: Lang
Julia :: Lang

-- | Members of this class must have all the information necessary for the
--   <a>AuxiliarySym</a> in addition to information necessary to create a
--   package.
class (AuxiliarySym r) => PackageSym r where {
    type Package r;
}
package :: PackageSym r => ProgData -> [r (Auxiliary r)] -> r (Package r)

-- | Members of this class must have a doxygen configuration, ReadMe file,
--   sample input, omptimize doxygen document, information necessary for a
--   makefile, auxiliary helper documents, and auxiliary from data
--   documents.
class AuxiliarySym r where {
    type Auxiliary r;
    type AuxHelper r;
}
doxConfig :: AuxiliarySym r => String -> GOOLState -> Verbosity -> r (Auxiliary r)
readMe :: AuxiliarySym r => ReadMeInfo -> r (Auxiliary r)
sampleInput :: AuxiliarySym r => ChunkDB -> DataDesc -> [Expr] -> r (Auxiliary r)
optimizeDox :: AuxiliarySym r => r (AuxHelper r)
makefile :: AuxiliarySym r => [FilePath] -> ImplementationType -> [Comments] -> GOOLState -> ProgData -> r (Auxiliary r)
auxHelperDoc :: AuxiliarySym r => r (AuxHelper r) -> Doc
auxFromData :: AuxiliarySym r => FilePath -> Doc -> r (Auxiliary r)

-- | The underlying data type for auxiliary files in all renderers.
data AuxData

-- | The underlying data type for packages in all renderers.
data PackData

-- | Basic chunk representation in the code generation context. Contains a
--   QuantityDict and the kind of code (variable or function).
data () => CodeChunk

-- | Chunk representing a variable. The <tt>obv</tt> field represents the
--   object containing this variable, if it is an object field.
data () => CodeVarChunk

-- | Chunk representing a function.
data () => CodeFuncChunk

-- | Construct a <a>CodeVarChunk</a> from a <a>Quantity</a>.
quantvar :: (Quantity c, MayHaveUnit c) => c -> CodeVarChunk

-- | Construct a <a>CodeFuncChunk</a> from a <a>Quantity</a>.
quantfunc :: (Quantity c, MayHaveUnit c) => c -> CodeFuncChunk

-- | Combine an Object-type <a>CodeChunk</a> with another <a>CodeChunk</a>
--   to create a new <a>CodeChunk</a> which represents a field of the
--   first. ex. <tt>ccObjVar obj f = obj.f</tt>.
ccObjVar :: CodeVarChunk -> CodeVarChunk -> CodeVarChunk
listToArray :: CodeVarChunk -> CodeVarChunk

-- | Constructs a CodeExpr representing the field of an actor
field :: CodeExprC r => CodeVarChunk -> CodeVarChunk -> r

-- | Structure to hold ODE information.
data ODEInfo
ODEInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> [CodeExpr] -> [CodeExpr] -> ODEOptions -> ODEInfo

-- | Independent variable.
[indepVar] :: ODEInfo -> CodeVarChunk

-- | Dependent variable.
[depVar] :: ODEInfo -> CodeVarChunk

-- | Other variables in the ODE.
[otherVars] :: ODEInfo -> [CodeVarChunk]
[tInit] :: ODEInfo -> CodeExpr
[tFinal] :: ODEInfo -> CodeExpr

-- | Initial value of an ODE.
[initVal] :: ODEInfo -> [CodeExpr]

-- | ODE equations.
[odeSyst] :: ODEInfo -> [CodeExpr]

-- | Various options related to the ODE, including solution method, step
--   size, initial value of a second order ODE, etc.
[odeOpts] :: ODEInfo -> ODEOptions

-- | Basic <a>ODEInfo</a> constructor.
odeInfo :: CodeVarChunk -> CodeVarChunk -> [CodeVarChunk] -> CodeExpr -> CodeExpr -> [CodeExpr] -> [CodeExpr] -> ODEOptions -> ODEInfo

-- | Create ODEInfo with Other variables, ODEOptions, DifferentialModel,
--   and InitialValueProblem
odeInfo' :: [CodeVarChunk] -> ODEOptions -> DifferentialModel -> InitialValueProblem -> ODEInfo

-- | Other parameters for solving the ODE numerically
data ODEOptions
ODEOpts :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions

-- | Solution method.
[solveMethod] :: ODEOptions -> ODEMethod

-- | Absolute tolerance.
[absTol] :: ODEOptions -> CodeExpr

-- | Relative tolerance.
[relTol] :: ODEOptions -> CodeExpr

-- | Step size.
[stepSize] :: ODEOptions -> CodeExpr

-- | Basic <a>ODEOptions</a> constructor
odeOptions :: ODEMethod -> CodeExpr -> CodeExpr -> CodeExpr -> ODEOptions

-- | Methods for solving ODEs. Includes Runge-Kutta 4-5, Backwards
--   Differentiation Formula, or Adams' method.
data ODEMethod
RK45 :: ODEMethod
BDF :: ODEMethod
Adams :: ODEMethod

-- | Holds an ODE library package.
data ODELibPckg
ODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> Maybe FilePath -> [Lang] -> ODELibPckg

-- | Library name.
[libName] :: ODELibPckg -> Name

-- | Version.
[libVers] :: ODELibPckg -> Version

-- | Library specifications.
[libSpec] :: ODELibPckg -> ExternalLibrary

-- | Library call.
[libCall] :: ODELibPckg -> ODEInfo -> ExternalLibraryCall

-- | Library path.
[libPath] :: ODELibPckg -> Maybe FilePath

-- | Compatible OO languages.
[compatibleLangs] :: ODELibPckg -> [Lang]

-- | Makes an <a>ODELibPckg</a> with the given name, <a>ExternalLibrary</a>
--   specification, <a>ExternalLibraryCall</a> specification parameterized
--   by an <a>ODEInfo</a>, local file path to the library, and list of
--   compatible languages.
mkODELib :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> FilePath -> [Lang] -> ODELibPckg

-- | Makes an <a>ODELibPckg</a> with the given name, <a>ExternalLibrary</a>
--   specification, <a>ExternalLibraryCall</a> specification parameterized
--   by an <a>ODEInfo</a>, and list of compatible languages.
mkODELibNoPath :: Name -> Version -> ExternalLibrary -> (ODEInfo -> ExternalLibraryCall) -> [Lang] -> ODELibPckg
unPP :: PythonProject a -> a
unJP :: JavaProject a -> a
unCSP :: CSharpProject a -> a
unCPPP :: CppProject a -> a
unSP :: SwiftProject a -> a
unJLP :: JuliaProject a -> a

-- | Any quantity can be a named argument (wrapper for
--   <a>QuantityDict</a>), but with more of a focus on generating code
--   arguments.
data NamedArgument

-- | Smart constructor for <a>NamedArgument</a> .
narg :: (Quantity q, MayHaveUnit q) => q -> NamedArgument


-- | Define and collect information about ODEs and ODE solvers from various
--   libraries.
module Data.Drasil.ExternalLibraries.ODELibraries

-- | <a>SciPy</a> ODE library package.
scipyODEPckg :: ODELibPckg

-- | Collects variables needed for SciPy's ODEs as <a>QuantityDict</a>s.
scipyODESymbols :: [QuantityDict]

-- | <a>Oslo</a> ODE library package.
osloPckg :: ODELibPckg

-- | Collects variables needed for Oslo's ODEs as <a>QuantityDict</a>s.
osloSymbols :: [QuantityDict]

-- | Oslo's Vector type behaves like an array, so needs to be represented
--   as one or else will hit type errors in GOOL.
arrayVecDepVar :: ODEInfo -> CodeVarChunk

-- | <a>Apache Commons</a> ODE library package.
apacheODEPckg :: ODELibPckg

-- | Collects variables needed for Apache's ODEs as <a>QuantityDict</a>s.
apacheODESymbols :: [QuantityDict]

-- | <a>odeint</a> ODE library package.
odeintPckg :: ODELibPckg

-- | Collects variables needed for odeint's ODEs as <a>QuantityDict</a>s.
odeintSymbols :: [QuantityDict]
