-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Utils SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-gen
@version 0.1.3.0

module Drasil.Generator.BaseChunkDB
cdb :: [DefinedQuantityDict] -> [IdeaDict] -> [ConceptChunk] -> [UnitDefn] -> [DataDefinition] -> [InstanceModel] -> [GenDefn] -> [TheoryModel] -> [ConceptInstance] -> [LabelledContent] -> [Reference] -> [Citation] -> ChunkDB

module Drasil.Generator.ChunkDump

-- | For debugging purposes, if the system has a <tt>DEBUG_ENV</tt>
--   environment variable set to anything, we can dump the chunk maps in a
--   system to the host system.
dumpEverything :: System -> PrintingInformation -> Path -> IO ()


-- | Defines output formats for the different documents we can generate.
module Drasil.Generator.Formats

-- | When choosing your document, you must specify the filename for the
--   generated output (specified <i>without</i> a file extension).
type Filename = String

-- | Document choices include the type of document as well as the file
--   formats we want to generate as.
data DocChoices
DC :: DocType -> [Format] -> DocChoices
[doctype] :: DocChoices -> DocType
[format] :: DocChoices -> [Format]

-- | Document specifications. Holds the type of document (<a>DocType</a>)
--   and its name (<a>Filename</a>).
data DocSpec
DocSpec :: DocChoices -> Filename -> DocSpec

-- | LaTeX helper.
data DocClass
DocClass :: Maybe String -> String -> DocClass

-- | LaTeX helper for adding packages. Wraps a list of package names.
newtype UsePackages
UsePackages :: [String] -> UsePackages

-- | LaTeX helper.
data ExDoc
ExDoc :: Maybe String -> String -> ExDoc
instance Build.Drasil.Make.Import.RuleTransformer Drasil.Generator.Formats.DocSpec


-- | Defines Drasil generator functions.
module Drasil.Generator.Generate

-- | Generate a number of artifacts based on a list of recipes.
gen :: DocSpec -> Document -> PrintingInformation -> IO ()

-- | Generates traceability graphs as .dot files.
genDot :: System -> IO ()

-- | Calls the code generator.
genCode :: Choices -> CodeSpec -> IO ()

-- | Document types include Software Requirements Specification and
--   Website. Choosing SRS will generate both TeX and HTML files, while
--   Website generates only as HTML. This also determines what folders the
--   generated files will be placed into.
data () => DocType
SRS :: DocType
Website :: DocType
Lesson :: DocType

-- | Document specifications. Holds the type of document (<a>DocType</a>)
--   and its name (<a>Filename</a>).
data DocSpec
DocSpec :: DocChoices -> Filename -> DocSpec

-- | Document choices include the type of document as well as the file
--   formats we want to generate as.
data DocChoices
DC :: DocType -> [Format] -> DocChoices

-- | Possible formats for printer output.
data () => Format
TeX :: Format
HTML :: Format
Jupyter :: Format
MDBook :: Format

-- | Constructor for users to choose their document options
docChoices :: DocType -> [Format] -> DocChoices

module Drasil.Generator.TypeCheck
typeCheckSI :: System -> IO ()

module Drasil.Generator
