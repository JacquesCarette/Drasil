-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - GOOL SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-gool
@version 0.1.1.0

module GOOL.Drasil.Classes
class Pair p
pfst :: Pair p => p x y a -> x a
psnd :: Pair p => p x y b -> y b
pair :: Pair p => x a -> y a -> p x y a

module GOOL.Drasil.CodeAnalysis
data ExceptionType
Standard :: ExceptionType
FileNotFound :: ExceptionType
IO :: ExceptionType
data Exception
printExc :: Exception -> String
hasLoc :: Exception -> Bool
exception :: String -> String -> Exception
stdExc :: String -> Exception
class HasException r
toConcreteExc :: HasException r => ExceptionType -> r Exception
instance GHC.Classes.Eq GOOL.Drasil.CodeAnalysis.ExceptionType


-- | Defines the <a>CodeType</a> data type
module GOOL.Drasil.CodeType
type ClassName = String
data CodeType
Boolean :: CodeType
Integer :: CodeType
Float :: CodeType
Double :: CodeType
Char :: CodeType
String :: CodeType
InFile :: CodeType
OutFile :: CodeType
List :: CodeType -> CodeType
Array :: CodeType -> CodeType
Object :: ClassName -> CodeType
Func :: [CodeType] -> CodeType -> CodeType
Void :: CodeType
instance GHC.Show.Show GOOL.Drasil.CodeType.CodeType
instance GHC.Classes.Eq GOOL.Drasil.CodeType.CodeType

module GOOL.Drasil.AST
data Terminator
Semi :: Terminator
Empty :: Terminator
data ScopeTag
Pub :: ScopeTag
Priv :: ScopeTag
data QualifiedName
qualName :: String -> String -> QualifiedName
data FileType
Combined :: FileType
Source :: FileType
Header :: FileType
isSource :: FileType -> Bool
data Binding
Static :: Binding
Dynamic :: Binding
onBinding :: Binding -> a -> a -> a
data BindData
bd :: Binding -> Doc -> BindData
data FileData
fileD :: FilePath -> ModData -> FileData
updateFileMod :: ModData -> FileData -> FileData
data FuncData
fd :: TypeData -> Doc -> FuncData
data ModData
md :: String -> Doc -> ModData
updateMod :: (Doc -> Doc) -> ModData -> ModData
data MethodData
mthd :: Doc -> MethodData
updateMthd :: MethodData -> (Doc -> Doc) -> MethodData
data OpData
od :: Int -> Doc -> OpData
data ParamData
pd :: VarData -> Doc -> ParamData
paramName :: ParamData -> String
updateParam :: (Doc -> Doc) -> ParamData -> ParamData
data ProgData
progD :: String -> String -> [FileData] -> ProgData
emptyProg :: ProgData
data StateVarData
svd :: ScopeTag -> Doc -> (Doc, Terminator) -> StateVarData
data TypeData
td :: CodeType -> String -> Doc -> TypeData
data ValData
vd :: Maybe Int -> Maybe Integer -> TypeData -> Doc -> ValData
updateValDoc :: (Doc -> Doc) -> ValData -> ValData
data VarData
vard :: Binding -> String -> TypeData -> Doc -> VarData
data CommonThunk s
pureValue :: s ValData -> CommonThunk s
vectorize :: (s ValData -> s ValData) -> CommonThunk s -> CommonThunk s
vectorize2 :: (s ValData -> s ValData -> s ValData) -> CommonThunk s -> CommonThunk s -> CommonThunk s
sumComponents :: CommonThunk s -> CommonThunk s
commonVecIndex :: (s ValData -> s ValData) -> CommonThunk s -> s ValData
commonThunkElim :: (CommonThunk s -> a) -> (CommonThunk s -> a) -> CommonThunk s -> a
commonThunkDim :: (s ValData -> s ValData) -> CommonThunk s -> s ValData
instance GHC.Classes.Eq GOOL.Drasil.AST.ScopeTag
instance GHC.Classes.Ord GOOL.Drasil.AST.QualifiedName
instance GHC.Classes.Eq GOOL.Drasil.AST.QualifiedName

module GOOL.Drasil.Helpers
angles :: Doc -> Doc
doubleQuotedText :: String -> Doc
hicat :: Doc -> [Doc] -> Doc
vicat :: Doc -> [Doc] -> Doc
vibcat :: [Doc] -> Doc
vmap :: (a -> Doc) -> [a] -> Doc
vimap :: Doc -> (a -> Doc) -> [a] -> Doc
emptyIfEmpty :: Doc -> Doc -> Doc
emptyIfNull :: [a] -> Doc -> Doc
toCode :: Monad r => a -> r a
toState :: a -> State s a
onCodeValue :: Functor r => (a -> b) -> r a -> r b
onStateValue :: (a -> b) -> State s a -> State s b
on2CodeValues :: Applicative r => (a -> b -> c) -> r a -> r b -> r c
on2StateValues :: (a -> b -> c) -> State s a -> State s b -> State s c
on3CodeValues :: Applicative r => (a -> b -> c -> d) -> r a -> r b -> r c -> r d
on3StateValues :: (a -> b -> c -> d) -> State s a -> State s b -> State s c -> State s d
onCodeList :: Monad m => ([a] -> b) -> [m a] -> m b
onStateList :: ([a] -> b) -> [State s a] -> State s b
on2StateLists :: ([a] -> [b] -> c) -> [State s a] -> [State s b] -> State s c
getInnerType :: CodeType -> CodeType
on2StateWrapped :: Monad m => (a -> b -> m c) -> m a -> m b -> m c
getNestDegree :: Integer -> CodeType -> Integer

module GOOL.Drasil.State
type GS = State GOOLState
data GOOLState
GS :: [FilePath] -> [FilePath] -> Maybe FilePath -> Map String ClassName -> Map QualifiedName [ExceptionType] -> Map QualifiedName [QualifiedName] -> Bool -> Bool -> GOOLState
[_headers] :: GOOLState -> [FilePath]
[_sources] :: GOOLState -> [FilePath]
[_mainMod] :: GOOLState -> Maybe FilePath
[_classMap] :: GOOLState -> Map String ClassName
[_methodExceptionMap] :: GOOLState -> Map QualifiedName [ExceptionType]
[_callMap] :: GOOLState -> Map QualifiedName [QualifiedName]
[_throwUsed] :: GOOLState -> Bool
[_errorDefined] :: GOOLState -> Bool
type FS = State FileState
type CS = State ClassState
type MS = State MethodState
type VS = State ValueState
lensFStoGS :: Lens' FileState GOOLState
lensGStoFS :: Lens' GOOLState FileState
lensMStoGS :: Lens' MethodState GOOLState
lensFStoCS :: Lens' FileState ClassState
lensFStoMS :: Lens' FileState MethodState
lensFStoVS :: Lens' FileState ValueState
lensCStoMS :: Lens' ClassState MethodState
lensMStoCS :: Lens' MethodState ClassState
lensCStoVS :: Lens' ClassState ValueState
lensMStoFS :: Lens' MethodState FileState
lensMStoVS :: Lens' MethodState ValueState
lensVStoFS :: Lens' ValueState FileState
lensVStoMS :: Lens' ValueState MethodState
lensCStoFS :: Lens' ClassState FileState
headers :: Lens' GOOLState [FilePath]
sources :: Lens' GOOLState [FilePath]
mainMod :: Lens' GOOLState (Maybe FilePath)
currMain :: Lens' FileState Bool
currFileType :: Lens' FileState FileType
currParameters :: Lens' MethodState [String]
initialState :: GOOLState
initialFS :: FileState
modifyReturn :: (s -> s) -> a -> State s a
modifyReturnFunc :: (b -> s -> s) -> (b -> a) -> State s b -> State s a
modifyReturnList :: [State s b] -> (s -> s) -> ([b] -> a) -> State s a
revFiles :: GOOLState -> GOOLState
addFile :: FileType -> FilePath -> GOOLState -> GOOLState
addCombinedHeaderSource :: FilePath -> GOOLState -> GOOLState
addHeader :: FilePath -> GOOLState -> GOOLState
addSource :: FilePath -> GOOLState -> GOOLState
addProgNameToPaths :: String -> GOOLState -> GOOLState
setMainMod :: String -> GOOLState -> GOOLState
addLangImport :: String -> MethodState -> MethodState
addLangImportVS :: String -> ValueState -> ValueState
addExceptionImports :: [Exception] -> MethodState -> MethodState
getLangImports :: FS [String]
addLibImport :: String -> MethodState -> MethodState
addLibImportVS :: String -> ValueState -> ValueState
addLibImports :: [String] -> MethodState -> MethodState
getLibImports :: FS [String]
addModuleImport :: String -> MethodState -> MethodState
addModuleImportVS :: String -> ValueState -> ValueState
getModuleImports :: FS [String]
addHeaderLangImport :: String -> ValueState -> ValueState
getHeaderLangImports :: FS [String]
addHeaderLibImport :: String -> MethodState -> MethodState
getHeaderLibImports :: FS [String]
addHeaderModImport :: String -> ValueState -> ValueState
getHeaderModImports :: FS [String]
addDefine :: String -> ValueState -> ValueState
getDefines :: FS [String]
addHeaderDefine :: String -> ValueState -> ValueState
getHeaderDefines :: FS [String]
addUsing :: String -> ValueState -> ValueState
getUsing :: FS [String]
addHeaderUsing :: String -> ValueState -> ValueState
getHeaderUsing :: FS [String]
setFileType :: FileType -> FileState -> FileState
setModuleName :: String -> FileState -> FileState
getModuleName :: FS String
setClassName :: String -> ClassState -> ClassState
getClassName :: MS ClassName
setCurrMain :: MethodState -> MethodState
getCurrMain :: FS Bool
addClass :: String -> ClassState -> ClassState
getClasses :: FS [String]
updateClassMap :: String -> FileState -> FileState
getClassMap :: VS (Map String String)
updateMethodExcMap :: String -> MethodState -> MethodState
getMethodExcMap :: VS (Map QualifiedName [ExceptionType])
updateCallMap :: String -> MethodState -> MethodState
callMapTransClosure :: GOOLState -> GOOLState
updateMEMWithCalls :: GOOLState -> GOOLState
addParameter :: String -> MethodState -> MethodState
getParameters :: MS [String]
setOutputsDeclared :: MethodState -> MethodState
isOutputsDeclared :: MS Bool
addException :: ExceptionType -> MethodState -> MethodState
addExceptions :: [ExceptionType] -> ValueState -> ValueState
getExceptions :: MS [ExceptionType]
addCall :: QualifiedName -> ValueState -> ValueState
setMainDoc :: Doc -> MethodState -> MethodState
getMainDoc :: FS Doc
setScope :: ScopeTag -> MethodState -> MethodState
getScope :: MS ScopeTag
setCurrMainFunc :: Bool -> MethodState -> MethodState
getCurrMainFunc :: MS Bool
setThrowUsed :: MethodState -> MethodState
getThrowUsed :: MS Bool
setErrorDefined :: MethodState -> MethodState
getErrorDefined :: MS Bool
addIter :: String -> MethodState -> MethodState
getIter :: MS [String]
resetIter :: String -> MethodState -> MethodState
incrementLine :: MethodState -> MethodState
incrementWord :: MethodState -> MethodState
getLineIndex :: MS Index
getWordIndex :: MS Index
resetIndices :: MethodState -> MethodState
useVarName :: String -> MethodState -> MethodState
genVarName :: [String] -> String -> MS String
genLoopIndex :: MS String

module GOOL.Drasil.InterfaceCommon
type Label = String
type Library = String
type MSBody a = MS (a (Body a))
type MSBlock a = MS (a (Block a))
type VSType a = VS (a (Type a))
type SVariable a = VS (a (Variable a))
type SValue a = VS (a (Value a))
type VSThunk a = VS (a (Thunk a))
type MSStatement a = MS (a (Statement a))
type MSParameter a = MS (a (Parameter a))
type SMethod a = MS (a (Method a))
type NamedArgs r = [(SVariable r, SValue r)]
type Initializers r = [(SVariable r, SValue r)]
type MixedCall r = Label -> VSType r -> [SValue r] -> NamedArgs r -> SValue r
type MixedCtorCall r = VSType r -> [SValue r] -> NamedArgs r -> SValue r
type PosCall r = Label -> VSType r -> [SValue r] -> SValue r
type PosCtorCall r = VSType r -> [SValue r] -> SValue r
type InOutCall r = Label -> [SValue r] -> [SVariable r] -> [SVariable r] -> MSStatement r
type InOutFunc r = [SVariable r] -> [SVariable r] -> [SVariable r] -> MSBody r -> SMethod r
type DocInOutFunc r = String -> [(String, SVariable r)] -> [(String, SVariable r)] -> [(String, SVariable r)] -> MSBody r -> SMethod r
class (VectorType r, VectorDecl r, VectorThunk r, VectorExpression r, ThunkAssign r, AssignStatement r, DeclStatement r, IOStatement r, StringStatement r, FuncAppStatement r, CommentStatement r, ControlStatement r, InternalList r, Argument r, Literal r, MathConstant r, VariableValue r, CommandLineArgs r, NumericExpression r, BooleanExpression r, Comparison r, ValueExpression r, List r, TypeElim r, VariableElim r) => SharedProg r
class (BlockSym r) => BodySym r where {
    type Body r;
}
body :: BodySym r => [MSBlock r] -> MSBody r
addComments :: BodySym r => Label -> MSBody r -> MSBody r
bodyStatements :: BodySym r => [MSStatement r] -> MSBody r
oneLiner :: BodySym r => MSStatement r -> MSBody r
class (StatementSym r) => BlockSym r where {
    type Block r;
}
block :: BlockSym r => [MSStatement r] -> MSBlock r
class TypeSym r where {
    type Type r;
}
bool :: TypeSym r => VSType r
int :: TypeSym r => VSType r
float :: TypeSym r => VSType r
double :: TypeSym r => VSType r
char :: TypeSym r => VSType r
string :: TypeSym r => VSType r
infile :: TypeSym r => VSType r
outfile :: TypeSym r => VSType r
listType :: TypeSym r => VSType r -> VSType r
arrayType :: TypeSym r => VSType r -> VSType r
listInnerType :: TypeSym r => VSType r -> VSType r
funcType :: TypeSym r => [VSType r] -> VSType r -> VSType r
void :: TypeSym r => VSType r
class (TypeSym r) => TypeElim r
getType :: TypeElim r => r (Type r) -> CodeType
getTypeString :: TypeElim r => r (Type r) -> String
class (TypeSym r) => VariableSym r where {
    type Variable r;
}
var :: VariableSym r => Label -> VSType r -> SVariable r
constant :: VariableSym r => Label -> VSType r -> SVariable r
extVar :: VariableSym r => Library -> Label -> VSType r -> SVariable r
arrayElem :: VariableSym r => Integer -> SVariable r -> SVariable r
class (VariableSym r) => VariableElim r
variableName :: VariableElim r => r (Variable r) -> String
variableType :: VariableElim r => r (Variable r) -> r (Type r)
listOf :: VariableSym r => Label -> VSType r -> SVariable r
listVar :: VariableSym r => Label -> VSType r -> SVariable r
class (TypeSym r) => ValueSym r where {
    type Value r;
}
valueType :: ValueSym r => r (Value r) -> r (Type r)
class (ValueSym r) => Argument r
pointerArg :: Argument r => SValue r -> SValue r
class (ValueSym r) => Literal r
litTrue :: Literal r => SValue r
litFalse :: Literal r => SValue r
litChar :: Literal r => Char -> SValue r
litDouble :: Literal r => Double -> SValue r
litFloat :: Literal r => Float -> SValue r
litInt :: Literal r => Integer -> SValue r
litString :: Literal r => String -> SValue r
litArray :: Literal r => VSType r -> [SValue r] -> SValue r
litList :: Literal r => VSType r -> [SValue r] -> SValue r
litZero :: (TypeElim r, Literal r) => VSType r -> SValue r
class (ValueSym r) => MathConstant r
pi :: MathConstant r => SValue r
class (VariableSym r, ValueSym r) => VariableValue r
valueOf :: VariableValue r => SVariable r -> SValue r
class (ValueSym r) => CommandLineArgs r
arg :: CommandLineArgs r => Integer -> SValue r
argsList :: CommandLineArgs r => SValue r
argExists :: CommandLineArgs r => Integer -> SValue r
class (ValueSym r) => NumericExpression r
(#~) :: NumericExpression r => SValue r -> SValue r
(#/^) :: NumericExpression r => SValue r -> SValue r
(#|) :: NumericExpression r => SValue r -> SValue r
(#+) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#-) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#*) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#/) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#%) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#^) :: NumericExpression r => SValue r -> SValue r -> SValue r
log :: NumericExpression r => SValue r -> SValue r
ln :: NumericExpression r => SValue r -> SValue r
exp :: NumericExpression r => SValue r -> SValue r
sin :: NumericExpression r => SValue r -> SValue r
cos :: NumericExpression r => SValue r -> SValue r
tan :: NumericExpression r => SValue r -> SValue r
csc :: NumericExpression r => SValue r -> SValue r
sec :: NumericExpression r => SValue r -> SValue r
cot :: NumericExpression r => SValue r -> SValue r
arcsin :: NumericExpression r => SValue r -> SValue r
arccos :: NumericExpression r => SValue r -> SValue r
arctan :: NumericExpression r => SValue r -> SValue r
floor :: NumericExpression r => SValue r -> SValue r
ceil :: NumericExpression r => SValue r -> SValue r
infixl 5 #+
infixl 5 #-
infixl 6 #/
infixl 6 #*
infixl 8 #~
infixl 7 #/^
infixl 7 #|
infixl 6 #%
infixl 7 #^
class (ValueSym r) => BooleanExpression r
(?!) :: BooleanExpression r => SValue r -> SValue r
(?&&) :: BooleanExpression r => SValue r -> SValue r -> SValue r
(?||) :: BooleanExpression r => SValue r -> SValue r -> SValue r
infixl 2 ?&&
infixl 1 ?||
infixr 6 ?!
class (ValueSym r) => Comparison r
(?<) :: Comparison r => SValue r -> SValue r -> SValue r
(?<=) :: Comparison r => SValue r -> SValue r -> SValue r
(?>) :: Comparison r => SValue r -> SValue r -> SValue r
(?>=) :: Comparison r => SValue r -> SValue r -> SValue r
(?==) :: Comparison r => SValue r -> SValue r -> SValue r
(?!=) :: Comparison r => SValue r -> SValue r -> SValue r
infixl 4 ?<
infixl 4 ?<=
infixl 4 ?>
infixl 4 ?>=
infixl 3 ?==
infixl 3 ?!=
class (VariableSym r, ValueSym r) => ValueExpression r
inlineIf :: ValueExpression r => SValue r -> SValue r -> SValue r -> SValue r
funcAppMixedArgs :: ValueExpression r => MixedCall r
extFuncAppMixedArgs :: ValueExpression r => Library -> MixedCall r
libFuncAppMixedArgs :: ValueExpression r => Library -> MixedCall r
lambda :: ValueExpression r => [SVariable r] -> SValue r -> SValue r
notNull :: ValueExpression r => SValue r -> SValue r
funcApp :: ValueExpression r => PosCall r
funcAppNamedArgs :: ValueExpression r => Label -> VSType r -> NamedArgs r -> SValue r
extFuncApp :: ValueExpression r => Library -> PosCall r
libFuncApp :: ValueExpression r => Library -> PosCall r
exists :: ValueExpression r => SValue r -> SValue r
class (ValueSym r) => List r

-- | Does any necessary conversions from GOOL's zero-indexed assumptions to
--   the target language's assumptions
intToIndex :: List r => SValue r -> SValue r

-- | Does any necessary conversions from the target language's indexing
--   assumptions assumptions to GOOL's zero-indexed assumptions
indexToInt :: List r => SValue r -> SValue r

-- | Finds the size of a list. Arguments are: List
listSize :: List r => SValue r -> SValue r

-- | Inserts a value into a list. Arguments are: List, Index, Value
listAdd :: List r => SValue r -> SValue r -> SValue r -> SValue r

-- | Appens a value to a list. Arguments are: List, Value
listAppend :: List r => SValue r -> SValue r -> SValue r

-- | Gets the value of an index of a list. Arguments are: List, Index
listAccess :: List r => SValue r -> SValue r -> SValue r

-- | Sets the value of an index of a list. Arguments are: List, Index,
--   Value
listSet :: List r => SValue r -> SValue r -> SValue r -> SValue r

-- | Finds the index of the first occurrence of a value in a list.
--   Arguments are: List, Value
indexOf :: List r => SValue r -> SValue r -> SValue r
class (ValueSym r) => InternalList r
listSlice' :: InternalList r => Maybe (SValue r) -> Maybe (SValue r) -> Maybe (SValue r) -> SVariable r -> SValue r -> MSBlock r

-- | Creates a slice of a list and assigns it to a variable. Arguments are:
--   Variable to assign List to read from [Start index] inclusive. (if
--   Nothing, then list start if step &gt; 0, list end if step &lt; 0) [End
--   index] exclusive. (if Nothing, then list end if step &gt; 0, list
--   start if step &gt; 0) [Step] (if Nothing, then defaults to 1)
listSlice :: InternalList r => SVariable r -> SValue r -> Maybe (SValue r) -> Maybe (SValue r) -> Maybe (SValue r) -> MSBlock r
listIndexExists :: (List r, Comparison r) => SValue r -> SValue r -> SValue r
at :: List r => SValue r -> SValue r -> SValue r
class ThunkSym r where {
    type Thunk (r :: Type -> Type);
}
class TypeSym r => VectorType r
vecType :: VectorType r => VSType r -> VSType r
class (VariableSym r, StatementSym r) => VectorDecl r
vecDec :: VectorDecl r => Integer -> SVariable r -> MSStatement r
vecDecDef :: VectorDecl r => SVariable r -> [SValue r] -> MSStatement r
class (VariableSym r, ThunkSym r) => VectorThunk r
vecThunk :: VectorThunk r => SVariable r -> VSThunk r
class (ThunkSym r, ValueSym r) => VectorExpression r
vecScale :: VectorExpression r => SValue r -> VSThunk r -> VSThunk r
vecAdd :: VectorExpression r => VSThunk r -> VSThunk r -> VSThunk r
vecIndex :: VectorExpression r => SValue r -> VSThunk r -> SValue r
vecDot :: VectorExpression r => VSThunk r -> VSThunk r -> VSThunk r
class (VariableSym r, ThunkSym r, StatementSym r) => ThunkAssign r
thunkAssign :: ThunkAssign r => SVariable r -> VSThunk r -> MSStatement r
class (ValueSym r) => StatementSym r where {
    type Statement r;
}
valStmt :: StatementSym r => SValue r -> MSStatement r
multi :: StatementSym r => [MSStatement r] -> MSStatement r
class (VariableSym r, StatementSym r) => AssignStatement r
(&-=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
(&+=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
(&++) :: AssignStatement r => SVariable r -> MSStatement r
(&--) :: AssignStatement r => SVariable r -> MSStatement r
assign :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
infixl 8 &++
infixl 1 &+=
infixl 1 &-=
infixl 8 &--
(&=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
infixr 1 &=
assignToListIndex :: (StatementSym r, VariableValue r, List r) => SVariable r -> SValue r -> SValue r -> MSStatement r
class (VariableSym r, StatementSym r) => DeclStatement r
varDec :: DeclStatement r => SVariable r -> MSStatement r
varDecDef :: DeclStatement r => SVariable r -> SValue r -> MSStatement r
listDec :: DeclStatement r => Integer -> SVariable r -> MSStatement r
listDecDef :: DeclStatement r => SVariable r -> [SValue r] -> MSStatement r
arrayDec :: DeclStatement r => Integer -> SVariable r -> MSStatement r
arrayDecDef :: DeclStatement r => SVariable r -> [SValue r] -> MSStatement r
constDecDef :: DeclStatement r => SVariable r -> SValue r -> MSStatement r
funcDecDef :: DeclStatement r => SVariable r -> [SVariable r] -> MSBody r -> MSStatement r
class (VariableSym r, StatementSym r) => IOStatement r
print :: IOStatement r => SValue r -> MSStatement r
printLn :: IOStatement r => SValue r -> MSStatement r
printStr :: IOStatement r => String -> MSStatement r
printStrLn :: IOStatement r => String -> MSStatement r
printFile :: IOStatement r => SValue r -> SValue r -> MSStatement r
printFileLn :: IOStatement r => SValue r -> SValue r -> MSStatement r
printFileStr :: IOStatement r => SValue r -> String -> MSStatement r
printFileStrLn :: IOStatement r => SValue r -> String -> MSStatement r
getInput :: IOStatement r => SVariable r -> MSStatement r
discardInput :: IOStatement r => MSStatement r
getFileInput :: IOStatement r => SValue r -> SVariable r -> MSStatement r
discardFileInput :: IOStatement r => SValue r -> MSStatement r
openFileR :: IOStatement r => SVariable r -> SValue r -> MSStatement r
openFileW :: IOStatement r => SVariable r -> SValue r -> MSStatement r
openFileA :: IOStatement r => SVariable r -> SValue r -> MSStatement r
closeFile :: IOStatement r => SValue r -> MSStatement r
getFileInputLine :: IOStatement r => SValue r -> SVariable r -> MSStatement r
discardFileLine :: IOStatement r => SValue r -> MSStatement r
getFileInputAll :: IOStatement r => SValue r -> SVariable r -> MSStatement r
class (VariableSym r, StatementSym r) => StringStatement r
stringSplit :: StringStatement r => Char -> SVariable r -> SValue r -> MSStatement r
stringListVals :: StringStatement r => [SVariable r] -> SValue r -> MSStatement r
stringListLists :: StringStatement r => [SVariable r] -> SValue r -> MSStatement r
class (VariableSym r, StatementSym r) => FuncAppStatement r
inOutCall :: FuncAppStatement r => InOutCall r
extInOutCall :: FuncAppStatement r => Library -> InOutCall r
class (StatementSym r) => CommentStatement r
comment :: CommentStatement r => Comment -> MSStatement r
class (BodySym r, VariableSym r) => ControlStatement r
break :: ControlStatement r => MSStatement r
continue :: ControlStatement r => MSStatement r
returnStmt :: ControlStatement r => SValue r -> MSStatement r
throw :: ControlStatement r => Label -> MSStatement r

-- | String of if-else statements. Arguments: List of predicates and bodies
--   (if this then that), Body for else branch
ifCond :: ControlStatement r => [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
switch :: ControlStatement r => SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
ifExists :: ControlStatement r => SValue r -> MSBody r -> MSBody r -> MSStatement r
for :: ControlStatement r => MSStatement r -> SValue r -> MSStatement r -> MSBody r -> MSStatement r
forRange :: ControlStatement r => SVariable r -> SValue r -> SValue r -> SValue r -> MSBody r -> MSStatement r
forEach :: ControlStatement r => SVariable r -> SValue r -> MSBody r -> MSStatement r
while :: ControlStatement r => SValue r -> MSBody r -> MSStatement r
tryCatch :: ControlStatement r => MSBody r -> MSBody r -> MSStatement r
ifNoElse :: ControlStatement r => [(SValue r, MSBody r)] -> MSStatement r
switchAsIf :: (ControlStatement r, Comparison r) => SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
class ScopeSym r where {
    type Scope r;
}
private :: ScopeSym r => r (Scope r)
public :: ScopeSym r => r (Scope r)
class (VariableSym r) => ParameterSym r where {
    type Parameter r;
}
param :: ParameterSym r => SVariable r -> MSParameter r
pointerParam :: ParameterSym r => SVariable r -> MSParameter r
class (BodySym r, ParameterSym r, ScopeSym r) => MethodSym r where {
    type Method r;
}
docMain :: MethodSym r => MSBody r -> SMethod r
function :: MethodSym r => Label -> r (Scope r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
mainFunction :: MethodSym r => MSBody r -> SMethod r
docFunc :: MethodSym r => String -> [String] -> Maybe String -> SMethod r -> SMethod r
inOutFunc :: MethodSym r => Label -> r (Scope r) -> InOutFunc r
docInOutFunc :: MethodSym r => Label -> r (Scope r) -> DocInOutFunc r
convType :: TypeSym r => CodeType -> VSType r

module GOOL.Drasil.InterfaceProc
type GSProgram a = GS (a (Program a))
type SFile a = FS (a (File a))
type FSModule a = FS (a (Module a))
class (SharedProg r, ProgramSym r) => ProcProg r
class (FileSym r) => ProgramSym r where {
    type Program r;
}
prog :: ProgramSym r => Label -> Label -> [SFile r] -> GSProgram r
class (ModuleSym r) => FileSym r where {
    type File r;
}
fileDoc :: FileSym r => FSModule r -> SFile r
docMod :: FileSym r => String -> [String] -> String -> SFile r -> SFile r
class (MethodSym r) => ModuleSym r where {
    type Module r;
}
buildModule :: ModuleSym r => Label -> [Label] -> [SMethod r] -> FSModule r

module GOOL.Drasil.InterfaceGOOL
type GSProgram a = GS (a (Program a))
type SFile a = FS (a (File a))
type FSModule a = FS (a (Module a))
type SClass a = CS (a (Class a))
type VSFunction a = VS (a (Function a))
type CSStateVar a = CS (a (StateVar a))
class (SharedProg r, ProgramSym r, OOVariableValue r, OODeclStatement r, OOFuncAppStatement r, OOValueExpression r, InternalValueExp r, GetSet r, ObserverPattern r, StrategyPattern r) => OOProg r
class (FileSym r) => ProgramSym r where {
    type Program r;
}
prog :: ProgramSym r => Label -> Label -> [SFile r] -> GSProgram r
class (ModuleSym r) => FileSym r where {
    type File r;
}
fileDoc :: FileSym r => FSModule r -> SFile r
docMod :: FileSym r => String -> [String] -> String -> SFile r -> SFile r
class (ClassSym r) => ModuleSym r where {
    type Module r;
}
buildModule :: ModuleSym r => Label -> [Label] -> [SMethod r] -> [SClass r] -> FSModule r
class (OOMethodSym r, StateVarSym r) => ClassSym r where {
    type Class r;
}

-- | Main external method for creating a class. Inputs: parent class,
--   variables, constructor(s), methods
buildClass :: ClassSym r => Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r

-- | Creates an extra class. Inputs: class name, the rest are the same as
--   buildClass.
extraClass :: ClassSym r => Label -> Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r

-- | Creates a class implementing interfaces. Inputs: class name, interface
--   names, variables, constructor(s), methods
implementingClass :: ClassSym r => Label -> [Label] -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
docClass :: ClassSym r => String -> SClass r -> SClass r
class (TypeSym r) => OOTypeSym r
obj :: OOTypeSym r => ClassName -> VSType r
class (VariableSym r, OOTypeSym r) => OOVariableSym r
staticVar :: OOVariableSym r => Label -> VSType r -> SVariable r
self :: OOVariableSym r => SVariable r
classVar :: OOVariableSym r => VSType r -> SVariable r -> SVariable r
extClassVar :: OOVariableSym r => VSType r -> SVariable r -> SVariable r
objVar :: OOVariableSym r => SVariable r -> SVariable r -> SVariable r
objVarSelf :: OOVariableSym r => SVariable r -> SVariable r
($->) :: OOVariableSym r => SVariable r -> SVariable r -> SVariable r
infixl 9 $->
class (ValueSym r, OOTypeSym r) => OOValueSym r
class (VariableValue r, OOVariableSym r) => OOVariableValue r
class (ValueExpression r, OOVariableSym r, OOValueSym r) => OOValueExpression r
selfFuncAppMixedArgs :: OOValueExpression r => MixedCall r
newObjMixedArgs :: OOValueExpression r => MixedCtorCall r
extNewObjMixedArgs :: OOValueExpression r => Library -> MixedCtorCall r
libNewObjMixedArgs :: OOValueExpression r => Library -> MixedCtorCall r
selfFuncApp :: OOValueExpression r => PosCall r
newObj :: OOValueExpression r => PosCtorCall r
extNewObj :: OOValueExpression r => Library -> PosCtorCall r
libNewObj :: OOValueExpression r => Library -> PosCtorCall r
class (DeclStatement r, OOVariableSym r) => OODeclStatement r
objDecDef :: OODeclStatement r => SVariable r -> SValue r -> MSStatement r
objDecNew :: OODeclStatement r => SVariable r -> [SValue r] -> MSStatement r
extObjDecNew :: OODeclStatement r => Library -> SVariable r -> [SValue r] -> MSStatement r
objDecNewNoParams :: OODeclStatement r => SVariable r -> MSStatement r
extObjDecNewNoParams :: OODeclStatement r => Library -> SVariable r -> MSStatement r
class (FuncAppStatement r, OOVariableSym r) => OOFuncAppStatement r
selfInOutCall :: OOFuncAppStatement r => InOutCall r
class (ValueSym r, VariableSym r) => GetSet r
get :: GetSet r => SValue r -> SVariable r -> SValue r
set :: GetSet r => SValue r -> SVariable r -> SValue r -> SValue r
class (ValueSym r) => InternalValueExp r

-- | Generic function for calling a method. Takes the function name, the
--   return type, the object, a list of positional arguments, and a list of
--   named arguments.
objMethodCallMixedArgs' :: InternalValueExp r => Label -> VSType r -> SValue r -> [SValue r] -> NamedArgs r -> SValue r

-- | Calling a method. t is the return type of the method, o is the object,
--   f is the method name, and ps is a list of positional arguments.
objMethodCall :: InternalValueExp r => VSType r -> SValue r -> Label -> [SValue r] -> SValue r

-- | Calling a method with named arguments.
objMethodCallNamedArgs :: InternalValueExp r => VSType r -> SValue r -> Label -> NamedArgs r -> SValue r

-- | Calling a method with a mix of positional and named arguments.
objMethodCallMixedArgs :: InternalValueExp r => VSType r -> SValue r -> Label -> [SValue r] -> NamedArgs r -> SValue r

-- | Calling a method with no parameters.
objMethodCallNoParams :: InternalValueExp r => VSType r -> SValue r -> Label -> SValue r
class (MethodSym r, PermanenceSym r) => OOMethodSym r
method :: OOMethodSym r => Label -> r (Scope r) -> r (Permanence r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
getMethod :: OOMethodSym r => SVariable r -> SMethod r
setMethod :: OOMethodSym r => SVariable r -> SMethod r
constructor :: OOMethodSym r => [MSParameter r] -> Initializers r -> MSBody r -> SMethod r
inOutMethod :: OOMethodSym r => Label -> r (Scope r) -> r (Permanence r) -> InOutFunc r
docInOutMethod :: OOMethodSym r => Label -> r (Scope r) -> r (Permanence r) -> DocInOutFunc r
privMethod :: OOMethodSym r => Label -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
pubMethod :: OOMethodSym r => Label -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
initializer :: OOMethodSym r => [MSParameter r] -> Initializers r -> SMethod r
nonInitConstructor :: OOMethodSym r => [MSParameter r] -> MSBody r -> SMethod r
class (ScopeSym r, PermanenceSym r, VariableSym r) => StateVarSym r where {
    type StateVar r;
}
stateVar :: StateVarSym r => r (Scope r) -> r (Permanence r) -> SVariable r -> CSStateVar r
stateVarDef :: StateVarSym r => r (Scope r) -> r (Permanence r) -> SVariable r -> SValue r -> CSStateVar r
constVar :: StateVarSym r => r (Scope r) -> SVariable r -> SValue r -> CSStateVar r
privDVar :: StateVarSym r => SVariable r -> CSStateVar r
pubDVar :: StateVarSym r => SVariable r -> CSStateVar r
pubSVar :: StateVarSym r => SVariable r -> CSStateVar r
class PermanenceSym r where {
    type Permanence r;
}
static :: PermanenceSym r => r (Permanence r)
dynamic :: PermanenceSym r => r (Permanence r)
class (ValueSym r) => FunctionSym r where {
    type Function r;
}
func :: FunctionSym r => Label -> VSType r -> [SValue r] -> VSFunction r
objAccess :: FunctionSym r => SValue r -> VSFunction r -> SValue r
($.) :: FunctionSym r => SValue r -> VSFunction r -> SValue r
infixl 9 $.
selfAccess :: (OOVariableValue r, FunctionSym r) => VSFunction r -> SValue r
class (StatementSym r, FunctionSym r) => ObserverPattern r
notifyObservers :: ObserverPattern r => VSFunction r -> VSType r -> MSStatement r
observerListName :: Label
initObserverList :: DeclStatement r => VSType r -> [SValue r] -> MSStatement r
addObserver :: (StatementSym r, OOVariableValue r, List r) => SValue r -> MSStatement r
class (BodySym r, VariableSym r) => StrategyPattern r
runStrategy :: StrategyPattern r => Label -> [(Label, MSBody r)] -> Maybe (SValue r) -> Maybe (SVariable r) -> MSBlock r
convTypeOO :: OOTypeSym r => CodeType -> VSType r

module GOOL.Drasil.RendererClasses
class (FileSym r, AssignStatement r, DeclStatement r, IOStatement r, StringStatement r, FuncAppStatement r, CommentStatement r, ControlStatement r, Argument r, Literal r, MathConstant r, VariableValue r, CommandLineArgs r, NumericExpression r, BooleanExpression r, Comparison r, InternalValueExp r, GetSet r, List r, InternalList r, VectorExpression r, ObserverPattern r, StrategyPattern r, TypeElim r, VariableElim r, RenderBlock r, BlockElim r, RenderBody r, BodyElim r, RenderClass r, ClassElim r, RenderFile r, InternalGetSet r, InternalListFunc r, RenderFunction r, FunctionElim r, RenderMethod r, MethodElim r, RenderMod r, ModuleElim r, OpElim r, RenderParam r, ParamElim r, PermElim r, RenderScope r, ScopeElim r, InternalAssignStmt r, InternalIOStmt r, InternalControlStmt r, RenderStatement r, StatementElim r, StateVarElim r, RenderType r, InternalTypeElim r, RenderValue r, ValueElim r, RenderVariable r, InternalVarElim r, ImportSym r, ImportElim r, UnaryOpSym r, BinaryOpSym r, BlockCommentElim r, OOVariableValue r, OOValueExpression r) => RenderSym r
class (BlockCommentSym r) => RenderFile r
top :: RenderFile r => r (Module r) -> r (Block r)
bottom :: RenderFile r => r (Block r)
commentedMod :: RenderFile r => SFile r -> FS (r (BlockComment r)) -> SFile r
fileFromData :: RenderFile r => FilePath -> FSModule r -> SFile r
class ImportSym r where {
    type Import r;
}
langImport :: ImportSym r => Label -> r (Import r)
modImport :: ImportSym r => Label -> r (Import r)
class ImportElim r
import' :: ImportElim r => r (Import r) -> Doc
class PermElim r
perm :: PermElim r => r (Permanence r) -> Doc
binding :: PermElim r => r (Permanence r) -> Binding
class RenderBody r
multiBody :: RenderBody r => [MSBody r] -> MSBody r
class BodyElim r
body :: BodyElim r => r (Body r) -> Doc
class RenderBlock r
multiBlock :: RenderBlock r => [MSBlock r] -> MSBlock r
class BlockElim r
block :: BlockElim r => r (Block r) -> Doc
class RenderType r
multiType :: RenderType r => [VSType r] -> VSType r
typeFromData :: RenderType r => CodeType -> String -> Doc -> VSType r
class InternalTypeElim r
type' :: InternalTypeElim r => r (Type r) -> Doc
type VSUnOp a = VS (a (UnaryOp a))
class UnaryOpSym r where {
    type UnaryOp r;
}
notOp :: UnaryOpSym r => VSUnOp r
negateOp :: UnaryOpSym r => VSUnOp r
sqrtOp :: UnaryOpSym r => VSUnOp r
absOp :: UnaryOpSym r => VSUnOp r
logOp :: UnaryOpSym r => VSUnOp r
lnOp :: UnaryOpSym r => VSUnOp r
expOp :: UnaryOpSym r => VSUnOp r
sinOp :: UnaryOpSym r => VSUnOp r
cosOp :: UnaryOpSym r => VSUnOp r
tanOp :: UnaryOpSym r => VSUnOp r
asinOp :: UnaryOpSym r => VSUnOp r
acosOp :: UnaryOpSym r => VSUnOp r
atanOp :: UnaryOpSym r => VSUnOp r
floorOp :: UnaryOpSym r => VSUnOp r
ceilOp :: UnaryOpSym r => VSUnOp r
type VSBinOp a = VS (a (BinaryOp a))
class BinaryOpSym r where {
    type BinaryOp r;
}
equalOp :: BinaryOpSym r => VSBinOp r
notEqualOp :: BinaryOpSym r => VSBinOp r
greaterOp :: BinaryOpSym r => VSBinOp r
greaterEqualOp :: BinaryOpSym r => VSBinOp r
lessOp :: BinaryOpSym r => VSBinOp r
lessEqualOp :: BinaryOpSym r => VSBinOp r
plusOp :: BinaryOpSym r => VSBinOp r
minusOp :: BinaryOpSym r => VSBinOp r
multOp :: BinaryOpSym r => VSBinOp r
divideOp :: BinaryOpSym r => VSBinOp r
powerOp :: BinaryOpSym r => VSBinOp r
moduloOp :: BinaryOpSym r => VSBinOp r
andOp :: BinaryOpSym r => VSBinOp r
orOp :: BinaryOpSym r => VSBinOp r
class OpElim r
uOp :: OpElim r => r (UnaryOp r) -> Doc
bOp :: OpElim r => r (BinaryOp r) -> Doc
uOpPrec :: OpElim r => r (UnaryOp r) -> Int
bOpPrec :: OpElim r => r (BinaryOp r) -> Int
class RenderVariable r
varFromData :: RenderVariable r => Binding -> String -> VSType r -> Doc -> SVariable r
class InternalVarElim r
variableBind :: InternalVarElim r => r (Variable r) -> Binding
variable :: InternalVarElim r => r (Variable r) -> Doc
class RenderValue r
inputFunc :: RenderValue r => SValue r
printFunc :: RenderValue r => SValue r
printLnFunc :: RenderValue r => SValue r
printFileFunc :: RenderValue r => SValue r -> SValue r
printFileLnFunc :: RenderValue r => SValue r -> SValue r
cast :: RenderValue r => VSType r -> SValue r -> SValue r

-- | Very generic internal function for generating calls, to reduce
--   repeated code throughout generators. Parameters are: maybe name of
--   external module, maybe Doc for object variable (including separator
--   between object and function) for method calls.
call :: RenderValue r => Maybe Library -> Maybe Doc -> MixedCall r
valFromData :: RenderValue r => Maybe Int -> Maybe Integer -> VSType r -> Doc -> SValue r
class ValueElim r
valuePrec :: ValueElim r => r (Value r) -> Maybe Int
valueInt :: ValueElim r => r (Value r) -> Maybe Integer
value :: ValueElim r => r (Value r) -> Doc
class InternalGetSet r
getFunc :: InternalGetSet r => SVariable r -> VSFunction r
setFunc :: InternalGetSet r => VSType r -> SVariable r -> SValue r -> VSFunction r
class InternalListFunc r
listSizeFunc :: InternalListFunc r => SValue r -> VSFunction r
listAddFunc :: InternalListFunc r => SValue r -> SValue r -> SValue r -> VSFunction r
listAppendFunc :: InternalListFunc r => SValue r -> SValue r -> VSFunction r
listAccessFunc :: InternalListFunc r => VSType r -> SValue r -> VSFunction r
listSetFunc :: InternalListFunc r => SValue r -> SValue r -> SValue r -> VSFunction r
class RenderFunction r
funcFromData :: RenderFunction r => Doc -> VSType r -> VSFunction r
class FunctionElim r
functionType :: FunctionElim r => r (Function r) -> r (Type r)
function :: FunctionElim r => r (Function r) -> Doc
class InternalAssignStmt r
multiAssign :: InternalAssignStmt r => [SVariable r] -> [SValue r] -> MSStatement r
class InternalIOStmt r
printSt :: InternalIOStmt r => Bool -> Maybe (SValue r) -> SValue r -> SValue r -> MSStatement r
class InternalControlStmt r
multiReturn :: InternalControlStmt r => [SValue r] -> MSStatement r
class RenderStatement r
stmt :: RenderStatement r => MSStatement r -> MSStatement r
loopStmt :: RenderStatement r => MSStatement r -> MSStatement r
emptyStmt :: RenderStatement r => MSStatement r
stmtFromData :: RenderStatement r => Doc -> Terminator -> MSStatement r
class StatementElim r
statement :: StatementElim r => r (Statement r) -> Doc
statementTerm :: StatementElim r => r (Statement r) -> Terminator
class RenderScope r
scopeFromData :: RenderScope r => ScopeTag -> Doc -> r (Scope r)
class ScopeElim r
scope :: ScopeElim r => r (Scope r) -> Doc
type MSMthdType a = MS (a (MethodType a))
class (TypeSym r) => MethodTypeSym r where {
    type MethodType r;
}
mType :: MethodTypeSym r => VSType r -> MSMthdType r
construct :: MethodTypeSym r => Label -> MSMthdType r
class RenderParam r
paramFromData :: RenderParam r => SVariable r -> Doc -> MSParameter r
class ParamElim r
parameterName :: ParamElim r => r (Parameter r) -> Label
parameterType :: ParamElim r => r (Parameter r) -> r (Type r)
parameter :: ParamElim r => r (Parameter r) -> Doc
class (MethodTypeSym r, BlockCommentSym r) => RenderMethod r
intMethod :: RenderMethod r => Bool -> Label -> r (Scope r) -> r (Permanence r) -> MSMthdType r -> [MSParameter r] -> MSBody r -> SMethod r
intFunc :: RenderMethod r => Bool -> Label -> r (Scope r) -> r (Permanence r) -> MSMthdType r -> [MSParameter r] -> MSBody r -> SMethod r
commentedFunc :: RenderMethod r => MS (r (BlockComment r)) -> SMethod r -> SMethod r
destructor :: RenderMethod r => [CSStateVar r] -> SMethod r
mthdFromData :: RenderMethod r => ScopeTag -> Doc -> SMethod r
class MethodElim r
method :: MethodElim r => r (Method r) -> Doc
class StateVarElim r
stateVar :: StateVarElim r => r (StateVar r) -> Doc
type ParentSpec = Doc
class (BlockCommentSym r) => RenderClass r
intClass :: RenderClass r => Label -> r (Scope r) -> r ParentSpec -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
inherit :: RenderClass r => Maybe Label -> r ParentSpec
implements :: RenderClass r => [Label] -> r ParentSpec
commentedClass :: RenderClass r => CS (r (BlockComment r)) -> SClass r -> SClass r
class ClassElim r
class' :: ClassElim r => r (Class r) -> Doc
class RenderMod r
modFromData :: RenderMod r => String -> FS Doc -> FSModule r
updateModuleDoc :: RenderMod r => (Doc -> Doc) -> r (Module r) -> r (Module r)
class ModuleElim r
module' :: ModuleElim r => r (Module r) -> Doc
class BlockCommentSym r where {
    type BlockComment r;
}
blockComment :: BlockCommentSym r => [String] -> r (BlockComment r)
docComment :: BlockCommentSym r => State a [String] -> State a (r (BlockComment r))
class BlockCommentElim r
blockComment' :: BlockCommentElim r => r (BlockComment r) -> Doc


-- | Language-polymorphic functions that are defined by GOOL code
module GOOL.Drasil.LanguageRenderer.Macros
ifExists :: RenderSym r => SValue r -> MSBody r -> MSBody r -> MSStatement r
decrement1 :: RenderSym r => SVariable r -> MSStatement r
increment :: RenderSym r => SVariable r -> SValue r -> MSStatement r
increment1 :: RenderSym r => SVariable r -> MSStatement r
runStrategy :: (RenderSym r, Monad r) => Label -> [(Label, MSBody r)] -> Maybe (SValue r) -> Maybe (SVariable r) -> MS (r Doc)
listSlice :: RenderSym r => Maybe (SValue r) -> Maybe (SValue r) -> Maybe (SValue r) -> SVariable r -> SValue r -> MSBlock r

-- | Gets the expression and code for setting bounds in a list slice Input:
--   - String: Variable name for bound (to be created if necessary), -
--   SValue: step value - Maybe Integer: literal value of step, if exists -
--   Maybe SValue: given value of bound - SValue: value of bound if bound
--   not given and step is positive - SValue: value of bound if bound not
--   given and step is negative Output: (MSStatement, SValue): (setter,
--   value) of bound
makeSetterVal :: RenderSym r => Label -> SValue r -> Maybe Integer -> Maybe (SValue r) -> SValue r -> SValue r -> (MSStatement r, SValue r)
stringListVals :: RenderSym r => [SVariable r] -> SValue r -> MSStatement r
stringListLists :: RenderSym r => [SVariable r] -> SValue r -> MSStatement r
forRange :: RenderSym r => SVariable r -> SValue r -> SValue r -> SValue r -> MSBody r -> MSStatement r
notifyObservers :: RenderSym r => VSFunction r -> VSType r -> MSStatement r
notifyObservers' :: RenderSym r => VSFunction r -> VSType r -> MSStatement r


-- | The structure for a class of renderers is defined here.
module GOOL.Drasil.LanguageRenderer
classDec :: Doc
dot :: Doc
commentStart :: Doc
returnLabel :: Doc
ifLabel :: Doc
elseLabel :: Doc
elseIfLabel :: Doc
forLabel :: Doc
inLabel :: Doc
whileLabel :: Doc
tryLabel :: Doc
catchLabel :: Doc
throwLabel :: Doc
throwsLabel :: Doc
importLabel :: Doc
blockCmtStart :: Doc
blockCmtEnd :: Doc
docCmtStart :: Doc
bodyStart :: Doc
bodyEnd :: Doc
endStatement :: Doc
constDec' :: Doc
exceptionObj' :: Doc
new' :: Doc
this' :: Doc
self' :: Doc
array' :: Doc
listSep' :: Doc
argc :: String
argv :: String
args :: String
printLabel :: String
constDec :: String
exceptionObj :: String
mainFunc :: String
new :: String
this :: String
self :: String
nullLabel :: String
array :: String
listSep :: String
sqrt :: String
abs :: String
fabs :: String
log10 :: String
log :: String
exp :: String
sin :: String
cos :: String
tan :: String
asin :: String
acos :: String
atan :: String
floor :: String
ceil :: String
pow :: String
piLabel :: String
access :: String -> String -> String
containing :: String -> String -> String
tuple :: [String] -> String
mathFunc :: String -> String
addExt :: String -> String -> String
package :: Label -> Doc -> FileData -> FileData
file :: Doc -> Doc -> Doc -> Doc
module' :: Doc -> Doc -> Doc -> Doc
class' :: Label -> Doc -> Doc -> Doc -> Doc -> Doc
multiStmt :: [(Doc, Terminator)] -> (Doc, Terminator)
block :: [Doc] -> Doc
body :: [Doc] -> Doc
print :: RenderSym r => r (Value r) -> r (Value r) -> Doc
printFile :: Label -> Doc -> Doc
param :: RenderSym r => r (Variable r) -> Doc
method :: RenderSym r => Label -> r (Scope r) -> r (Permanence r) -> r (Type r) -> [r (Parameter r)] -> r (Body r) -> Doc
stateVar :: Doc -> Doc -> Doc -> Doc
constVar :: Doc -> Doc -> Doc -> VarData -> Doc
stateVarList :: [Doc] -> Doc
switch :: RenderSym r => (Doc -> Doc) -> r (Statement r) -> r (Value r) -> r (Body r) -> [(r (Value r), r (Body r))] -> Doc
assign :: RenderSym r => r (Variable r) -> r (Value r) -> Doc
addAssign :: RenderSym r => r (Variable r) -> r (Value r) -> Doc
subAssign :: RenderSym r => r (Variable r) -> r (Value r) -> Doc
increment :: RenderSym r => r (Variable r) -> Doc
decrement :: RenderSym r => r (Variable r) -> Doc
listDec :: RenderSym r => r (Variable r) -> r (Value r) -> Doc
getTerm :: Terminator -> Doc
return' :: RenderSym r => [r (Value r)] -> Doc
comment :: Label -> Doc -> Doc
var :: Label -> Doc
extVar :: Library -> Label -> Doc
arg :: RenderSym r => r (Value r) -> r (Value r) -> Doc
classVar :: Doc -> Doc -> Doc
objVar :: Doc -> Doc -> Doc
unOpDocD :: Doc -> Doc -> Doc
unOpDocD' :: Doc -> Doc -> Doc
binOpDocD :: Doc -> Doc -> Doc -> Doc
binOpDocD' :: Doc -> Doc -> Doc -> Doc
constDecDef :: RenderSym r => r (Variable r) -> r (Value r) -> Doc
func :: Doc -> Doc
cast :: Doc -> Doc
listAccessFunc :: RenderSym r => r (Value r) -> Doc
listSetFunc :: Doc -> Doc -> Doc
objAccess :: Doc -> Doc -> Doc
castObj :: Doc -> Doc -> Doc
break :: Doc
continue :: Doc
static :: Doc
dynamic :: Doc
private :: Doc
public :: Doc
blockCmt :: [String] -> Doc -> Doc -> Doc
docCmt :: [String] -> Doc -> Doc -> Doc
commentedItem :: Doc -> Doc -> Doc
addComments :: Label -> Doc -> Doc -> Doc
type FuncDocRenderer = String -> [(String, String)] -> [String] -> [String]
functionDox :: FuncDocRenderer
type ClassDocRenderer = String -> [String]
classDox :: ClassDocRenderer
type ModuleDocRenderer = String -> [String] -> String -> String -> [String]
moduleDox :: ModuleDocRenderer
commentedMod :: FileData -> Doc -> FileData
valueList :: RenderSym r => [r (Value r)] -> Doc
variableList :: RenderSym r => [r (Variable r)] -> Doc
parameterList :: RenderSym r => [r (Parameter r)] -> Doc
namedArgList :: RenderSym r => Doc -> [(r (Variable r), r (Value r))] -> Doc
prependToBody :: (Doc, Terminator) -> Doc -> Doc
appendToBody :: Doc -> (Doc, Terminator) -> Doc
surroundBody :: (Doc, Terminator) -> Doc -> (Doc, Terminator) -> Doc
getterName :: String -> String
setterName :: String -> String
intValue :: RenderSym r => SValue r -> SValue r


-- | Generic constructors and smart constructors to be used in renderers
module GOOL.Drasil.LanguageRenderer.Constructors

-- | Constructs a statement terminated by a semi-colon
mkStmt :: RenderSym r => Doc -> MSStatement r

-- | Constructs a statement without a termination character
mkStmtNoEnd :: RenderSym r => Doc -> MSStatement r

-- | Constructs a value in a stateful context
mkStateVal :: RenderSym r => VSType r -> Doc -> SValue r

-- | Constructs a value in a non-stateful context
mkVal :: RenderSym r => r (Type r) -> Doc -> SValue r

-- | Constructs a dynamic variable in a stateful context
mkStateVar :: RenderSym r => String -> VSType r -> Doc -> SVariable r

-- | Constructs a dynamic variable in a non-stateful context
mkVar :: RenderSym r => String -> r (Type r) -> Doc -> SVariable r

-- | Constructs a static variable in a stateful context
mkStaticVar :: RenderSym r => String -> VSType r -> Doc -> SVariable r
type VSOp r = VS (r OpData)

-- | Construct an operator with given precedence and rendering
mkOp :: Monad r => Int -> Doc -> VSOp r

-- | Construct an operator with typical unary-operator precedence
unOpPrec :: Monad r => String -> VSOp r

-- | Construct an operator with equality-comparison-level precedence
compEqualPrec :: Monad r => String -> VSOp r

-- | Construct an operator with comparison-level precedence
compPrec :: Monad r => String -> VSOp r

-- | Construct an operator with addition-level precedence
addPrec :: Monad r => String -> VSOp r

-- | Construct an operator with multiplication-level precedence
multPrec :: Monad r => String -> VSOp r

-- | Construct an operator with exponentiation-level precedence
powerPrec :: Monad r => String -> VSOp r

-- | Construct an operator with conjunction-level precedence
andPrec :: Monad r => String -> VSOp r

-- | Construct an operator with disjunction-level precedence
orPrec :: Monad r => String -> VSOp r

-- | Constructs a unary expression like ln(v), for some operator ln and
--   value v
unExpr :: RenderSym r => VSUnOp r -> SValue r -> SValue r

-- | Constructs a unary expression like -v, for some operator - and value v
unExpr' :: RenderSym r => VSUnOp r -> SValue r -> SValue r

-- | To be used in languages where the unary operator returns a double. If
--   the value passed to the operator is a float, this function preserves
--   that type by casting the result to a float.
unExprNumDbl :: RenderSym r => VSUnOp r -> SValue r -> SValue r

-- | To be used when the type of the value is different from the type of
--   the resulting expression. The type of the result is passed as a
--   parameter.
typeUnExpr :: RenderSym r => VSUnOp r -> VSType r -> SValue r -> SValue r

-- | Constructs binary expressions like v + w, for some operator + and
--   values v and w, parenthesizing v and w if needed.
binExpr :: RenderSym r => VSBinOp r -> SValue r -> SValue r -> SValue r

-- | Constructs binary expressions like pow(v,w), for some operator pow and
--   values v and w
binExpr' :: RenderSym r => VSBinOp r -> SValue r -> SValue r -> SValue r

-- | To be used in languages where the binary operator returns a double. If
--   either value passed to the operator is a float, this function
--   preserves that type by casting the result to a float.
binExprNumDbl' :: RenderSym r => VSBinOp r -> SValue r -> SValue r -> SValue r

-- | To be used when the types of the values are different from the type of
--   the resulting expression. The type of the result is passed as a
--   parameter.
typeBinExpr :: RenderSym r => VSBinOp r -> VSType r -> SValue r -> SValue r -> SValue r


-- | Implementations defined here are valid for any language renderer.
module GOOL.Drasil.LanguageRenderer.LanguagePolymorphic
fileFromData :: RenderSym r => (FilePath -> r (Module r) -> r (File r)) -> FilePath -> FSModule r -> SFile r
multiBody :: (RenderSym r, Monad r) => [MSBody r] -> MS (r Doc)
block :: (RenderSym r, Monad r) => [MSStatement r] -> MS (r Doc)
multiBlock :: (RenderSym r, Monad r) => [MSBlock r] -> MS (r Doc)
listInnerType :: RenderSym r => VSType r -> VSType r
obj :: RenderSym r => ClassName -> VSType r
negateOp :: Monad r => VSOp r
csc :: RenderSym r => SValue r -> SValue r
sec :: RenderSym r => SValue r -> SValue r
cot :: RenderSym r => SValue r -> SValue r
equalOp :: Monad r => VSOp r
notEqualOp :: Monad r => VSOp r
greaterOp :: Monad r => VSOp r
greaterEqualOp :: Monad r => VSOp r
lessOp :: Monad r => VSOp r
lessEqualOp :: Monad r => VSOp r
plusOp :: Monad r => VSOp r
minusOp :: Monad r => VSOp r
multOp :: Monad r => VSOp r
divideOp :: Monad r => VSOp r
moduloOp :: Monad r => VSOp r
var :: RenderSym r => Label -> VSType r -> SVariable r
staticVar :: RenderSym r => Label -> VSType r -> SVariable r
objVar :: RenderSym r => SVariable r -> SVariable r -> SVariable r

-- | To be used in classVar implementations. Throws an error if the
--   variable is not static since classVar is for accessing static
--   variables from a class
classVarCheckStatic :: RenderSym r => r (Variable r) -> r (Variable r)
arrayElem :: RenderSym r => SValue r -> SVariable r -> SVariable r
litChar :: RenderSym r => (Doc -> Doc) -> Char -> SValue r
litDouble :: RenderSym r => Double -> SValue r
litInt :: RenderSym r => Integer -> SValue r
litString :: RenderSym r => String -> SValue r
valueOf :: RenderSym r => SVariable r -> SValue r
arg :: RenderSym r => SValue r -> SValue r -> SValue r
argsList :: RenderSym r => String -> SValue r

-- | First parameter is separator between name and value for named
--   arguments, rest similar to call from RendererClasses
call :: RenderSym r => Doc -> Maybe Library -> Maybe Doc -> MixedCall r
funcAppMixedArgs :: RenderSym r => MixedCall r
selfFuncAppMixedArgs :: RenderSym r => Doc -> SVariable r -> MixedCall r
newObjMixedArgs :: RenderSym r => String -> MixedCtorCall r
lambda :: RenderSym r => ([r (Variable r)] -> r (Value r) -> Doc) -> [SVariable r] -> SValue r -> SValue r
objAccess :: RenderSym r => SValue r -> VSFunction r -> SValue r
objMethodCall :: RenderSym r => Label -> VSType r -> SValue r -> [SValue r] -> NamedArgs r -> SValue r
func :: RenderSym r => Label -> VSType r -> [SValue r] -> VSFunction r
get :: RenderSym r => SValue r -> SVariable r -> SValue r
set :: RenderSym r => SValue r -> SVariable r -> SValue r -> SValue r
listAdd :: RenderSym r => SValue r -> SValue r -> SValue r -> SValue r
listAppend :: RenderSym r => SValue r -> SValue r -> SValue r
listAccess :: RenderSym r => SValue r -> SValue r -> SValue r
listSet :: RenderSym r => SValue r -> SValue r -> SValue r -> SValue r
getFunc :: RenderSym r => SVariable r -> VSFunction r
setFunc :: RenderSym r => VSType r -> SVariable r -> SValue r -> VSFunction r
listAppendFunc :: RenderSym r => Label -> SValue r -> VSFunction r
stmt :: RenderSym r => MSStatement r -> MSStatement r
loopStmt :: RenderSym r => MSStatement r -> MSStatement r
emptyStmt :: RenderSym r => MSStatement r
assign :: RenderSym r => Terminator -> SVariable r -> SValue r -> MSStatement r
subAssign :: RenderSym r => Terminator -> SVariable r -> SValue r -> MSStatement r
increment :: RenderSym r => SVariable r -> SValue r -> MSStatement r
objDecNew :: RenderSym r => SVariable r -> [SValue r] -> MSStatement r
print :: RenderSym r => Bool -> Maybe (SValue r) -> SValue r -> SValue r -> MSStatement r
closeFile :: RenderSym r => Label -> SValue r -> MSStatement r
returnStmt :: RenderSym r => Terminator -> SValue r -> MSStatement r
valStmt :: RenderSym r => Terminator -> SValue r -> MSStatement r
comment :: RenderSym r => Doc -> Label -> MSStatement r
throw :: RenderSym r => (r (Value r) -> Doc) -> Terminator -> Label -> MSStatement r
ifCond :: RenderSym r => (Doc -> Doc) -> Doc -> OptionalSpace -> Doc -> Doc -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
tryCatch :: RenderSym r => (r (Body r) -> r (Body r) -> Doc) -> MSBody r -> MSBody r -> MSStatement r
construct :: RenderSym r => Label -> MS (r (Type r))
param :: RenderSym r => (r (Variable r) -> Doc) -> SVariable r -> MSParameter r
method :: RenderSym r => Label -> r (Scope r) -> r (Permanence r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
getMethod :: RenderSym r => SVariable r -> SMethod r
setMethod :: RenderSym r => SVariable r -> SMethod r
initStmts :: RenderSym r => Initializers r -> MSBody r
function :: RenderSym r => Label -> r (Scope r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
docFuncRepr :: RenderSym r => FuncDocRenderer -> String -> [String] -> [String] -> SMethod r -> SMethod r
docFunc :: RenderSym r => FuncDocRenderer -> String -> [String] -> Maybe String -> SMethod r -> SMethod r
buildClass :: RenderSym r => Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
implementingClass :: RenderSym r => Label -> [Label] -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
docClass :: RenderSym r => ClassDocRenderer -> String -> SClass r -> SClass r
commentedClass :: (RenderSym r, Monad r) => CS (r (BlockComment r)) -> SClass r -> CS (r Doc)
modFromData :: Label -> (Doc -> r (Module r)) -> FS Doc -> FSModule r
fileDoc :: RenderSym r => String -> (r (Module r) -> r (Block r)) -> r (Block r) -> FSModule r -> SFile r
docMod :: RenderSym r => ModuleDocRenderer -> String -> String -> [String] -> String -> SFile r -> SFile r
newtype OptionalSpace
OSpace :: Doc -> OptionalSpace
[oSpace] :: OptionalSpace -> Doc
defaultOptSpace :: OptionalSpace


-- | Implementations defined here are valid in some, but not all, language
--   renderers
module GOOL.Drasil.LanguageRenderer.CommonPseudoOO
int :: RenderSym r => VSType r
constructor :: RenderSym r => Label -> [MSParameter r] -> Initializers r -> MSBody r -> SMethod r
doxFunc :: RenderSym r => String -> [String] -> Maybe String -> SMethod r -> SMethod r
doxClass :: RenderSym r => String -> SClass r -> SClass r
doxMod :: RenderSym r => String -> String -> [String] -> String -> SFile r -> SFile r
docMod' :: RenderSym r => String -> String -> [String] -> String -> SFile r -> SFile r
extVar :: RenderSym r => Label -> Label -> VSType r -> SVariable r
classVar :: RenderSym r => (Doc -> Doc -> Doc) -> VSType r -> SVariable r -> SVariable r
objVarSelf :: RenderSym r => SVariable r -> SVariable r
indexOf :: RenderSym r => Label -> SValue r -> SValue r -> SValue r
listAddFunc :: RenderSym r => Label -> SValue r -> SValue r -> VSFunction r
discardFileLine :: RenderSym r => Label -> SValue r -> MSStatement r

-- | An internal function for creating a class. Parameters: render
--   function, class name, scope, parent, class variables, constructor(s),
--   methods
intClass :: (RenderSym r, Monad r) => (Label -> Doc -> Doc -> Doc -> Doc -> Doc) -> Label -> r (Scope r) -> r ParentSpec -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> CS (r Doc)
funcType :: RenderSym r => [VSType r] -> VSType r -> VSType r
buildModule :: RenderSym r => Label -> FS Doc -> FS Doc -> FS Doc -> [SMethod r] -> [SClass r] -> FSModule r
arrayType :: RenderSym r => VSType r -> VSType r
pi :: RenderSym r => SValue r
printSt :: RenderSym r => SValue r -> SValue r -> MSStatement r
arrayDec :: RenderSym r => SValue r -> SVariable r -> MSStatement r
arrayDecDef :: RenderSym r => SVariable r -> [SValue r] -> MSStatement r
openFileA :: RenderSym r => (SValue r -> VSType r -> SValue r -> SValue r) -> SVariable r -> SValue r -> MSStatement r
forEach :: RenderSym r => Doc -> Doc -> Doc -> Doc -> SVariable r -> SValue r -> MSBody r -> MSStatement r
docMain :: RenderSym r => MSBody r -> SMethod r
mainFunction :: RenderSym r => VSType r -> Label -> MSBody r -> SMethod r

-- | Used by the language renderers to build the module. n is the module
--   name inc is the include is is the import statements ms is the class
--   methods cs is the classes
buildModule' :: RenderSym r => Label -> (String -> r (Import r)) -> [Label] -> [SMethod r] -> [SClass r] -> FSModule r

-- | First parameter is language name, rest similar to call from
--   RendererClasses
call' :: RenderSym r => String -> Maybe Library -> Maybe Doc -> MixedCall r
listSizeFunc :: RenderSym r => VSFunction r
listAccessFunc' :: RenderSym r => Label -> VSType r -> SValue r -> VSFunction r
string :: RenderSym r => VSType r
constDecDef :: RenderSym r => SVariable r -> SValue r -> MSStatement r
docInOutFunc :: RenderSym r => ([SVariable r] -> [SVariable r] -> [SVariable r] -> MSBody r -> SMethod r) -> String -> [(String, SVariable r)] -> [(String, SVariable r)] -> [(String, SVariable r)] -> MSBody r -> SMethod r
bindingError :: String -> String
extFuncAppMixedArgs :: RenderSym r => Library -> MixedCall r
notNull :: RenderSym r => String -> SValue r -> SValue r
listDecDef :: RenderSym r => SVariable r -> [SValue r] -> MSStatement r
destructorError :: String -> String
stateVarDef :: (RenderSym r, Monad r) => r (Scope r) -> r (Permanence r) -> SVariable r -> SValue r -> CS (r Doc)
constVar :: (RenderSym r, Monad r) => Doc -> r (Scope r) -> SVariable r -> SValue r -> CS (r Doc)
litArray :: RenderSym r => (Doc -> Doc) -> VSType r -> [SValue r] -> SValue r
listSetFunc :: RenderSym r => (Doc -> Doc -> Doc) -> SValue r -> SValue r -> SValue r -> VSFunction r
extraClass :: RenderSym r => Label -> Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
listAccessFunc :: RenderSym r => VSType r -> SValue r -> VSFunction r
doubleRender :: String
double :: RenderSym r => VSType r
openFileR :: RenderSym r => (SValue r -> VSType r -> SValue r) -> SVariable r -> SValue r -> MSStatement r
openFileW :: RenderSym r => (SValue r -> VSType r -> SValue r -> SValue r) -> SVariable r -> SValue r -> MSStatement r
stateVar :: (RenderSym r, Monad r) => r (Scope r) -> r (Permanence r) -> SVariable r -> CS (r Doc)
self :: RenderSym r => SVariable r
multiAssign :: RenderSym r => (Doc -> Doc) -> [SVariable r] -> [SValue r] -> MSStatement r
multiReturn :: RenderSym r => (Doc -> Doc) -> [SValue r] -> MSStatement r
listDec :: RenderSym r => SVariable r -> MSStatement r
funcDecDef :: RenderSym r => SVariable r -> [SVariable r] -> MSBody r -> MSStatement r
inOutCall :: RenderSym r => (Label -> VSType r -> [SValue r] -> SValue r) -> Label -> [SValue r] -> [SVariable r] -> [SVariable r] -> MSStatement r
forLoopError :: String -> String
mainBody :: RenderSym r => MSBody r -> SMethod r
inOutFunc :: RenderSym r => (VSType r -> [MSParameter r] -> MSBody r -> SMethod r) -> [SVariable r] -> [SVariable r] -> [SVariable r] -> MSBody r -> SMethod r
docInOutFunc' :: RenderSym r => FuncDocRenderer -> ([SVariable r] -> [SVariable r] -> [SVariable r] -> MSBody r -> SMethod r) -> String -> [(String, SVariable r)] -> [(String, SVariable r)] -> [(String, SVariable r)] -> MSBody r -> SMethod r
boolRender :: String
bool :: RenderSym r => VSType r
floatRender :: String
float :: RenderSym r => VSType r
stringRender' :: String
string' :: RenderSym r => VSType r
inherit :: Monad r => Maybe Label -> r ParentSpec
implements :: Monad r => [Label] -> r ParentSpec

-- | Call to get the size of a list in a language where this is not a
--   method.
listSize :: RenderSym r => SValue r -> SValue r

-- | Call to insert a value into a list in a language where this is not a
--   method.
listAdd :: RenderSym r => SValue r -> SValue r -> SValue r -> SValue r

-- | Call to append a value to a list in a language where this is not a
--   method.
listAppend :: RenderSym r => SValue r -> SValue r -> SValue r

-- | Convert an integer to an index in a 0-indexed language Since GOOL is
--   0-indexed, no adjustments need be made
intToIndex :: SValue r -> SValue r

-- | Convert an index to an integer in a 0-indexed language Since GOOL is
--   0-indexed, no adjustments need be made
indexToInt :: SValue r -> SValue r

-- | Convert an integer to an index in a 1-indexed language Since GOOL is
--   0-indexed, we need to add 1
intToIndex' :: RenderSym r => SValue r -> SValue r

-- | Convert an index to an integer in a 1-indexed language Since GOOL is
--   0-indexed, we need to subtract 1
indexToInt' :: RenderSym r => SValue r -> SValue r


-- | The logic to render Python code is contained in this module
module GOOL.Drasil.LanguageRenderer.PythonRenderer
newtype PythonCode a
PC :: a -> PythonCode a
[unPC] :: PythonCode a -> a
pyName :: String
pyVersion :: String
instance GHC.Base.Functor GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GHC.Base.Applicative GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GHC.Base.Monad GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.SharedProg GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.OOProg GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.ProgramSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.FileSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderFile GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.ImportSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.ImportElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.PermanenceSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.PermElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.BodySym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderBody GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.BodyElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.BlockSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderBlock GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.BlockElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.TypeSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.OOTypeSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.TypeElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderType GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.InternalTypeElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.UnaryOpSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.BinaryOpSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.OpElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.VariableSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.VariableElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.InternalVarElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderVariable GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.ValueSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.OOValueSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.Argument GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.Literal GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.MathConstant GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.VariableValue GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableValue GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.CommandLineArgs GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.NumericExpression GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.BooleanExpression GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.Comparison GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.ValueExpression GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.OOValueExpression GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderValue GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.ValueElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.InternalValueExp GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.FunctionSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.GetSet GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.List GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.InternalList GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.InternalGetSet GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.InternalListFunc GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.ThunkSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.ThunkAssign GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.VectorType GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.VectorDecl GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.VectorThunk GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.VectorExpression GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderFunction GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.FunctionElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.InternalAssignStmt GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.InternalIOStmt GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.InternalControlStmt GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderStatement GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.StatementElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.StatementSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.AssignStatement GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.DeclStatement GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.OODeclStatement GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.IOStatement GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.StringStatement GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.FuncAppStatement GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.OOFuncAppStatement GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.CommentStatement GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.ControlStatement GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.ObserverPattern GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.StrategyPattern GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.ScopeSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderScope GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.ScopeElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.MethodTypeSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.ParameterSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderParam GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.ParamElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceCommon.MethodSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.OOMethodSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderMethod GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.MethodElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.StateVarSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.StateVarElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.ClassSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderClass GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.ClassElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.InterfaceGOOL.ModuleSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.RenderMod GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.ModuleElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.BlockCommentSym GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode
instance GOOL.Drasil.RendererClasses.BlockCommentElim GOOL.Drasil.LanguageRenderer.PythonRenderer.PythonCode


-- | Implementations for C-like renderers are defined here.
module GOOL.Drasil.LanguageRenderer.CLike
charRender :: String
float :: RenderSym r => VSType r
double :: RenderSym r => VSType r
char :: RenderSym r => VSType r
listType :: RenderSym r => String -> VSType r -> VSType r
void :: RenderSym r => VSType r
notOp :: Monad r => VSOp r
andOp :: Monad r => VSOp r
orOp :: Monad r => VSOp r
self :: RenderSym r => SVariable r
litTrue :: RenderSym r => SValue r
litFalse :: RenderSym r => SValue r
litFloat :: RenderSym r => Float -> SValue r
inlineIf :: RenderSym r => SValue r -> SValue r -> SValue r -> SValue r
libFuncAppMixedArgs :: RenderSym r => Library -> MixedCall r
libNewObjMixedArgs :: RenderSym r => Library -> MixedCtorCall r
listSize :: RenderSym r => SValue r -> SValue r
increment1 :: RenderSym r => SVariable r -> MSStatement r
decrement1 :: RenderSym r => SVariable r -> MSStatement r
varDec :: RenderSym r => r (Permanence r) -> r (Permanence r) -> Doc -> SVariable r -> MSStatement r
varDecDef :: RenderSym r => Terminator -> SVariable r -> SValue r -> MSStatement r
listDec :: RenderSym r => (r (Value r) -> Doc) -> SValue r -> SVariable r -> MSStatement r
extObjDecNew :: RenderSym r => Library -> SVariable r -> [SValue r] -> MSStatement r
switch :: RenderSym r => (Doc -> Doc) -> MSStatement r -> SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
for :: RenderSym r => Doc -> Doc -> MSStatement r -> SValue r -> MSStatement r -> MSBody r -> MSStatement r
while :: RenderSym r => (Doc -> Doc) -> Doc -> Doc -> SValue r -> MSBody r -> MSStatement r
intFunc :: RenderSym r => Bool -> Label -> r (Scope r) -> r (Permanence r) -> MSMthdType r -> [MSParameter r] -> MSBody r -> SMethod r
multiAssignError :: String -> String
multiReturnError :: String -> String
multiTypeError :: String -> String


-- | The logic to render Swift code is contained in this module
module GOOL.Drasil.LanguageRenderer.SwiftRenderer
newtype SwiftCode a
SC :: a -> SwiftCode a
[unSC] :: SwiftCode a -> a
swiftName :: String
swiftVersion :: String
instance GHC.Classes.Eq a => GHC.Classes.Eq (GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode a)
instance GHC.Base.Functor GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GHC.Base.Applicative GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GHC.Base.Monad GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.SharedProg GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.OOProg GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.ProgramSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.FileSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderFile GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.ImportSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.ImportElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.PermanenceSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.PermElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.BodySym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderBody GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.BodyElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.BlockSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderBlock GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.BlockElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.TypeSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.OOTypeSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.TypeElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderType GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.InternalTypeElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.UnaryOpSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.BinaryOpSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.OpElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.VariableSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.VariableElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.InternalVarElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderVariable GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.ValueSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.OOValueSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.Argument GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.Literal GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.MathConstant GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.VariableValue GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableValue GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.CommandLineArgs GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.NumericExpression GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.BooleanExpression GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.Comparison GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.ValueExpression GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.OOValueExpression GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderValue GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.ValueElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.InternalValueExp GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.FunctionSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.GetSet GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.List GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.InternalList GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.InternalGetSet GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.InternalListFunc GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.ThunkSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.ThunkAssign GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.VectorType GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.VectorDecl GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.VectorThunk GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.VectorExpression GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderFunction GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.FunctionElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.InternalAssignStmt GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.InternalIOStmt GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.InternalControlStmt GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderStatement GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.StatementElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.StatementSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.AssignStatement GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.DeclStatement GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.OODeclStatement GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.IOStatement GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.StringStatement GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.FuncAppStatement GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.OOFuncAppStatement GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.CommentStatement GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.ControlStatement GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.ObserverPattern GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.StrategyPattern GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.ScopeSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderScope GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.ScopeElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.MethodTypeSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.ParameterSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderParam GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.ParamElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceCommon.MethodSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.OOMethodSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderMethod GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.MethodElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.StateVarSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.StateVarElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.ClassSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderClass GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.ClassElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.InterfaceGOOL.ModuleSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.RenderMod GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.ModuleElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.BlockCommentSym GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode
instance GOOL.Drasil.RendererClasses.BlockCommentElim GOOL.Drasil.LanguageRenderer.SwiftRenderer.SwiftCode


-- | The logic to render Java code is contained in this module
module GOOL.Drasil.LanguageRenderer.JavaRenderer
newtype JavaCode a
JC :: a -> JavaCode a
[unJC] :: JavaCode a -> a
jName :: String
jVersion :: String
instance GHC.Base.Functor GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GHC.Base.Applicative GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GHC.Base.Monad GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.SharedProg GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.OOProg GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.ProgramSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.FileSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderFile GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.ImportSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.ImportElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.PermanenceSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.PermElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.BodySym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderBody GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.BodyElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.BlockSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderBlock GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.BlockElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.TypeSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.OOTypeSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.TypeElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderType GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.InternalTypeElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.UnaryOpSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.BinaryOpSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.OpElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.VariableSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.VariableElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.InternalVarElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderVariable GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.ValueSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.OOValueSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.Argument GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.Literal GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.MathConstant GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.VariableValue GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableValue GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.CommandLineArgs GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.NumericExpression GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.BooleanExpression GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.Comparison GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.ValueExpression GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.OOValueExpression GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderValue GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.ValueElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.InternalValueExp GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.FunctionSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.GetSet GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.List GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.InternalList GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.InternalGetSet GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.InternalListFunc GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.ThunkSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.ThunkAssign GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.VectorType GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.VectorDecl GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.VectorThunk GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.VectorExpression GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderFunction GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.FunctionElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.InternalAssignStmt GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.InternalIOStmt GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.InternalControlStmt GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderStatement GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.StatementElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.StatementSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.AssignStatement GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.DeclStatement GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.OODeclStatement GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.IOStatement GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.StringStatement GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.FuncAppStatement GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.OOFuncAppStatement GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.CommentStatement GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.ControlStatement GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.ObserverPattern GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.StrategyPattern GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.ScopeSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderScope GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.ScopeElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.MethodTypeSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.ParameterSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderParam GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.ParamElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceCommon.MethodSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.OOMethodSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderMethod GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.MethodElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.StateVarSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.StateVarElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.ClassSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderClass GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.ClassElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.InterfaceGOOL.ModuleSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.RenderMod GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.ModuleElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.BlockCommentSym GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.RendererClasses.BlockCommentElim GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode
instance GOOL.Drasil.CodeAnalysis.HasException GOOL.Drasil.LanguageRenderer.JavaRenderer.JavaCode


-- | The logic to render C++ code is contained in this module
module GOOL.Drasil.LanguageRenderer.CppRenderer
newtype CppSrcCode a
CPPSC :: a -> CppSrcCode a
[unCPPSC] :: CppSrcCode a -> a
newtype CppHdrCode a
CPPHC :: a -> CppHdrCode a
[unCPPHC] :: CppHdrCode a -> a
data CppCode x y a
CPPC :: x a -> y a -> CppCode x y a
[src] :: CppCode x y a -> x a
[hdr] :: CppCode x y a -> y a
unCPPC :: CppCode CppSrcCode CppHdrCode a -> a
cppName :: String
cppVersion :: String
instance GHC.Classes.Eq a => GHC.Classes.Eq (GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode a)
instance GHC.Classes.Eq a => GHC.Classes.Eq (GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode a)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.MethodSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.InterfaceCommon.MethodSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.MethodElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.MethodSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.MethodElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.SharedProg (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.OOProg (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.ProgramSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.FileSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderFile (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.ImportSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.ImportElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.PermanenceSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.PermElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.BodySym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderBody (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.BodyElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.BlockSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderBlock (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.BlockElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.TypeSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.OOTypeSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.TypeElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderType (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.InternalTypeElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.UnaryOpSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.BinaryOpSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.OpElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.VariableSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.OOVariableSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.VariableElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.InternalVarElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderVariable (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.ValueSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.OOValueSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.Argument (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.Literal (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.MathConstant (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.VariableValue (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.OOVariableValue (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.CommandLineArgs (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.NumericExpression (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.BooleanExpression (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.Comparison (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.ValueExpression (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.OOValueExpression (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderValue (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.ValueElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.InternalValueExp (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.FunctionSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.GetSet (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.List (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.InternalList (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.InternalGetSet (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.InternalListFunc (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.InterfaceCommon.ThunkSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.ThunkAssign (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.VectorType (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.VectorDecl (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.VectorThunk (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.VectorExpression (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderFunction (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.FunctionElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.InternalAssignStmt (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.InternalIOStmt (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.InternalControlStmt (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderStatement (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.StatementElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.StatementSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.AssignStatement (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.DeclStatement (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.OODeclStatement (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.IOStatement (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.StringStatement (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.FuncAppStatement (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.OOFuncAppStatement (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.CommentStatement (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.ControlStatement (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.ObserverPattern (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.StrategyPattern (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.ScopeSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderScope (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.ScopeElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.MethodTypeSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceCommon.ParameterSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderParam (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.ParamElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.OOMethodSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderMethod (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.MethodElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.StateVarSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.StateVarElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.ClassSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderClass (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.ClassElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.InterfaceGOOL.ModuleSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.RenderMod (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.ModuleElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.BlockCommentSym (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GOOL.Drasil.Classes.Pair p => GOOL.Drasil.RendererClasses.BlockCommentElim (p GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode)
instance GHC.Base.Functor GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GHC.Base.Applicative GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GHC.Base.Monad GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.FileSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderFile GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.ImportSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.ImportElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.PermanenceSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.PermElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.BodySym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderBody GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.BodyElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.BlockSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderBlock GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.BlockElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.TypeSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.OOTypeSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.TypeElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderType GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.InternalTypeElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.UnaryOpSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.BinaryOpSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.OpElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.VariableSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.VariableElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.InternalVarElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderVariable GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.ValueSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.OOValueSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.Argument GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.Literal GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.MathConstant GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.VariableValue GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableValue GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.CommandLineArgs GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.NumericExpression GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.BooleanExpression GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.Comparison GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.ValueExpression GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.OOValueExpression GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderValue GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.ValueElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.InternalValueExp GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.FunctionSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.GetSet GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.List GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.InternalList GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.InternalGetSet GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.InternalListFunc GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.ThunkSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.ThunkAssign GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.VectorType GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.VectorDecl GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.VectorThunk GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.VectorExpression GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderFunction GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.FunctionElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.InternalAssignStmt GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.InternalIOStmt GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.InternalControlStmt GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.StatementElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.StatementSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.AssignStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.DeclStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.OODeclStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.IOStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.StringStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.FuncAppStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.OOFuncAppStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.CommentStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.ControlStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.ObserverPattern GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.StrategyPattern GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.ScopeSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderScope GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.ScopeElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.MethodTypeSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceCommon.ParameterSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderParam GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.ParamElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.OOMethodSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderMethod GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.StateVarSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.StateVarElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.ClassSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderClass GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.ClassElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.InterfaceGOOL.ModuleSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.RenderMod GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.ModuleElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.BlockCommentSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GOOL.Drasil.RendererClasses.BlockCommentElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppHdrCode
instance GHC.Base.Functor GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GHC.Base.Applicative GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GHC.Base.Monad GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.ProgramSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.FileSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderFile GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.ImportSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.ImportElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.PermanenceSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.PermElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.BodySym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderBody GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.BodyElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.BlockSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderBlock GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.BlockElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.TypeSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.OOTypeSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.TypeElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderType GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.InternalTypeElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.UnaryOpSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.BinaryOpSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.OpElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.VariableSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.VariableElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.InternalVarElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderVariable GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.ValueSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.OOValueSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.Argument GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.Literal GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.MathConstant GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.VariableValue GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableValue GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.CommandLineArgs GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.NumericExpression GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.BooleanExpression GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.Comparison GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.ValueExpression GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.OOValueExpression GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderValue GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.ValueElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.InternalValueExp GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.FunctionSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.GetSet GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.List GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.InternalList GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.InternalGetSet GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.InternalListFunc GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.ThunkSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.ThunkAssign GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.VectorType GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.VectorDecl GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.VectorThunk GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.VectorExpression GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderFunction GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.FunctionElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.InternalAssignStmt GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.InternalIOStmt GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.InternalControlStmt GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.StatementElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.StatementSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.AssignStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.DeclStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.OODeclStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.IOStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.StringStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.FuncAppStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.OOFuncAppStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.CommentStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.ControlStatement GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.ObserverPattern GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.StrategyPattern GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.ScopeSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderScope GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.ScopeElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.MethodTypeSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceCommon.ParameterSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderParam GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.ParamElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.OOMethodSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderMethod GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.StateVarSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.StateVarElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.ClassSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderClass GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.ClassElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.InterfaceGOOL.ModuleSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.RenderMod GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.ModuleElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.BlockCommentSym GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.RendererClasses.BlockCommentElim GOOL.Drasil.LanguageRenderer.CppRenderer.CppSrcCode
instance GOOL.Drasil.Classes.Pair GOOL.Drasil.LanguageRenderer.CppRenderer.CppCode


-- | The logic to render C# code is contained in this module
module GOOL.Drasil.LanguageRenderer.CSharpRenderer
newtype CSharpCode a
CSC :: a -> CSharpCode a
[unCSC] :: CSharpCode a -> a
csName :: String
csVersion :: String
instance GHC.Classes.Eq a => GHC.Classes.Eq (GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode a)
instance GHC.Base.Functor GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GHC.Base.Applicative GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GHC.Base.Monad GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.SharedProg GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.OOProg GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.ProgramSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.FileSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderFile GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.ImportSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.ImportElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.PermanenceSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.PermElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.BodySym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderBody GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.BodyElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.BlockSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderBlock GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.BlockElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.TypeSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.OOTypeSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.TypeElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderType GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.InternalTypeElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.UnaryOpSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.BinaryOpSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.OpElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.VariableSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.VariableElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.InternalVarElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderVariable GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.ValueSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.OOValueSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.Argument GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.Literal GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.MathConstant GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.VariableValue GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.OOVariableValue GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.CommandLineArgs GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.NumericExpression GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.BooleanExpression GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.Comparison GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.ValueExpression GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.OOValueExpression GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderValue GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.ValueElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.InternalValueExp GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.FunctionSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.GetSet GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.List GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.InternalList GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.InternalGetSet GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.InternalListFunc GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.ThunkSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.ThunkAssign GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.VectorType GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.VectorDecl GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.VectorThunk GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.VectorExpression GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderFunction GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.FunctionElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.InternalAssignStmt GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.InternalIOStmt GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.InternalControlStmt GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderStatement GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.StatementElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.StatementSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.AssignStatement GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.DeclStatement GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.OODeclStatement GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.IOStatement GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.StringStatement GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.FuncAppStatement GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.OOFuncAppStatement GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.CommentStatement GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.ControlStatement GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.ObserverPattern GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.StrategyPattern GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.ScopeSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderScope GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.ScopeElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.MethodTypeSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.ParameterSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderParam GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.ParamElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceCommon.MethodSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.OOMethodSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderMethod GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.MethodElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.StateVarSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.StateVarElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.ClassSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderClass GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.ClassElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.InterfaceGOOL.ModuleSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.RenderMod GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.ModuleElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.BlockCommentSym GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode
instance GOOL.Drasil.RendererClasses.BlockCommentElim GOOL.Drasil.LanguageRenderer.CSharpRenderer.CSharpCode

module GOOL.Drasil.CodeInfo
newtype CodeInfo a
CI :: a -> CodeInfo a
[unCI] :: CodeInfo a -> a
instance GHC.Classes.Eq a => GHC.Classes.Eq (GOOL.Drasil.CodeInfo.CodeInfo a)
instance GHC.Base.Functor GOOL.Drasil.CodeInfo.CodeInfo
instance GHC.Base.Applicative GOOL.Drasil.CodeInfo.CodeInfo
instance GHC.Base.Monad GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.SharedProg GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.OOProg GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.ProgramSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.FileSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.PermanenceSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.BodySym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.BlockSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.TypeSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.OOTypeSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.TypeElim GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.VariableSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.OOVariableSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.VariableElim GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.ValueSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.OOValueSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.Argument GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.Literal GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.MathConstant GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.VariableValue GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.OOVariableValue GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.CommandLineArgs GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.NumericExpression GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.BooleanExpression GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.Comparison GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.ValueExpression GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.OOValueExpression GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.InternalValueExp GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.FunctionSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.GetSet GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.List GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.InternalList GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.ThunkSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.ThunkAssign GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.VectorType GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.VectorDecl GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.VectorThunk GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.VectorExpression GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.StatementSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.AssignStatement GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.DeclStatement GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.OODeclStatement GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.IOStatement GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.StringStatement GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.FuncAppStatement GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.OOFuncAppStatement GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.CommentStatement GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.ControlStatement GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.ObserverPattern GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.StrategyPattern GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.ScopeSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.ParameterSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceCommon.MethodSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.OOMethodSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.StateVarSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.ClassSym GOOL.Drasil.CodeInfo.CodeInfo
instance GOOL.Drasil.InterfaceGOOL.ModuleSym GOOL.Drasil.CodeInfo.CodeInfo


-- | re-export smart constructors for external code writing
module GOOL.Drasil
type Label = String
type GSProgram a = GS (a (Program a))
type SFile a = FS (a (File a))
type MSBody a = MS (a (Body a))
type MSBlock a = MS (a (Block a))
type VSType a = VS (a (Type a))
type SVariable a = VS (a (Variable a))
type SValue a = VS (a (Value a))
type VSFunction a = VS (a (Function a))
type MSStatement a = MS (a (Statement a))
type MSParameter a = MS (a (Parameter a))
type SMethod a = MS (a (Method a))
type CSStateVar a = CS (a (StateVar a))
type SClass a = CS (a (Class a))
type FSModule a = FS (a (Module a))
type NamedArgs r = [(SVariable r, SValue r)]
type Initializers r = [(SVariable r, SValue r)]
class (SharedProg r, ProgramSym r, OOVariableValue r, OODeclStatement r, OOFuncAppStatement r, OOValueExpression r, InternalValueExp r, GetSet r, ObserverPattern r, StrategyPattern r) => OOProg r
class (FileSym r) => ProgramSym r where {
    type Program r;
}
prog :: ProgramSym r => Label -> Label -> [SFile r] -> GSProgram r
class (ModuleSym r) => FileSym r where {
    type File r;
}
fileDoc :: FileSym r => FSModule r -> SFile r
docMod :: FileSym r => String -> [String] -> String -> SFile r -> SFile r
class PermanenceSym r where {
    type Permanence r;
}
static :: PermanenceSym r => r (Permanence r)
dynamic :: PermanenceSym r => r (Permanence r)
class (BlockSym r) => BodySym r where {
    type Body r;
}
body :: BodySym r => [MSBlock r] -> MSBody r
addComments :: BodySym r => Label -> MSBody r -> MSBody r
bodyStatements :: BodySym r => [MSStatement r] -> MSBody r
oneLiner :: BodySym r => MSStatement r -> MSBody r
class (StatementSym r) => BlockSym r where {
    type Block r;
}
block :: BlockSym r => [MSStatement r] -> MSBlock r
class TypeSym r where {
    type Type r;
}
bool :: TypeSym r => VSType r
int :: TypeSym r => VSType r
float :: TypeSym r => VSType r
double :: TypeSym r => VSType r
char :: TypeSym r => VSType r
string :: TypeSym r => VSType r
infile :: TypeSym r => VSType r
outfile :: TypeSym r => VSType r
listType :: TypeSym r => VSType r -> VSType r
arrayType :: TypeSym r => VSType r -> VSType r
listInnerType :: TypeSym r => VSType r -> VSType r
funcType :: TypeSym r => [VSType r] -> VSType r -> VSType r
void :: TypeSym r => VSType r
class (TypeSym r) => OOTypeSym r
obj :: OOTypeSym r => ClassName -> VSType r
class (TypeSym r) => TypeElim r
getType :: TypeElim r => r (Type r) -> CodeType
getTypeString :: TypeElim r => r (Type r) -> String
class ThunkSym r where {
    type Thunk (r :: Type -> Type);
}
class TypeSym r => VectorType r
vecType :: VectorType r => VSType r -> VSType r
class (VariableSym r, StatementSym r) => VectorDecl r
vecDec :: VectorDecl r => Integer -> SVariable r -> MSStatement r
vecDecDef :: VectorDecl r => SVariable r -> [SValue r] -> MSStatement r
class (VariableSym r, ThunkSym r) => VectorThunk r
vecThunk :: VectorThunk r => SVariable r -> VSThunk r
class (ThunkSym r, ValueSym r) => VectorExpression r
vecScale :: VectorExpression r => SValue r -> VSThunk r -> VSThunk r
vecAdd :: VectorExpression r => VSThunk r -> VSThunk r -> VSThunk r
vecIndex :: VectorExpression r => SValue r -> VSThunk r -> SValue r
vecDot :: VectorExpression r => VSThunk r -> VSThunk r -> VSThunk r
class (VariableSym r, ThunkSym r, StatementSym r) => ThunkAssign r
thunkAssign :: ThunkAssign r => SVariable r -> VSThunk r -> MSStatement r
class (ValueSym r) => StatementSym r where {
    type Statement r;
}
valStmt :: StatementSym r => SValue r -> MSStatement r
multi :: StatementSym r => [MSStatement r] -> MSStatement r
class (VariableSym r, StatementSym r) => AssignStatement r
(&-=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
(&+=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
(&++) :: AssignStatement r => SVariable r -> MSStatement r
(&--) :: AssignStatement r => SVariable r -> MSStatement r
assign :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
infixl 8 &++
infixl 1 &+=
infixl 1 &-=
infixl 8 &--
(&=) :: AssignStatement r => SVariable r -> SValue r -> MSStatement r
infixr 1 &=
assignToListIndex :: (StatementSym r, VariableValue r, List r) => SVariable r -> SValue r -> SValue r -> MSStatement r
class (VariableSym r, StatementSym r) => DeclStatement r
varDec :: DeclStatement r => SVariable r -> MSStatement r
varDecDef :: DeclStatement r => SVariable r -> SValue r -> MSStatement r
listDec :: DeclStatement r => Integer -> SVariable r -> MSStatement r
listDecDef :: DeclStatement r => SVariable r -> [SValue r] -> MSStatement r
arrayDec :: DeclStatement r => Integer -> SVariable r -> MSStatement r
arrayDecDef :: DeclStatement r => SVariable r -> [SValue r] -> MSStatement r
constDecDef :: DeclStatement r => SVariable r -> SValue r -> MSStatement r
funcDecDef :: DeclStatement r => SVariable r -> [SVariable r] -> MSBody r -> MSStatement r
class (DeclStatement r, OOVariableSym r) => OODeclStatement r
objDecDef :: OODeclStatement r => SVariable r -> SValue r -> MSStatement r
objDecNew :: OODeclStatement r => SVariable r -> [SValue r] -> MSStatement r
extObjDecNew :: OODeclStatement r => Library -> SVariable r -> [SValue r] -> MSStatement r
objDecNewNoParams :: OODeclStatement r => SVariable r -> MSStatement r
extObjDecNewNoParams :: OODeclStatement r => Library -> SVariable r -> MSStatement r
class (VariableSym r, StatementSym r) => IOStatement r
print :: IOStatement r => SValue r -> MSStatement r
printLn :: IOStatement r => SValue r -> MSStatement r
printStr :: IOStatement r => String -> MSStatement r
printStrLn :: IOStatement r => String -> MSStatement r
printFile :: IOStatement r => SValue r -> SValue r -> MSStatement r
printFileLn :: IOStatement r => SValue r -> SValue r -> MSStatement r
printFileStr :: IOStatement r => SValue r -> String -> MSStatement r
printFileStrLn :: IOStatement r => SValue r -> String -> MSStatement r
getInput :: IOStatement r => SVariable r -> MSStatement r
discardInput :: IOStatement r => MSStatement r
getFileInput :: IOStatement r => SValue r -> SVariable r -> MSStatement r
discardFileInput :: IOStatement r => SValue r -> MSStatement r
openFileR :: IOStatement r => SVariable r -> SValue r -> MSStatement r
openFileW :: IOStatement r => SVariable r -> SValue r -> MSStatement r
openFileA :: IOStatement r => SVariable r -> SValue r -> MSStatement r
closeFile :: IOStatement r => SValue r -> MSStatement r
getFileInputLine :: IOStatement r => SValue r -> SVariable r -> MSStatement r
discardFileLine :: IOStatement r => SValue r -> MSStatement r
getFileInputAll :: IOStatement r => SValue r -> SVariable r -> MSStatement r
class (VariableSym r, StatementSym r) => StringStatement r
stringSplit :: StringStatement r => Char -> SVariable r -> SValue r -> MSStatement r
stringListVals :: StringStatement r => [SVariable r] -> SValue r -> MSStatement r
stringListLists :: StringStatement r => [SVariable r] -> SValue r -> MSStatement r
class (VariableSym r, StatementSym r) => FuncAppStatement r
inOutCall :: FuncAppStatement r => InOutCall r
extInOutCall :: FuncAppStatement r => Library -> InOutCall r
class (FuncAppStatement r, OOVariableSym r) => OOFuncAppStatement r
selfInOutCall :: OOFuncAppStatement r => InOutCall r
class (StatementSym r) => CommentStatement r
comment :: CommentStatement r => Comment -> MSStatement r
initObserverList :: DeclStatement r => VSType r -> [SValue r] -> MSStatement r
addObserver :: (StatementSym r, OOVariableValue r, List r) => SValue r -> MSStatement r
class (BodySym r, VariableSym r) => ControlStatement r
break :: ControlStatement r => MSStatement r
continue :: ControlStatement r => MSStatement r
returnStmt :: ControlStatement r => SValue r -> MSStatement r
throw :: ControlStatement r => Label -> MSStatement r

-- | String of if-else statements. Arguments: List of predicates and bodies
--   (if this then that), Body for else branch
ifCond :: ControlStatement r => [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
switch :: ControlStatement r => SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
ifExists :: ControlStatement r => SValue r -> MSBody r -> MSBody r -> MSStatement r
for :: ControlStatement r => MSStatement r -> SValue r -> MSStatement r -> MSBody r -> MSStatement r
forRange :: ControlStatement r => SVariable r -> SValue r -> SValue r -> SValue r -> MSBody r -> MSStatement r
forEach :: ControlStatement r => SVariable r -> SValue r -> MSBody r -> MSStatement r
while :: ControlStatement r => SValue r -> MSBody r -> MSStatement r
tryCatch :: ControlStatement r => MSBody r -> MSBody r -> MSStatement r
ifNoElse :: ControlStatement r => [(SValue r, MSBody r)] -> MSStatement r
switchAsIf :: (ControlStatement r, Comparison r) => SValue r -> [(SValue r, MSBody r)] -> MSBody r -> MSStatement r
class (TypeSym r) => VariableSym r where {
    type Variable r;
}
var :: VariableSym r => Label -> VSType r -> SVariable r
constant :: VariableSym r => Label -> VSType r -> SVariable r
extVar :: VariableSym r => Library -> Label -> VSType r -> SVariable r
arrayElem :: VariableSym r => Integer -> SVariable r -> SVariable r
class (VariableSym r, OOTypeSym r) => OOVariableSym r
staticVar :: OOVariableSym r => Label -> VSType r -> SVariable r
self :: OOVariableSym r => SVariable r
classVar :: OOVariableSym r => VSType r -> SVariable r -> SVariable r
extClassVar :: OOVariableSym r => VSType r -> SVariable r -> SVariable r
objVar :: OOVariableSym r => SVariable r -> SVariable r -> SVariable r
objVarSelf :: OOVariableSym r => SVariable r -> SVariable r
class (VariableSym r) => VariableElim r
variableName :: VariableElim r => r (Variable r) -> String
variableType :: VariableElim r => r (Variable r) -> r (Type r)
($->) :: OOVariableSym r => SVariable r -> SVariable r -> SVariable r
infixl 9 $->
listOf :: VariableSym r => Label -> VSType r -> SVariable r
listVar :: VariableSym r => Label -> VSType r -> SVariable r
class (TypeSym r) => ValueSym r where {
    type Value r;
}
valueType :: ValueSym r => r (Value r) -> r (Type r)
class (ValueSym r) => Argument r
pointerArg :: Argument r => SValue r -> SValue r
class (ValueSym r) => Literal r
litTrue :: Literal r => SValue r
litFalse :: Literal r => SValue r
litChar :: Literal r => Char -> SValue r
litDouble :: Literal r => Double -> SValue r
litFloat :: Literal r => Float -> SValue r
litInt :: Literal r => Integer -> SValue r
litString :: Literal r => String -> SValue r
litArray :: Literal r => VSType r -> [SValue r] -> SValue r
litList :: Literal r => VSType r -> [SValue r] -> SValue r
class (ValueSym r) => MathConstant r
pi :: MathConstant r => SValue r
class (VariableSym r, ValueSym r) => VariableValue r
valueOf :: VariableValue r => SVariable r -> SValue r
class (VariableValue r, OOVariableSym r) => OOVariableValue r
class (ValueSym r) => CommandLineArgs r
arg :: CommandLineArgs r => Integer -> SValue r
argsList :: CommandLineArgs r => SValue r
argExists :: CommandLineArgs r => Integer -> SValue r
class (ValueSym r) => NumericExpression r
(#~) :: NumericExpression r => SValue r -> SValue r
(#/^) :: NumericExpression r => SValue r -> SValue r
(#|) :: NumericExpression r => SValue r -> SValue r
(#+) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#-) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#*) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#/) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#%) :: NumericExpression r => SValue r -> SValue r -> SValue r
(#^) :: NumericExpression r => SValue r -> SValue r -> SValue r
log :: NumericExpression r => SValue r -> SValue r
ln :: NumericExpression r => SValue r -> SValue r
exp :: NumericExpression r => SValue r -> SValue r
sin :: NumericExpression r => SValue r -> SValue r
cos :: NumericExpression r => SValue r -> SValue r
tan :: NumericExpression r => SValue r -> SValue r
csc :: NumericExpression r => SValue r -> SValue r
sec :: NumericExpression r => SValue r -> SValue r
cot :: NumericExpression r => SValue r -> SValue r
arcsin :: NumericExpression r => SValue r -> SValue r
arccos :: NumericExpression r => SValue r -> SValue r
arctan :: NumericExpression r => SValue r -> SValue r
floor :: NumericExpression r => SValue r -> SValue r
ceil :: NumericExpression r => SValue r -> SValue r
infixl 5 #+
infixl 5 #-
infixl 6 #/
infixl 6 #*
infixl 8 #~
infixl 7 #/^
infixl 7 #|
infixl 6 #%
infixl 7 #^
class (ValueSym r) => BooleanExpression r
(?!) :: BooleanExpression r => SValue r -> SValue r
(?&&) :: BooleanExpression r => SValue r -> SValue r -> SValue r
(?||) :: BooleanExpression r => SValue r -> SValue r -> SValue r
infixl 2 ?&&
infixl 1 ?||
infixr 6 ?!
class (ValueSym r) => Comparison r
(?<) :: Comparison r => SValue r -> SValue r -> SValue r
(?<=) :: Comparison r => SValue r -> SValue r -> SValue r
(?>) :: Comparison r => SValue r -> SValue r -> SValue r
(?>=) :: Comparison r => SValue r -> SValue r -> SValue r
(?==) :: Comparison r => SValue r -> SValue r -> SValue r
(?!=) :: Comparison r => SValue r -> SValue r -> SValue r
infixl 4 ?<
infixl 4 ?<=
infixl 4 ?>
infixl 4 ?>=
infixl 3 ?==
infixl 3 ?!=
class (VariableSym r, ValueSym r) => ValueExpression r
inlineIf :: ValueExpression r => SValue r -> SValue r -> SValue r -> SValue r
funcAppMixedArgs :: ValueExpression r => MixedCall r
extFuncAppMixedArgs :: ValueExpression r => Library -> MixedCall r
libFuncAppMixedArgs :: ValueExpression r => Library -> MixedCall r
lambda :: ValueExpression r => [SVariable r] -> SValue r -> SValue r
notNull :: ValueExpression r => SValue r -> SValue r
class (ValueExpression r, OOVariableSym r, OOValueSym r) => OOValueExpression r
selfFuncAppMixedArgs :: OOValueExpression r => MixedCall r
newObjMixedArgs :: OOValueExpression r => MixedCtorCall r
extNewObjMixedArgs :: OOValueExpression r => Library -> MixedCtorCall r
libNewObjMixedArgs :: OOValueExpression r => Library -> MixedCtorCall r
funcApp :: ValueExpression r => PosCall r
funcAppNamedArgs :: ValueExpression r => Label -> VSType r -> NamedArgs r -> SValue r
selfFuncApp :: OOValueExpression r => PosCall r
extFuncApp :: ValueExpression r => Library -> PosCall r
libFuncApp :: ValueExpression r => Library -> PosCall r
newObj :: OOValueExpression r => PosCtorCall r
extNewObj :: OOValueExpression r => Library -> PosCtorCall r
libNewObj :: OOValueExpression r => Library -> PosCtorCall r
exists :: ValueExpression r => SValue r -> SValue r

-- | Calling a method. t is the return type of the method, o is the object,
--   f is the method name, and ps is a list of positional arguments.
objMethodCall :: InternalValueExp r => VSType r -> SValue r -> Label -> [SValue r] -> SValue r

-- | Calling a method with named arguments.
objMethodCallNamedArgs :: InternalValueExp r => VSType r -> SValue r -> Label -> NamedArgs r -> SValue r

-- | Calling a method with a mix of positional and named arguments.
objMethodCallMixedArgs :: InternalValueExp r => VSType r -> SValue r -> Label -> [SValue r] -> NamedArgs r -> SValue r

-- | Calling a method with no parameters.
objMethodCallNoParams :: InternalValueExp r => VSType r -> SValue r -> Label -> SValue r
class (ValueSym r) => FunctionSym r where {
    type Function r;
}
func :: FunctionSym r => Label -> VSType r -> [SValue r] -> VSFunction r
objAccess :: FunctionSym r => SValue r -> VSFunction r -> SValue r
($.) :: FunctionSym r => SValue r -> VSFunction r -> SValue r
infixl 9 $.
selfAccess :: (OOVariableValue r, FunctionSym r) => VSFunction r -> SValue r
class (ValueSym r, VariableSym r) => GetSet r
get :: GetSet r => SValue r -> SVariable r -> SValue r
set :: GetSet r => SValue r -> SVariable r -> SValue r -> SValue r
class (ValueSym r) => List r

-- | Does any necessary conversions from GOOL's zero-indexed assumptions to
--   the target language's assumptions
intToIndex :: List r => SValue r -> SValue r

-- | Does any necessary conversions from the target language's indexing
--   assumptions assumptions to GOOL's zero-indexed assumptions
indexToInt :: List r => SValue r -> SValue r

-- | Finds the size of a list. Arguments are: List
listSize :: List r => SValue r -> SValue r

-- | Inserts a value into a list. Arguments are: List, Index, Value
listAdd :: List r => SValue r -> SValue r -> SValue r -> SValue r

-- | Appens a value to a list. Arguments are: List, Value
listAppend :: List r => SValue r -> SValue r -> SValue r

-- | Gets the value of an index of a list. Arguments are: List, Index
listAccess :: List r => SValue r -> SValue r -> SValue r

-- | Sets the value of an index of a list. Arguments are: List, Index,
--   Value
listSet :: List r => SValue r -> SValue r -> SValue r -> SValue r

-- | Finds the index of the first occurrence of a value in a list.
--   Arguments are: List, Value
indexOf :: List r => SValue r -> SValue r -> SValue r

-- | Creates a slice of a list and assigns it to a variable. Arguments are:
--   Variable to assign List to read from [Start index] inclusive. (if
--   Nothing, then list start if step &gt; 0, list end if step &lt; 0) [End
--   index] exclusive. (if Nothing, then list end if step &gt; 0, list
--   start if step &gt; 0) [Step] (if Nothing, then defaults to 1)
listSlice :: InternalList r => SVariable r -> SValue r -> Maybe (SValue r) -> Maybe (SValue r) -> Maybe (SValue r) -> MSBlock r
listIndexExists :: (List r, Comparison r) => SValue r -> SValue r -> SValue r
at :: List r => SValue r -> SValue r -> SValue r
class (StatementSym r, FunctionSym r) => ObserverPattern r
notifyObservers :: ObserverPattern r => VSFunction r -> VSType r -> MSStatement r
class (BodySym r, VariableSym r) => StrategyPattern r
runStrategy :: StrategyPattern r => Label -> [(Label, MSBody r)] -> Maybe (SValue r) -> Maybe (SVariable r) -> MSBlock r
class ScopeSym r where {
    type Scope r;
}
private :: ScopeSym r => r (Scope r)
public :: ScopeSym r => r (Scope r)
class (VariableSym r) => ParameterSym r where {
    type Parameter r;
}
param :: ParameterSym r => SVariable r -> MSParameter r
pointerParam :: ParameterSym r => SVariable r -> MSParameter r
class (BodySym r, ParameterSym r, ScopeSym r) => MethodSym r where {
    type Method r;
}
docMain :: MethodSym r => MSBody r -> SMethod r
function :: MethodSym r => Label -> r (Scope r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
mainFunction :: MethodSym r => MSBody r -> SMethod r
docFunc :: MethodSym r => String -> [String] -> Maybe String -> SMethod r -> SMethod r
inOutFunc :: MethodSym r => Label -> r (Scope r) -> InOutFunc r
docInOutFunc :: MethodSym r => Label -> r (Scope r) -> DocInOutFunc r
class (MethodSym r, PermanenceSym r) => OOMethodSym r
method :: OOMethodSym r => Label -> r (Scope r) -> r (Permanence r) -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
getMethod :: OOMethodSym r => SVariable r -> SMethod r
setMethod :: OOMethodSym r => SVariable r -> SMethod r
constructor :: OOMethodSym r => [MSParameter r] -> Initializers r -> MSBody r -> SMethod r
inOutMethod :: OOMethodSym r => Label -> r (Scope r) -> r (Permanence r) -> InOutFunc r
docInOutMethod :: OOMethodSym r => Label -> r (Scope r) -> r (Permanence r) -> DocInOutFunc r
privMethod :: OOMethodSym r => Label -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
pubMethod :: OOMethodSym r => Label -> VSType r -> [MSParameter r] -> MSBody r -> SMethod r
initializer :: OOMethodSym r => [MSParameter r] -> Initializers r -> SMethod r
nonInitConstructor :: OOMethodSym r => [MSParameter r] -> MSBody r -> SMethod r
class (ScopeSym r, PermanenceSym r, VariableSym r) => StateVarSym r where {
    type StateVar r;
}
stateVar :: StateVarSym r => r (Scope r) -> r (Permanence r) -> SVariable r -> CSStateVar r
stateVarDef :: StateVarSym r => r (Scope r) -> r (Permanence r) -> SVariable r -> SValue r -> CSStateVar r
constVar :: StateVarSym r => r (Scope r) -> SVariable r -> SValue r -> CSStateVar r
privDVar :: StateVarSym r => SVariable r -> CSStateVar r
pubDVar :: StateVarSym r => SVariable r -> CSStateVar r
pubSVar :: StateVarSym r => SVariable r -> CSStateVar r
class (OOMethodSym r, StateVarSym r) => ClassSym r where {
    type Class r;
}

-- | Main external method for creating a class. Inputs: parent class,
--   variables, constructor(s), methods
buildClass :: ClassSym r => Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r

-- | Creates an extra class. Inputs: class name, the rest are the same as
--   buildClass.
extraClass :: ClassSym r => Label -> Maybe Label -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r

-- | Creates a class implementing interfaces. Inputs: class name, interface
--   names, variables, constructor(s), methods
implementingClass :: ClassSym r => Label -> [Label] -> [CSStateVar r] -> [SMethod r] -> [SMethod r] -> SClass r
docClass :: ClassSym r => String -> SClass r -> SClass r
class (ClassSym r) => ModuleSym r where {
    type Module r;
}
buildModule :: ModuleSym r => Label -> [Label] -> [SMethod r] -> [SClass r] -> FSModule r
convType :: TypeSym r => CodeType -> VSType r
convTypeOO :: OOTypeSym r => CodeType -> VSType r
data ProgData
data FileData
data ModData
data ScopeTag
Pub :: ScopeTag
Priv :: ScopeTag
data CodeType
Boolean :: CodeType
Integer :: CodeType
Float :: CodeType
Double :: CodeType
Char :: CodeType
String :: CodeType
InFile :: CodeType
OutFile :: CodeType
List :: CodeType -> CodeType
Array :: CodeType -> CodeType
Object :: ClassName -> CodeType
Func :: [CodeType] -> CodeType -> CodeType
Void :: CodeType
data GOOLState
GS :: [FilePath] -> [FilePath] -> Maybe FilePath -> Map String ClassName -> Map QualifiedName [ExceptionType] -> Map QualifiedName [QualifiedName] -> Bool -> Bool -> GOOLState
[_headers] :: GOOLState -> [FilePath]
[_sources] :: GOOLState -> [FilePath]
[_mainMod] :: GOOLState -> Maybe FilePath
[_classMap] :: GOOLState -> Map String ClassName
[_methodExceptionMap] :: GOOLState -> Map QualifiedName [ExceptionType]
[_callMap] :: GOOLState -> Map QualifiedName [QualifiedName]
[_throwUsed] :: GOOLState -> Bool
[_errorDefined] :: GOOLState -> Bool
lensMStoVS :: Lens' MethodState ValueState
headers :: Lens' GOOLState [FilePath]
sources :: Lens' GOOLState [FilePath]
mainMod :: Lens' GOOLState (Maybe FilePath)
initialState :: GOOLState
onStateValue :: (a -> b) -> State s a -> State s b
onCodeList :: Monad m => ([a] -> b) -> [m a] -> m b
unCI :: CodeInfo a -> a
unPC :: PythonCode a -> a
unJC :: JavaCode a -> a
unCSC :: CSharpCode a -> a
unCPPC :: CppCode CppSrcCode CppHdrCode a -> a
unSC :: SwiftCode a -> a
pyName :: String
pyVersion :: String
jName :: String
jVersion :: String
csName :: String
csVersion :: String
cppName :: String
cppVersion :: String
swiftName :: String
swiftVersion :: String
