""" InputParameters.jl
    Provides the function for reading inputs, the function for calculating derived values, and the function for checking the physical constraints and software constraints on the input
    - Authors: Thulasi Jegatheesan
    - Note: Generated by Drasil v0.1-alpha
"""

module InputParameters

""" Reads input from a file with the given file name
    - Parameter filename: name of the input file
    - Returns: heating coil surface area: area covered by the outermost layer of the coil (m^2)
    - Returns: specific heat capacity of water: the amount of energy required to raise the temperature of a given unit mass of water by a given amount (J/(kg degreeC))
    - Returns: convective heat transfer coefficient between coil and water: the convective heat transfer coefficient that models the thermal flux from the coil to the surrounding water (W/(m^2 degreeC))
    - Returns: initial temperature: the temperature at the beginning of the simulation (degreeC)
    - Returns: final time: the amount of time elapsed from the beginning of the simulation to its conclusion (s)
    - Returns: length of tank: the length of the tank (m)
    - Returns: temperature of the heating coil: the average kinetic energy of the particles within the coil (degreeC)
    - Returns: time step for simulation: the finite discretization of time used in the numerical method for solving the computational model (s)
    - Returns: density of water: mass per unit volume of water (kg/m^3)
    - Returns: diameter of tank: the diameter of the tank (m)
    - Returns: absolute tolerance
    - Returns: relative tolerance
    - Returns: change in heat energy in the water: change in thermal energy within the water (J)
"""
function get_input(filename::String)
    infile = open(filename, "r")
    readline(infile)
    A_C = parse(Float64, readline(infile))
    readline(infile)
    C_W = parse(Float64, readline(infile))
    readline(infile)
    h_C = parse(Float64, readline(infile))
    readline(infile)
    T_init = parse(Float64, readline(infile))
    readline(infile)
    t_final = parse(Float64, readline(infile))
    readline(infile)
    L = parse(Float64, readline(infile))
    readline(infile)
    T_C = parse(Float64, readline(infile))
    readline(infile)
    t_step = parse(Float64, readline(infile))
    readline(infile)
    rho_W = parse(Float64, readline(infile))
    readline(infile)
    D = parse(Float64, readline(infile))
    readline(infile)
    A_tol = parse(Float64, readline(infile))
    readline(infile)
    R_tol = parse(Float64, readline(infile))
    readline(infile)
    E_W = parse(Float64, readline(infile))
    close(infile)
    
    return A_C, C_W, h_C, T_init, t_final, L, T_C, t_step, rho_W, D, A_tol, R_tol, E_W
end

""" Calculates values that can be immediately derived from the inputs
    - Parameter D: diameter of tank: the diameter of the tank (m)
    - Parameter L: length of tank: the length of the tank (m)
    - Parameter pi: ratio of circumference to diameter for any circle: The ratio of a circle's circumference to its diameter
    - Returns: volume of the cylindrical tank: the amount of space encompassed by a tank (m^3)
"""
function derived_values(D::Float64, L::Float64, pi::Float64)
    V_tank = pi * (D / 2.0) ^ 2.0 * L
    
    return V_tank
end

""" Verifies that input values satisfy the physical constraints and software constraints
    - Parameter A_C: heating coil surface area: area covered by the outermost layer of the coil (m^2)
    - Parameter C_W: specific heat capacity of water: the amount of energy required to raise the temperature of a given unit mass of water by a given amount (J/(kg degreeC))
    - Parameter h_C: convective heat transfer coefficient between coil and water: the convective heat transfer coefficient that models the thermal flux from the coil to the surrounding water (W/(m^2 degreeC))
    - Parameter T_init: initial temperature: the temperature at the beginning of the simulation (degreeC)
    - Parameter t_final: final time: the amount of time elapsed from the beginning of the simulation to its conclusion (s)
    - Parameter L: length of tank: the length of the tank (m)
    - Parameter T_C: temperature of the heating coil: the average kinetic energy of the particles within the coil (degreeC)
    - Parameter t_step: time step for simulation: the finite discretization of time used in the numerical method for solving the computational model (s)
    - Parameter rho_W: density of water: mass per unit volume of water (kg/m^3)
    - Parameter D: diameter of tank: the diameter of the tank (m)
    - Parameter E_W: change in heat energy in the water: change in thermal energy within the water (J)
    - Parameter A_C_max: maximum surface area of coil (m^2)
    - Parameter C_W_min: minimum specific heat capacity of water (J/(kg degreeC))
    - Parameter C_W_max: maximum specific heat capacity of water (J/(kg degreeC))
    - Parameter h_C_min: minimum convective heat transfer coefficient between coil and water (W/(m^2 degreeC))
    - Parameter h_C_max: maximum convective heat transfer coefficient between coil and water (W/(m^2 degreeC))
    - Parameter t_final_max: maximum final time (s)
    - Parameter L_min: minimum length of tank (m)
    - Parameter L_max: maximum length of tank (m)
    - Parameter rho_W_min: minimum density of water (kg/m^3)
    - Parameter rho_W_max: maximum density of water (kg/m^3)
    - Parameter AR_min: minimum aspect ratio
    - Parameter AR_max: maximum aspect ratio
"""
function input_constraints(A_C::Float64, C_W::Float64, h_C::Float64, T_init::Float64, t_final::Float64, L::Float64, T_C::Float64, t_step::Float64, rho_W::Float64, D::Float64, E_W::Float64, A_C_max::Float64, C_W_min::Float64, C_W_max::Float64, h_C_min::Float64, h_C_max::Float64, t_final_max::Float64, L_min::Float64, L_max::Float64, rho_W_min::Float64, rho_W_max::Float64, AR_min::Float64, AR_max::Float64)
    if !(A_C <= A_C_max)
        print("Warning: ")
        print("A_C has value ")
        print(A_C)
        print(", but is suggested to be ")
        print("below ")
        print(A_C_max)
        print(" (A_C_max)")
        println(".")
    end
    if !(C_W_min < C_W && C_W < C_W_max)
        print("Warning: ")
        print("C_W has value ")
        print(C_W)
        print(", but is suggested to be ")
        print("between ")
        print(C_W_min)
        print(" (C_W_min)")
        print(" and ")
        print(C_W_max)
        print(" (C_W_max)")
        println(".")
    end
    if !(h_C_min <= h_C && h_C <= h_C_max)
        print("Warning: ")
        print("h_C has value ")
        print(h_C)
        print(", but is suggested to be ")
        print("between ")
        print(h_C_min)
        print(" (h_C_min)")
        print(" and ")
        print(h_C_max)
        print(" (h_C_max)")
        println(".")
    end
    if !(t_final < t_final_max)
        print("Warning: ")
        print("t_final has value ")
        print(t_final)
        print(", but is suggested to be ")
        print("below ")
        print(t_final_max)
        print(" (t_final_max)")
        println(".")
    end
    if !(L_min <= L && L <= L_max)
        print("Warning: ")
        print("L has value ")
        print(L)
        print(", but is suggested to be ")
        print("between ")
        print(L_min)
        print(" (L_min)")
        print(" and ")
        print(L_max)
        print(" (L_max)")
        println(".")
    end
    if !(rho_W_min < rho_W && rho_W <= rho_W_max)
        print("Warning: ")
        print("rho_W has value ")
        print(rho_W)
        print(", but is suggested to be ")
        print("between ")
        print(rho_W_min)
        print(" (rho_W_min)")
        print(" and ")
        print(rho_W_max)
        print(" (rho_W_max)")
        println(".")
    end
    if !(AR_min <= D && D <= AR_max)
        print("Warning: ")
        print("D has value ")
        print(D)
        print(", but is suggested to be ")
        print("between ")
        print(AR_min)
        print(" (AR_min)")
        print(" and ")
        print(AR_max)
        print(" (AR_max)")
        println(".")
    end
    
    if !(A_C > 0.0)
        print("Warning: ")
        print("A_C has value ")
        print(A_C)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(C_W > 0.0)
        print("Warning: ")
        print("C_W has value ")
        print(C_W)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(h_C > 0.0)
        print("Warning: ")
        print("h_C has value ")
        print(h_C)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(0.0 < T_init && T_init < 100.0)
        print("Warning: ")
        print("T_init has value ")
        print(T_init)
        print(", but is suggested to be ")
        print("between ")
        print(0.0)
        print(" and ")
        print(100.0)
        println(".")
    end
    if !(t_final > 0.0)
        print("Warning: ")
        print("t_final has value ")
        print(t_final)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(L > 0.0)
        print("Warning: ")
        print("L has value ")
        print(L)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(0.0 < T_C && T_C < 100.0)
        print("Warning: ")
        print("T_C has value ")
        print(T_C)
        print(", but is suggested to be ")
        print("between ")
        print(0.0)
        print(" and ")
        print(100.0)
        println(".")
    end
    if !(0.0 < t_step && t_step < t_final)
        print("Warning: ")
        print("t_step has value ")
        print(t_step)
        print(", but is suggested to be ")
        print("between ")
        print(0.0)
        print(" and ")
        print(t_final)
        print(" (t_final)")
        println(".")
    end
    if !(rho_W > 0.0)
        print("Warning: ")
        print("rho_W has value ")
        print(rho_W)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(D > 0.0)
        print("Warning: ")
        print("D has value ")
        print(D)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
    if !(E_W >= 0.0)
        print("Warning: ")
        print("E_W has value ")
        print(E_W)
        print(", but is suggested to be ")
        print("above ")
        print(0.0)
        println(".")
    end
end

end
