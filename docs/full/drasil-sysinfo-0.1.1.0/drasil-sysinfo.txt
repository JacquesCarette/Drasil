-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - SystemInformation SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-sysinfo
@version 0.1.1.0


-- | Define types and functions related to creating a system information
--   database.
module SysInfo.Drasil.SystemInformation

-- | Data structure for holding all of the requisite information about a
--   system to be used in artifact generation.
data SystemInformation
[SI] :: (CommonIdea a, Idea a, Idea b, Quantity e, Eq e, MayHaveUnit e, Quantity h, MayHaveUnit h, Quantity i, MayHaveUnit i, HasUID j, Constrained j) => a -> b -> People -> Purpose -> Background -> Scope -> Motivation -> [e] -> [InstanceModel] -> [DataDefinition] -> [String] -> [h] -> [i] -> [j] -> [ConstQDef] -> ChunkDB -> ChunkDB -> SystemInformation
class HasSystemInformation c_a8b2
systemInformation :: HasSystemInformation c_a8b2 => Lens' c_a8b2 SystemInformation
authors :: HasSystemInformation c_a8b2 => Lens' c_a8b2 People
background :: HasSystemInformation c_a8b2 => Lens' c_a8b2 Background
configFiles :: HasSystemInformation c_a8b2 => Lens' c_a8b2 [String]
constants :: HasSystemInformation c_a8b2 => Lens' c_a8b2 [ConstQDef]
datadefs :: HasSystemInformation c_a8b2 => Lens' c_a8b2 [DataDefinition]
instModels :: HasSystemInformation c_a8b2 => Lens' c_a8b2 [InstanceModel]
motivation :: HasSystemInformation c_a8b2 => Lens' c_a8b2 Motivation
purpose :: HasSystemInformation c_a8b2 => Lens' c_a8b2 Purpose
scope :: HasSystemInformation c_a8b2 => Lens' c_a8b2 Scope
sysinfodb :: HasSystemInformation c_a8b2 => Lens' c_a8b2 ChunkDB
usedinfodb :: HasSystemInformation c_a8b2 => Lens' c_a8b2 ChunkDB

-- | Project Example purpose.
type Purpose = [Sentence]

-- | Project Example background information, used in the <tt>What</tt>
--   section of README.
type Background = [Sentence]

-- | Project Example scope.
type Scope = [Sentence]

-- | Project Example motivation.
type Motivation = [Sentence]
instance SysInfo.Drasil.SystemInformation.HasSystemInformation SysInfo.Drasil.SystemInformation.SystemInformation


-- | Utilities to get grab certain chunks (from <a>Expr</a>,
--   <a>Sentence</a>, etc) by <a>UID</a> and dereference the chunk it
--   refers to.
module SysInfo.Drasil.GetChunk

-- | Gets a list of defined quantities (<a>DefinedQuantityDict</a>s) from
--   <a>Sentence</a>s and expressions that are contained in the database
--   (<a>ChunkDB</a>).
ccss :: [Sentence] -> [ModelExpr] -> ChunkDB -> [DefinedQuantityDict]

-- | Gets a list of quantities (<a>QuantityDict</a>s) from <a>Sentence</a>s
--   and expressions that are contained in the database (<a>ChunkDB</a>).
ccss' :: [Sentence] -> [ModelExpr] -> ChunkDB -> [QuantityDict]

-- | Combines the functions of <a>vars</a> and <a>concpt</a> to create a
--   list of <a>DefinedQuantityDict</a>s from a <a>Sentence</a>.
combine :: Sentence -> ChunkDB -> [DefinedQuantityDict]

-- | Gets a list of quantities (<a>QuantityDict</a>) from an equation in
--   order to print.
vars :: ModelExpr -> ChunkDB -> [QuantityDict]

-- | Helper for extracting a bibliography from the system information.
citeDB :: SystemInformation -> BibRef

module SysInfo.Drasil

-- | Data structure for holding all of the requisite information about a
--   system to be used in artifact generation.
data SystemInformation
[SI] :: (CommonIdea a, Idea a, Idea b, Quantity e, Eq e, MayHaveUnit e, Quantity h, MayHaveUnit h, Quantity i, MayHaveUnit i, HasUID j, Constrained j) => a -> b -> People -> Purpose -> Background -> Scope -> Motivation -> [e] -> [InstanceModel] -> [DataDefinition] -> [String] -> [h] -> [i] -> [j] -> [ConstQDef] -> ChunkDB -> ChunkDB -> SystemInformation
class HasSystemInformation c_a8b2
systemInformation :: HasSystemInformation c_a8b2 => Lens' c_a8b2 SystemInformation
authors :: HasSystemInformation c_a8b2 => Lens' c_a8b2 People
background :: HasSystemInformation c_a8b2 => Lens' c_a8b2 Background
configFiles :: HasSystemInformation c_a8b2 => Lens' c_a8b2 [String]
constants :: HasSystemInformation c_a8b2 => Lens' c_a8b2 [ConstQDef]
datadefs :: HasSystemInformation c_a8b2 => Lens' c_a8b2 [DataDefinition]
instModels :: HasSystemInformation c_a8b2 => Lens' c_a8b2 [InstanceModel]
motivation :: HasSystemInformation c_a8b2 => Lens' c_a8b2 Motivation
purpose :: HasSystemInformation c_a8b2 => Lens' c_a8b2 Purpose
scope :: HasSystemInformation c_a8b2 => Lens' c_a8b2 Scope
sysinfodb :: HasSystemInformation c_a8b2 => Lens' c_a8b2 ChunkDB
usedinfodb :: HasSystemInformation c_a8b2 => Lens' c_a8b2 ChunkDB

-- | Project Example purpose.
type Purpose = [Sentence]

-- | Project Example background information, used in the <tt>What</tt>
--   section of README.
type Background = [Sentence]

-- | Project Example scope.
type Scope = [Sentence]

-- | Project Example motivation.
type Motivation = [Sentence]

-- | Helper for extracting a bibliography from the system information.
citeDB :: SystemInformation -> BibRef

-- | Gets a list of defined quantities (<a>DefinedQuantityDict</a>s) from
--   <a>Sentence</a>s and expressions that are contained in the database
--   (<a>ChunkDB</a>).
ccss :: [Sentence] -> [ModelExpr] -> ChunkDB -> [DefinedQuantityDict]

-- | Gets a list of quantities (<a>QuantityDict</a>s) from <a>Sentence</a>s
--   and expressions that are contained in the database (<a>ChunkDB</a>).
ccss' :: [Sentence] -> [ModelExpr] -> ChunkDB -> [QuantityDict]

-- | Gets a list of quantities (<a>QuantityDict</a>) from an equation in
--   order to print.
vars :: ModelExpr -> ChunkDB -> [QuantityDict]
