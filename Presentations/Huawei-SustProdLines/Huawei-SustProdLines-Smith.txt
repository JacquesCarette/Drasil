Sustainable Software Product Lines via Generation

Although developing software using a product line approach provides economic benefits, developers may find systematically managing core assets and variabilities challenging.  The challenges are even more pronounced when the assets include extensive documentation artifacts such as requirements specifications, design documents, test plans, and user manuals.  The source of the challenge is that variabilities between product line members do not just appear in the code, but potentially cross-cut multiple software artifacts.  To gain the benefits of a software product line approach we propose using a framework that emphasizes generation of all software artifacts (code, documentation, scripts, etc.).  Our prototype tool, Drasil, takes advantage of the inherent knowledge duplication between artifacts by capturing the knowledge once and providing a means to transform that information into all of the views needed within a given product.  We will illustrate Drasil, and its support for a product line approach, via a simple example of software that predicts whether a given plane of glass is likely to break when subjected to an explosion.  Sample variabilities include the software's name, assumptions, the format of the documentation (html or pdf), the programming language (Python, C++, C#, Java, or Swift), and design decisions (like whether to log all calculations, and whether to in-line constants rather than show them symbolically).