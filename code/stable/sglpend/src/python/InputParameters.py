## \file InputParameters.py
# \author Olu Owojaiye
# \brief Provides the function for reading inputs, the function for calculating derived values, and the function for checking the physical constraints on the input
# \note Generated by Drasil v0.1-alpha

import math

## \brief Reads input from a file with the given file name
# \param filename name of the input file
# \return length of the rod (m)
# \return mass (kg)
# \return angular acceleration (rad/s^2)
# \return displacement angle of the pendulum (rad)
# \return initial pendulum angle (rad)
def get_input(filename):
    infile = open(filename, "r")
    infile.readline()
    L_rod = float(infile.readline())
    infile.readline()
    m = float(infile.readline())
    infile.readline()
    α = float(infile.readline())
    infile.readline()
    θ_p = float(infile.readline())
    infile.readline()
    θ_i = float(infile.readline())
    infile.close()
    
    return L_rod, m, α, θ_p, θ_i

## \brief Calculates values that can be immediately derived from the inputs
# \param L_rod length of the rod (m)
# \param θ_i initial pendulum angle (rad)
# \return x-component of initial position (m)
# \return y-component of initial position (m)
def derived_values(L_rod, θ_i):
    p_x^i = L_rod * math.sin(θ_i)
    
    p_y^i = -(L_rod * math.cos(θ_i))
    
    return p_x^i, p_y^i

## \brief Verifies that input values satisfy the physical constraints
# \param L_rod length of the rod (m)
# \param θ_i initial pendulum angle (rad)
def input_constraints(L_rod, θ_i):
    if not(L_rod > 0.0):
        print("Warning: ", end="")
        print("L_rod has value ", end="")
        print(L_rod, end="")
        print(", but is suggested to be ", end="")
        print("above ", end="")
        print(0.0, end="")
        print(".")
    if not(θ_i > 0.0):
        print("Warning: ", end="")
        print("θ_i has value ", end="")
        print(θ_i, end="")
        print(", but is suggested to be ", end="")
        print("above ", end="")
        print(0.0, end="")
        print(".")
