-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - SystemInformation SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-sysinfo
@version 0.1.1.0

module SysInfo.Drasil

-- | Data structure for holding all of the requisite information about a
--   system to be used in artifact generation.
data SystemInformation
[SI] :: (CommonIdea a, Idea a, Idea b, HasName c, Quantity e, Eq e, MayHaveUnit e, Quantity f, MayHaveUnit f, Concept f, Eq f, Quantity h, MayHaveUnit h, Quantity i, MayHaveUnit i, HasUID j, Constrained j) => a -> b -> [c] -> Purpose -> Background -> [e] -> [f] -> [InstanceModel] -> [DataDefinition] -> [String] -> [h] -> [i] -> [Block SimpleQDef] -> [j] -> [ConstQDef] -> ChunkDB -> ChunkDB -> ReferenceDB -> SystemInformation

-- | for listing <a>QDefinition</a>s in <a>SystemInformation</a>.
data Block a
Parallel :: a -> [a] -> Block a
sysinfodb :: Lens' SystemInformation ChunkDB

-- | Database for internal references. Contains citations and referrable
--   concepts.
data ReferenceDB

-- | Database for maintaining references. The Int is that reference's
--   number. Maintains access to both num and chunk for easy reference
--   swapping between number and shortname/refname when necessary (or use
--   of number if no shortname exists).
type RefMap a = Map UID (a, Int)

-- | Project Example purpose.
type Purpose = [Sentence]

-- | Project Example background information, used in the <tt>What</tt>
--   section of README.
type Background = [Sentence]

-- | Helper for extracting a bibliography from the system information.
citeDB :: SystemInformation -> BibRef

-- | Smart constructor for creating a reference database from a
--   bibliography and concept instances.
rdb :: BibRef -> [ConceptInstance] -> ReferenceDB

-- | Constructor that makes a <a>RefMap</a> from things that have a
--   <a>UID</a>.
simpleMap :: HasUID a => [a] -> RefMap a
citationDB :: Lens' ReferenceDB BibMap
conceptDB :: Lens' ReferenceDB ConceptMap

-- | Gets a list of defined quantities (<a>DefinedQuantityDict</a>s) from
--   <a>Sentence</a>s and expressions that are contained in the database
--   (<a>ChunkDB</a>).
ccss :: [Sentence] -> [ModelExpr] -> ChunkDB -> [DefinedQuantityDict]

-- | Gets a list of quantities (<a>QuantityDict</a>s) from <a>Sentence</a>s
--   and expressions that are contained in the database (<a>ChunkDB</a>).
ccss' :: [Sentence] -> [ModelExpr] -> ChunkDB -> [QuantityDict]

-- | Combines the functions of <a>vars</a> and <a>concpt</a> to create a
--   list of <a>DefinedQuantityDict</a>s from a <a>Sentence</a>.
combine :: Sentence -> ChunkDB -> [DefinedQuantityDict]

-- | Gets a list of ideas (<a>IdeaDict</a>) from a <a>Sentence</a> in order
--   to print.
getIdeaDict :: Sentence -> ChunkDB -> [IdeaDict]

-- | Gets a list of quantities (<a>QuantityDict</a>) from an equation in
--   order to print.
vars :: ModelExpr -> ChunkDB -> [QuantityDict]
