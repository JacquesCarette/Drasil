digraph allvsall {
	alpha_i -> assumpSBSBISL;
	beta_i -> assumpSBSBISL;
	l_bi -> alpha_i;
	l_bi -> b_i;
	l_si -> beta_i;
	l_si -> b_i;
	h_i -> assumpSBSBISL;
	h_i -> hR;
	h_i -> hL;
	Phi -> alpha_i;
	Phi -> f_i;
	Psi -> alpha_i;
	Psi -> f_i;
	Psi -> Phi;
	equilibriumCS:theory -> assumpENSL;
	mcShrSrgth -> assumpSBSBISL;
	effectiveStressTM -> sigma;
	normForcEq:theory -> alpha_i;
	normForcEq:theory -> beta_i;
	normForcEq:theory -> equilibriumCS:theory;
	normForcEq:theory -> sliceWght:theory;
	normForcEq:theory -> srfWtrF:theory;
	bsShrFEq:theory -> alpha_i;
	bsShrFEq:theory -> beta_i;
	bsShrFEq:theory -> equilibriumCS:theory;
	bsShrFEq:theory -> sliceWght:theory;
	bsShrFEq:theory -> srfWtrF:theory;
	resShr:theory -> assumpSLH;
	resShr:theory -> assumpSP;
	resShr:theory -> assumpSLI;
	resShr:theory -> assumpPSC;
	resShr:theory -> l_bi;
	resShr:theory -> sigma;
	resShr:theory -> tau;
	resShr:theory -> mcShrSrgth;
	mobShr:theory -> assumpFOS;
	mobShr:theory -> l_bi;
	mobShr:theory -> factOfSafetyTM;
	mobShr:theory -> resShr:theory;
	effNormF:theory -> assumpPSC;
	effNormF:theory -> sigma;
	effNormF:theory -> effectiveStressTM;
	effNormF:theory -> baseWtrF:theory;
	resShearWO:theory -> H_i;
	resShearWO:theory -> alpha_i;
	resShearWO:theory -> beta_i;
	resShearWO:theory -> l_bi;
	resShearWO:theory -> sliceWght:theory;
	resShearWO:theory -> baseWtrF:theory;
	resShearWO:theory -> srfWtrF:theory;
	mobShearWO:theory -> H_i;
	mobShearWO:theory -> alpha_i;
	mobShearWO:theory -> beta_i;
	mobShearWO:theory -> sliceWght:theory;
	mobShearWO:theory -> srfWtrF:theory;
	X_i:theory -> assumpINSFL;
	X_i:theory -> f_i;
	momentEql:theory -> assumpNESSS;
	momentEql:theory -> assumpHFSM;
	momentEql:theory -> alpha_i;
	momentEql:theory -> beta_i;
	momentEql:theory -> b_i;
	momentEql:theory -> h_i;
	momentEql:theory -> torque;
	momentEql:theory -> equilibriumCS:theory;
	momentEql:theory -> weight:theory;
	momentEql:theory -> sliceWght:theory;
	momentEql:theory -> srfWtrF:theory;
	weight:theory -> newtonSL;
	sliceWght:theory -> assumpSLH;
	sliceWght:theory -> assumpPSC;
	sliceWght:theory -> assumpSBSBISL;
	sliceWght:theory -> assumpWIBE;
	sliceWght:theory -> assumpWISE;
	sliceWght:theory -> b_i;
	sliceWght:theory -> weight:theory;
	baseWtrF:theory -> assumpPSC;
	baseWtrF:theory -> assumpSBSBISL;
	baseWtrF:theory -> assumpWIBE;
	baseWtrF:theory -> assumpHFSM;
	baseWtrF:theory -> l_bi;
	baseWtrF:theory -> pressure:theory;
	baseWtrF:theory -> baseWtrF:theory;
	srfWtrF:theory -> assumpPSC;
	srfWtrF:theory -> assumpSBSBISL;
	srfWtrF:theory -> assumpWISE;
	srfWtrF:theory -> assumpHFSM;
	srfWtrF:theory -> l_si;
	srfWtrF:theory -> pressure:theory;
	srfWtrF:theory -> srfWtrF:theory;
	FS:theory -> assumpINSFL;
	FS:theory -> assumpES;
	FS:theory -> assumpSF;
	FS:theory -> assumpSL;
	FS:theory -> Phi;
	FS:theory -> Psi;
	FS:theory -> normForcEq:theory;
	FS:theory -> bsShrFEq:theory;
	FS:theory -> mobShr:theory;
	FS:theory -> resShearWO:theory;
	FS:theory -> mobShearWO:theory;
	FS:theory -> X_i:theory;
	FS:theory -> FS:theory;
	FS:theory -> nrmShrForIM;
	FS:theory -> intsliceFsRC:theory;
	nrmShrForIM -> assumpINSFL;
	nrmShrForIM -> assumpES;
	nrmShrForIM -> assumpSF;
	nrmShrForIM -> assumpSL;
	nrmShrForIM -> X_i:theory;
	nrmShrForIM -> momentEql:theory;
	nrmShrForIM -> FS:theory;
	nrmShrForIM -> nrmShrForIM;
	nrmShrForIM -> nrmShrForNumRC:theory;
	nrmShrForIM -> nrmShrForDenRC:theory;
	nrmShrForIM -> intsliceFsRC:theory;
	nrmShrForNumRC:theory -> H_i;
	nrmShrForNumRC:theory -> alpha_i;
	nrmShrForNumRC:theory -> beta_i;
	nrmShrForNumRC:theory -> b_i;
	nrmShrForNumRC:theory -> h_i;
	nrmShrForNumRC:theory -> srfWtrF:theory;
	nrmShrForNumRC:theory -> nrmShrForIM;
	nrmShrForDenRC:theory -> b_i;
	nrmShrForDenRC:theory -> f_i;
	nrmShrForDenRC:theory -> nrmShrForIM;
	intsliceFsRC:theory -> assumpES;
	intsliceFsRC:theory -> Phi;
	intsliceFsRC:theory -> Psi;
	intsliceFsRC:theory -> resShearWO:theory;
	intsliceFsRC:theory -> mobShearWO:theory;
	intsliceFsRC:theory -> FS:theory;
	intsliceFsRC:theory -> nrmShrForIM;
	intsliceFsRC:theory -> intsliceFsRC:theory;
	crtSlpIdIM:theory -> assumpSSC;
	determineCritSlip -> FS:theory;
	determineCritSlip -> nrmShrForIM;
	determineCritSlip -> intsliceFsRC:theory;
	determineCritSlip -> crtSlpIdIM:theory;
	displayGraph -> crtSlpIdIM:theory;
	displayFS -> FS:theory;
	displayFS -> nrmShrForIM;
	displayFS -> intsliceFsRC:theory;
	displayNormal -> FS:theory;
	displayNormal -> nrmShrForIM;
	displayNormal -> intsliceFsRC:theory;
	displayShear -> FS:theory;
	displayShear -> nrmShrForIM;
	displayShear -> intsliceFsRC:theory;
	writeToFile -> displayInput;
	writeToFile -> displayGraph;
	writeToFile -> displayFS;
	writeToFile -> displayNormal;
	writeToFile -> displayShear;
	LC_inhomogeneous -> assumpSLH;
	LC_seismic -> assumpSF;
	LC_external -> assumpSL;
	UC_normshearlinear -> assumpINSFL;
	UC_2donly -> assumpENSL;


	assumpSSC	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSSC"];
	assumpFOS	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpFOS"];
	assumpSLH	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSLH"];
	assumpSP	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSP"];
	assumpSLI	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSLI"];
	assumpINSFL	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpINSFL"];
	assumpPSC	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpPSC"];
	assumpENSL	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpENSL"];
	assumpSBSBISL	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSBSBISL"];
	assumpES	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpES"];
	assumpSF	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSF"];
	assumpSL	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSL"];
	assumpWIBE	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpWIBE"];
	assumpWISE	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpWISE"];
	assumpNESSS	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpNESSS"];
	assumpHFSM	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpHFSM"];

	subgraph A {
	rank="same"
	{assumpSSC, assumpFOS, assumpSLH, assumpSP, assumpSLI, assumpINSFL, assumpPSC, assumpENSL, assumpSBSBISL, assumpES, assumpSF, assumpSL, assumpWIBE, assumpWISE, assumpNESSS, assumpHFSM}
	}

	H_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:intersliceWtrF"];
	alpha_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:angleA"];
	beta_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:angleB"];
	b_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:lengthB"];
	l_bi	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:lengthLb"];
	l_si	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:lengthLs"];
	h_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:slcHeight"];
	sigma	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:normStress"];
	tau	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:tangStress"];
	torque	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:torque"];
	f_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:ratioVariation"];
	Phi	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:convertFunc1"];
	Psi	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:convertFunc2"];
	F_xG	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:nrmForceSumDD"];
	F_xH	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:watForceSumDD"];
	hR	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:sliceHghtRightDD"];
	hL	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:sliceHghtLeftDD"];

	subgraph DD {
	rank="same"
	{H_i, alpha_i, beta_i, b_i, l_bi, l_si, h_i, sigma, tau, torque, f_i, Phi, Psi, F_xG, F_xH, hR, hL}
	}

	factOfSafetyTM	[shape=box, color=black, style=filled, fillcolor=pink, label="TM:factOfSafety"];
	equilibriumCS:theory	[shape=box, color=black, style=filled, fillcolor=pink, label="TM:equilibrium"];
	mcShrSrgth	[shape=box, color=black, style=filled, fillcolor=pink, label="TM:mcShrStrgth"];
	effectiveStressTM	[shape=box, color=black, style=filled, fillcolor=pink, label="TM:effStress"];
	newtonSL	[shape=box, color=black, style=filled, fillcolor=pink, label="TM:NewtonSecLawMot"];

	subgraph TM {
	rank="same"
	{factOfSafetyTM, equilibriumCS:theory, mcShrSrgth, effectiveStressTM, newtonSL}
	}

	normForcEq:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:normForcEq"];
	bsShrFEq:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:bsShrFEq"];
	resShr:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:resShr"];
	mobShr:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:mobShr"];
	effNormF:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:effNormF"];
	resShearWO:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:resShearWO"];
	mobShearWO:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:mobShearWO"];
	X_i:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:normShrR"];
	momentEql:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:momentEql"];
	weight:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:weight"];
	sliceWght:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:sliceWght"];
	pressure:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:hsPressure"];
	baseWtrF:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:baseWtrF"];
	srfWtrF:theory	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:srfWtrF"];

	subgraph GD {
	rank="same"
	{normForcEq:theory, bsShrFEq:theory, resShr:theory, mobShr:theory, effNormF:theory, resShearWO:theory, mobShearWO:theory, X_i:theory, momentEql:theory, weight:theory, sliceWght:theory, pressure:theory, baseWtrF:theory, srfWtrF:theory}
	}

	FS:theory	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:fctSfty"];
	nrmShrForIM	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:nrmShrFor"];
	nrmShrForNumRC:theory	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:nrmShrForNum"];
	nrmShrForDenRC:theory	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:nrmShrForDen"];
	intsliceFsRC:theory	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:intsliceFs"];
	crtSlpIdIM:theory	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:crtSlpId"];

	subgraph IM {
	rank="same"
	{FS:theory, nrmShrForIM, nrmShrForNumRC:theory, nrmShrForDenRC:theory, intsliceFsRC:theory, crtSlpIdIM:theory}
	}

	readAndStore	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:readAndStore"];
	verifyInput	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:verifyInput"];
	determineCritSlip	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:determineCritSlip"];
	verifyOutput	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:verifyOutput"];
	displayInput	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:displayInput"];
	displayGraph	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:displayGraph"];
	displayFS	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:displayFS"];
	displayNormal	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:displayNormal"];
	displayShear	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:displayShear"];
	writeToFile	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:writeToFile"];
	correct	[shape=box, color=black, style=filled, fillcolor=ivory, label="NFR:correct"];
	understandable	[shape=box, color=black, style=filled, fillcolor=ivory, label="NFR:understandable"];
	reusable	[shape=box, color=black, style=filled, fillcolor=ivory, label="NFR:reusable"];
	maintainable	[shape=box, color=black, style=filled, fillcolor=ivory, label="NFR:maintainable"];

	subgraph FR {
	rank="same"
	{readAndStore, verifyInput, determineCritSlip, verifyOutput, displayInput, displayGraph, displayFS, displayNormal, displayShear, writeToFile, correct, understandable, reusable, maintainable}
	}

	identifyCritAndFS	[shape=box, color=black, style=filled, fillcolor=darkgoldenrod1, label="GS:identifyCritAndFS"];
	determineNormalF	[shape=box, color=black, style=filled, fillcolor=darkgoldenrod1, label="GS:determineNormalF"];
	determineShearF	[shape=box, color=black, style=filled, fillcolor=darkgoldenrod1, label="GS:determineShearF"];

	subgraph GS {
	rank="same"
	{identifyCritAndFS, determineNormalF, determineShearF}
	}

	LC_inhomogeneous	[shape=box, color=black, style=filled, fillcolor=lavender, label="LC:LC_inhomogeneous"];
	LC_seismic	[shape=box, color=black, style=filled, fillcolor=lavender, label="LC:LC_seismic"];
	LC_external	[shape=box, color=black, style=filled, fillcolor=lavender, label="LC:LC_external"];
	UC_normshearlinear	[shape=box, color=black, style=filled, fillcolor=lavender, label="UC:UC_normshearlinear"];
	UC_2donly	[shape=box, color=black, style=filled, fillcolor=lavender, label="UC:UC_2donly"];

	subgraph LC {
	rank="same"
	{LC_inhomogeneous, LC_seismic, LC_external, UC_normshearlinear, UC_2donly}
	}

}
