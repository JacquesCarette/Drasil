/** main.swift
    Advent of Code Day 1
    - Authors: Brandon Bosman
    - Note: Generated by Drasil v0.1-alpha
*/

import Foundation

extension String: Error {}

/** Converts a string to integer
    - Parameter str: String to be converted
    - Returns: Integer value of the string
*/
func strToInt(_ str: [Character]) throws -> Int {
    var val: Int = 0
    for i in [Int](stride(from: 0, to: str.count, by: 1)) {
        var digit: Int
        switch str[i] {
            case "0":
                digit = 0
            case "1":
                digit = 1
            case "2":
                digit = 2
            case "3":
                digit = 3
            case "4":
                digit = 4
            case "5":
                digit = 5
            case "6":
                digit = 6
            case "7":
                digit = 7
            case "8":
                digit = 8
            case "9":
                digit = 9
            case " ":
                continue
            case "\n":
                continue
            default:
                throw "Non-integer string given"
        };
        val = 10 * val + digit
    }
    return val
}

/** Sorts a list of integers
    - Parameter xs: List to be sorted
*/
func selectionSort(_ xs: [Int]) -> Void {
    for i in [Int](stride(from: 0, to: xs.count - 1, by: 1)) {
        var maxIdx: Int = i
        for j in [Int](stride(from: i + 1, to: xs.count, by: 1)) {
            if xs[j] < xs[maxIdx] {
                maxIdx = j
            }
        }
        var temp: Int = xs[i]
        xs[i] = xs[maxIdx]
        xs[maxIdx] = temp
    }
}

// Get input
var filePath: String = "../../../../drasil-code/test/input.txt"
var fileHandle: URL
var fileContents: [String]
fileHandle = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.appendingPathComponent(filePath)
var goolContents: [[String]]
do {
    goolContents = try String(contentsOf: fileHandle).components(separatedBy: "\n").map({(l: String) -> [String] in l.components(separatedBy: " ")})
} catch {
    throw "Error reading from file."
}
goolContents = [Int](stride(from: 1, to: goolContents.count, by: 1)).map({(i: Int) -> [String] in goolContents[i]})
fileContents = goolContents.map({(l: [String]) -> String in l.joined(separator: " ")})

// Process input
var list1: [Int] = []
var list2: [Int] = []
for line in fileContents {
    var splitLine: [String]
    splitLine = line.components(separatedBy: " ")
    list1.append(try strToInt(splitLine[0]))
    list2.append(try strToInt(splitLine[3]))
}
selectionSort(list1)
selectionSort(list2)

// Calculate distance and print out
var distance: Int = 0
for i in [Int](stride(from: 0, to: list1.count, by: 1)) {
    var partDistance: Int = list1[i] - list2[i]
    if partDistance < 0 {
        partDistance = -partDistance
    }
    distance += partDistance;
}
print("Distance: ", terminator: "")
print(distance)
