-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Printers SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-printers
@version 0.1.10.0

module Language.Drasil.Printers

-- | Document types include Software Requirements Specification and
--   Website. Choosing SRS will generate both TeX and HTML files, while
--   Website generates only as HTML. This also determines what folders the
--   generated files will be placed into.
data DocType
SRS :: DocType
Website :: DocType
Lesson :: DocType

-- | Possible formats for printer output.
data Format
TeX :: Format
HTML :: Format
Jupyter :: Format

-- | Holds all important and relevant information for generating a
--   traceability graph. Includes nodes, graph edges, and node family
--   information.
data GraphInfo
GI :: NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> NodeFamily -> [(UID, [UID])] -> [(UID, [UID])] -> [(UID, [UID])] -> [(UID, [UID])] -> [(UID, [UID])] -> GraphInfo

-- | Assumptions.
[assumpNF] :: GraphInfo -> NodeFamily

-- | Data definitions.
[ddNF] :: GraphInfo -> NodeFamily

-- | General definitions.
[gdNF] :: GraphInfo -> NodeFamily

-- | Theory models.
[tmNF] :: GraphInfo -> NodeFamily

-- | Instance models.
[imNF] :: GraphInfo -> NodeFamily

-- | Requirements (both functional and non-functional).
[reqNF] :: GraphInfo -> NodeFamily

-- | Goal statement.
[gsNF] :: GraphInfo -> NodeFamily

-- | Changes (both likely and unlikely).
[chgNF] :: GraphInfo -> NodeFamily

-- | Assumptions dependent on assumptions.
[edgesAvsA] :: GraphInfo -> [(UID, [UID])]

-- | Definitions, models, requirements, and changes dependent on
--   assumptions.
[edgesAvsAll] :: GraphInfo -> [(UID, [UID])]

-- | Definitions and models that are dependent on other definitions and
--   models.
[edgesRefvsRef] :: GraphInfo -> [(UID, [UID])]

-- | Goals and requirements dependent on definitions, models, and other
--   requirements.
[edgesAllvsR] :: GraphInfo -> [(UID, [UID])]

-- | Definitions, models, requirements, goals, and changes that are
--   dependent on one another.
[edgesAllvsAll] :: GraphInfo -> [(UID, [UID])]

-- | A node family contains a list of <a>UID</a>s, their display labels,
--   general subgraph label, and colour.
data NodeFamily
NF :: [UID] -> [Label] -> Label -> Colour -> NodeFamily

-- | Node <a>UID</a>s.
[nodeUIDs] :: NodeFamily -> [UID]

-- | Display labels for nodes. We use the reference addresses from the
--   <a>UID</a>s.
[nodeLabels] :: NodeFamily -> [Label]

-- | Individual subgraph labels. These labels do not show on the final
--   generated pdf or png files.
[nfLabel] :: NodeFamily -> Label

-- | Gives the ability to change colours of bubbles within the graph.
[nfColour] :: NodeFamily -> Colour

-- | Creates the directory for output, gathers all individual graph output
--   functions and calls them.
outputDot :: FilePath -> GraphInfo -> IO ()

-- | Generate an HTML document from a Drasil <a>Document</a>.
genHTML :: PrintingInformation -> String -> Document -> Doc

-- | Generates the CSS selectors necessary for a document.
makeCSS :: Document -> Doc

-- | Combines a list of sentences into a final Doc, also appends end note.
makeMd :: [Doc] -> Doc

-- | Example title, authors, and maybe purpose section.
introInfo :: String -> [String] -> Maybe String -> Doc

-- | Language version section.
verInfo :: String -> String -> Doc

-- | Invalid Operating Systems section, does not display unless atleast 1
--   invalid OS.
unsupOS :: Maybe String -> Doc

-- | Constructs regular section section from header and message.
regularSec :: Doc -> Doc -> Doc

-- | Instruction section, contains 4 paragraphs, Running, Building,
--   Input-Output and Config Files. The Config file section is only
--   displayed if there are configuration files.
instDoc :: [String] -> String -> (String, String) -> Doc

-- | External Libraries section. The inputs are a list of name and version
--   pairs and a list of the corresponding version numbers, these are first
--   combined into a list of triplets, and then each printed on a new line.
extLibSec :: [(String, String)] -> [String] -> Doc

-- | End section.
endNote :: Int -> [String] -> Doc

-- | <tt>What</tt> section in generated README file, does not display if
--   empty
whatInfo :: Maybe String -> Doc

-- | Data is either linear or not.
data SingleLine
OneLine :: SingleLine
MultiLine :: SingleLine

-- | Create sentences for a document in <a>Doc</a> format.
sentenceDoc :: ChunkDB -> Stage -> SingleLine -> Sentence -> Doc

-- | Create expressions for a document in <a>Doc</a> format.
exprDoc :: ChunkDB -> Stage -> SingleLine -> Expr -> Doc

-- | Create code expressions for a document in <a>Doc</a> format.
codeExprDoc :: ChunkDB -> Stage -> SingleLine -> CodeExpr -> Doc

-- | Create symbols for a document in <a>Doc</a> format.
symbolDoc :: Symbol -> Doc

-- | Helper for printing units in <a>Doc</a> format.
unitDoc :: SingleLine -> USymb -> Doc

-- | Helper for printing Symbols
showSymb :: Symbol -> String

-- | Helper for printing a HasSymbol in Implementation Stage
showHasSymbImpl :: HasSymbol x => x -> String

-- | Generates a LaTeX document.
genTeX :: Document -> PrintingInformation -> Doc

-- | Generate a python notebook document (using json). build : build the
--   SRS document in JSON format build': build the general Jupyter Notbook
--   document
genJupyter :: PrintingInformation -> DocType -> Document -> Doc

-- | Gathers all printing functions and creates the debugging tables from
--   them.
printAllDebugInfo :: PrintingInformation -> [Doc]

-- | Printing information contains a database, a stage, and a printing
--   configuration.
data PrintingInformation
PI :: ChunkDB -> Stage -> PrintingConfiguration -> PrintingInformation
[_ckdb] :: PrintingInformation -> ChunkDB
[_stg] :: PrintingInformation -> Stage
[_configuration] :: PrintingInformation -> PrintingConfiguration

-- | Builds a document's printing information based on the system
--   information.
piSys :: SystemInformation -> Stage -> PrintingConfiguration -> PrintingInformation

-- | Able to be printed.
class HasPrintingOptions c

-- | Holds the printing notation.
getSetting :: HasPrintingOptions c => Lens' c Notation

-- | Notation can be scientific or for engineering.
data Notation
Scientific :: Notation
Engineering :: Notation

-- | Default configuration is for engineering.
defaultConfiguration :: PrintingConfiguration
