-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Theory SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-theory
@version 0.1.0.0


-- | Theory related Drasil concepts, used across Drasil.
module Data.Drasil.TheoryConcepts

-- | Data definition.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
dataDefn :: CI

-- | General definition.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
genDefn :: CI

-- | Instance model.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
inModel :: CI

-- | Theoretical model.
--   
--   These are internal-to-Drasil common ideas, and need to be defined at
--   the same time as theories.
thModel :: CI


-- | Defining all the classes which represent knowledge-about-theories.
module Theory.Drasil.Classes

-- | Members of this class may have inputs.
class HasInputs c

-- | Provides a <tt>Lens</tt> that holds a <a>QuantityDict</a> and maybe
--   constraints.
inputs :: HasInputs c => Lens' c [(QuantityDict, Maybe (RealInterval Expr Expr))]

-- | Members of this class may have outputs.
class HasOutput c

-- | Provides a <a>Getter</a> that holds a <a>QuantityDict</a> for output.
output :: HasOutput c => Getter c QuantityDict

-- | Provides a <a>Getter</a> that holds constraints on the output.
out_constraints :: HasOutput c => Getter c [RealInterval Expr Expr]


-- | Defines types used in models and theories.
module Theory.Drasil.ConstraintSet

-- | <a>ConstraintSet</a>s are sets of invariants that always hold for
--   underlying domains.
data ConstraintSet e

-- | Smart constructor for building ConstraintSets
mkConstraintSet :: ConceptChunk -> NonEmpty e -> ConstraintSet e
instance Language.Drasil.UID.HasUID (Theory.Drasil.ConstraintSet.ConstraintSet e)
instance Language.Drasil.Chunk.NamedIdea.NamedIdea (Theory.Drasil.ConstraintSet.ConstraintSet e)
instance Language.Drasil.Chunk.NamedIdea.Idea (Theory.Drasil.ConstraintSet.ConstraintSet e)
instance Language.Drasil.Classes.Definition (Theory.Drasil.ConstraintSet.ConstraintSet e)
instance Language.Drasil.Classes.ConceptDomain (Theory.Drasil.ConstraintSet.ConstraintSet e)
instance Language.Drasil.ExprClasses.Express e => Language.Drasil.ExprClasses.Express (Theory.Drasil.ConstraintSet.ConstraintSet e)
instance Language.Drasil.WellTyped.RequiresChecking (Theory.Drasil.ConstraintSet.ConstraintSet Language.Drasil.Expr.Lang.Expr) Language.Drasil.Expr.Lang.Expr Language.Drasil.Space.Space


-- | Defines types and functions for Data Definitions.
module Theory.Drasil.DataDefinition

-- | A scope is an indirect reference to a <a>UID</a>.
newtype Scope
Scp :: UID -> Scope
[_spec] :: Scope -> UID

-- | Determines the scope of data.
data ScopeType

-- | Only visible within a limited scope.
Local :: Scope -> ScopeType

-- | Visible everywhere.
Global :: ScopeType
data DDPkt
DDPkt :: ScopeType -> [DecRef] -> Maybe Derivation -> ShortName -> String -> [Sentence] -> DDPkt
[_pktST] :: DDPkt -> ScopeType
[_pktDR] :: DDPkt -> [DecRef]
[_pktMD] :: DDPkt -> Maybe Derivation
[_pktSN] :: DDPkt -> ShortName
[_pktS] :: DDPkt -> String
[_pktSS] :: DDPkt -> [Sentence]
pktST :: Lens' DDPkt ScopeType
pktSS :: Lens' DDPkt [Sentence]
pktSN :: Lens' DDPkt ShortName
pktS :: Lens' DDPkt String
pktMD :: Lens' DDPkt (Maybe Derivation)
pktDR :: Lens' DDPkt [DecRef]

-- | A data definition is a <a>QDefinition</a> that may have additional
--   notes: the scope, any references (as <a>DecRef</a>s), maybe a
--   derivation, a label (<a>ShortName</a>), a reference address, and other
--   notes (<a>Sentence</a>s).
data DataDefinition
[DDE] :: SimpleQDef -> DDPkt -> DataDefinition
[DDME] :: ModelQDef -> DDPkt -> DataDefinition
ddQD :: Lens' SimpleQDef a -> Lens' ModelQDef a -> Lens' DataDefinition a
ddQDGetter :: (Profunctor p, Contravariant f) => Getter SimpleQDef a -> Getter ModelQDef a -> Optic' p f DataDefinition a
ddPkt :: Lens' DDPkt a -> Lens' DataDefinition a

-- | Smart constructor for data definitions.
ddE :: SimpleQDef -> [DecRef] -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions with no references.
ddENoRefs :: SimpleQDef -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions.
ddME :: ModelQDef -> [DecRef] -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions with no references.
ddMENoRefs :: ModelQDef -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Extracts the 'QDefinition e' from a <a>DataDefinition</a>.
qdFromDD :: DataDefinition -> Either SimpleQDef ModelQDef
qdEFromDD :: DataDefinition -> Maybe SimpleQDef
instance Language.Drasil.UID.HasUID Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Chunk.NamedIdea.NamedIdea Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Chunk.NamedIdea.Idea Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Chunk.Quantity.DefinesQuantity Theory.Drasil.DataDefinition.DataDefinition
instance Theory.Drasil.Classes.HasOutput Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.ExprClasses.Express Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.DecoratedReference.HasDecRef Theory.Drasil.DataDefinition.DataDefinition
instance GHC.Classes.Eq Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Derivation.MayHaveDerivation Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.ShortName.HasShortName Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Label.Type.HasRefAddress Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.Label.Type.Referable Theory.Drasil.DataDefinition.DataDefinition
instance Language.Drasil.WellTyped.RequiresChecking Theory.Drasil.DataDefinition.DataDefinition Language.Drasil.Expr.Lang.Expr Language.Drasil.Space.Space


-- | Defines types and functions for creating mult-definitions.
module Theory.Drasil.MultiDefn

-- | <a>MultiDefn</a>s are QDefinition factories, used for showing one or
--   more ways we can define a QDefinition.
data MultiDefn e

-- | <a>DefiningExpr</a> are the data that make up a (quantity) definition,
--   namely the description, the defining (rhs) expression and the context
--   domain(s). These are meant to be <tt>alternate</tt> but equivalent
--   definitions for a single concept.
data DefiningExpr e

-- | Smart constructor for MultiDefns, does nothing special at the moment.
--   First argument is the <a>Space</a> to become a <a>UID</a>.
mkMultiDefn :: String -> QuantityDict -> Sentence -> NonEmpty (DefiningExpr e) -> MultiDefn e

-- | Smart constructor for <a>MultiDefn</a>s defining <a>UID</a>s using
--   that of the <a>QuantityDict</a>.
mkMultiDefnForQuant :: QuantityDict -> Sentence -> NonEmpty (DefiningExpr e) -> MultiDefn e

-- | Smart constructor for <a>DefiningExpr</a>s.
mkDefiningExpr :: String -> [UID] -> Sentence -> e -> DefiningExpr e

-- | Convert <a>MultiDefn</a>s into <a>QDefinition</a>s via a specific
--   <a>DefiningExpr</a>.
multiDefnGenQD :: MultiDefn e -> DefiningExpr e -> QDefinition e

-- | Convert <a>MultiDefn</a>s into <a>QDefinition</a>s via a specific
--   <a>DefiningExpr</a> (by <a>UID</a>).
multiDefnGenQDByUID :: MultiDefn e -> UID -> QDefinition e
instance Language.Drasil.UID.HasUID (Theory.Drasil.MultiDefn.MultiDefn e)
instance Language.Drasil.Symbol.HasSymbol (Theory.Drasil.MultiDefn.MultiDefn e)
instance Language.Drasil.Chunk.NamedIdea.NamedIdea (Theory.Drasil.MultiDefn.MultiDefn e)
instance Language.Drasil.Chunk.NamedIdea.Idea (Theory.Drasil.MultiDefn.MultiDefn e)
instance Language.Drasil.Space.HasSpace (Theory.Drasil.MultiDefn.MultiDefn e)
instance Language.Drasil.Classes.Definition (Theory.Drasil.MultiDefn.MultiDefn e)
instance Language.Drasil.Classes.Quantity (Theory.Drasil.MultiDefn.MultiDefn e)
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit (Theory.Drasil.MultiDefn.MultiDefn e)
instance Language.Drasil.Classes.ConceptDomain (Theory.Drasil.MultiDefn.MultiDefn e)
instance Language.Drasil.WellTyped.RequiresChecking (Theory.Drasil.MultiDefn.MultiDefn Language.Drasil.Expr.Lang.Expr) Language.Drasil.Expr.Lang.Expr Language.Drasil.Space.Space
instance Language.Drasil.ExprClasses.Express e => Language.Drasil.ExprClasses.Express (Theory.Drasil.MultiDefn.MultiDefn e)
instance GHC.Classes.Eq (Theory.Drasil.MultiDefn.DefiningExpr e)
instance Language.Drasil.UID.HasUID (Theory.Drasil.MultiDefn.DefiningExpr e)
instance Language.Drasil.Classes.ConceptDomain (Theory.Drasil.MultiDefn.DefiningExpr e)
instance Language.Drasil.Classes.Definition (Theory.Drasil.MultiDefn.DefiningExpr e)


-- | Defines types and functions for creating models.
module Theory.Drasil.ModelKinds

-- | <a>ModelKinds</a> carrier, used to carry commonly overwritten
--   information from the IMs<i>TMs</i>GDs.
data ModelKind e
MK :: ModelKinds e -> UID -> NP -> ModelKind e
[_mk] :: ModelKind e -> ModelKinds e
[_mkUID] :: ModelKind e -> UID
[_mkTerm] :: ModelKind e -> NP

-- | Models can be of different kinds:
--   
--   <ul>
--   <li><a>NewDEModel</a>s represent differential equations as
--   <a>DifferentialModel</a>s</li>
--   <li><a>DEModel</a>s represent differential equations as
--   <a>RelationConcept</a>s</li>
--   <li><tt>EquationalConstraint</tt>s represent invariants that will hold
--   in a system of equations.</li>
--   <li><a>EquationalModel</a>s represent quantities that are calculated
--   via a single definition/<a>QDefinition</a>.</li>
--   <li><a>EquationalRealm</a>s represent MultiDefns; quantities that may
--   be calculated using any one of many <a>DefiningExpr</a>s (e.g., 'x = A
--   = ... = Z')</li>
--   <li><tt>FunctionalModel</tt>s represent quantity-resulting function
--   definitions.</li>
--   <li><a>OthModel</a>s are placeholders for models. No new
--   <a>OthModel</a>s should be created, they should be using one of the
--   other kinds.</li>
--   </ul>
data ModelKinds e
[NewDEModel] :: DifferentialModel -> ModelKinds e
[DEModel] :: RelationConcept -> ModelKinds e
[EquationalConstraints] :: ConstraintSet e -> ModelKinds e
[EquationalModel] :: QDefinition e -> ModelKinds e
[EquationalRealm] :: MultiDefn e -> ModelKinds e
[OthModel] :: RelationConcept -> ModelKinds e

-- | Smart constructor for <a>NewDEModel</a>s
newDEModel :: String -> NP -> DifferentialModel -> ModelKind e

-- | Smart constructor for <a>DEModel</a>s
deModel :: String -> NP -> RelationConcept -> ModelKind e

-- | Smart constructor for <a>EquationalConstraints</a>
equationalConstraints :: String -> NP -> ConstraintSet e -> ModelKind e

-- | Smart constructor for <a>EquationalModel</a>s
equationalModel :: String -> NP -> QDefinition e -> ModelKind e

-- | Smart constructor for <a>EquationalRealm</a>s
equationalRealm :: String -> NP -> MultiDefn e -> ModelKind e

-- | Smart constructor for <a>OthModel</a>s
othModel :: String -> NP -> RelationConcept -> ModelKind Expr

-- | Smart constructor for <a>NewDEModel</a>s, deriving UID+Term from the
--   <a>DifferentialModel</a>
newDEModel' :: DifferentialModel -> ModelKind e

-- | Smart constructor for <a>DEModel</a>s, deriving UID+Term from the
--   <a>RelationConcept</a>
deModel' :: RelationConcept -> ModelKind e

-- | Smart constructor for <a>EquationalConstraints</a>, deriving UID+Term
--   from the <a>ConstraintSet</a>
equationalConstraints' :: ConstraintSet e -> ModelKind e

-- | Smart constructor for <a>EquationalModel</a>s, deriving UID+Term from
--   the <a>QDefinition</a>
equationalModel' :: QDefinition e -> ModelKind e

-- | Smart constructor for <a>EquationalRealm</a>s, deriving UID+Term from
--   the <a>MultiDefn</a>
equationalRealm' :: MultiDefn e -> ModelKind e

-- | Smart constructor for <a>OthModel</a>s, deriving UID+Term from the
--   <a>RelationConcept</a>
othModel' :: RelationConcept -> ModelKind e

-- | Smart constructor for <a>EquationalModel</a>s, deriving Term from the
--   <a>QDefinition</a>
equationalModelU :: String -> QDefinition e -> ModelKind e

-- | Smart constructor for <a>EquationalModel</a>s, deriving UID from the
--   <a>QDefinition</a>
equationalModelN :: NP -> QDefinition e -> ModelKind e

-- | Smart constructor for <a>EquationalRealm</a>s
equationalRealmU :: String -> MultiDefn e -> ModelKind e

-- | Smart constructor for <a>EquationalRealm</a>s, deriving UID from the
--   <a>MultiDefn</a>
equationalRealmN :: NP -> MultiDefn e -> ModelKind e

-- | Map into internal representations of ModelKinds
setMk :: ModelKinds e -> Setter' DifferentialModel a -> Setter' RelationConcept a -> Setter' (ConstraintSet e) a -> Setter' (QDefinition e) a -> Setter' (MultiDefn e) a -> a -> ModelKinds e

-- | Retrieve internal data from ModelKinds
elimMk :: Getter DifferentialModel a -> Getter RelationConcept a -> Getter (ConstraintSet e) a -> Getter (QDefinition e) a -> Getter (MultiDefn e) a -> ModelKinds e -> a

-- | Make a <tt>Lens</tt> for <a>ModelKinds</a>.
lensMk :: forall e a. Lens' DifferentialModel a -> Lens' RelationConcept a -> Lens' (ConstraintSet e) a -> Lens' (QDefinition e) a -> Lens' (MultiDefn e) a -> Lens' (ModelKinds e) a

-- | Make a <a>Getter</a> for <a>ModelKinds</a>.
getterMk :: forall e a. Getter DifferentialModel a -> Getter RelationConcept a -> Getter (ConstraintSet e) a -> Getter (QDefinition e) a -> Getter (MultiDefn e) a -> Getter (ModelKinds e) a

-- | Extract a list of <a>QDefinition</a>s from a list of
--   <a>ModelKinds</a>.
getEqModQds :: [ModelKind e] -> [QDefinition e]
instance Language.Drasil.UID.HasUID (Theory.Drasil.ModelKinds.ModelKinds e)
instance Language.Drasil.Chunk.NamedIdea.NamedIdea (Theory.Drasil.ModelKinds.ModelKinds e)
instance Language.Drasil.Chunk.NamedIdea.Idea (Theory.Drasil.ModelKinds.ModelKinds e)
instance Language.Drasil.Classes.Definition (Theory.Drasil.ModelKinds.ModelKinds e)
instance Language.Drasil.Classes.ConceptDomain (Theory.Drasil.ModelKinds.ModelKinds e)
instance Language.Drasil.ExprClasses.Express e => Language.Drasil.ExprClasses.Express (Theory.Drasil.ModelKinds.ModelKinds e)
instance Language.Drasil.WellTyped.RequiresChecking (Theory.Drasil.ModelKinds.ModelKinds Language.Drasil.Expr.Lang.Expr) Language.Drasil.Expr.Lang.Expr Language.Drasil.Space.Space
instance Language.Drasil.UID.HasUID (Theory.Drasil.ModelKinds.ModelKind e)
instance Language.Drasil.Chunk.NamedIdea.NamedIdea (Theory.Drasil.ModelKinds.ModelKind e)
instance Language.Drasil.Chunk.NamedIdea.Idea (Theory.Drasil.ModelKinds.ModelKind e)
instance Language.Drasil.Classes.Definition (Theory.Drasil.ModelKinds.ModelKind e)
instance Language.Drasil.Classes.ConceptDomain (Theory.Drasil.ModelKinds.ModelKind e)
instance Language.Drasil.ExprClasses.Express e => Language.Drasil.ExprClasses.Express (Theory.Drasil.ModelKinds.ModelKind e)
instance Language.Drasil.WellTyped.RequiresChecking (Theory.Drasil.ModelKinds.ModelKind Language.Drasil.Expr.Lang.Expr) Language.Drasil.Expr.Lang.Expr Language.Drasil.Space.Space


-- | Defines types and functions for Instance Models.
module Theory.Drasil.InstanceModel

-- | An instance model is a ModelKind that may have specific inputs,
--   outputs, and output constraints. It also has attributes like
--   references, derivation, labels (<a>ShortName</a>), reference address,
--   and notes.
data InstanceModel

-- | Smart constructor for instance models with everything defined.
im :: ModelKind Expr -> Inputs -> Output -> OutputConstraints -> [DecRef] -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with a custom term, and no
--   derivation.
imNoDeriv :: ModelKind Expr -> Inputs -> Output -> OutputConstraints -> [DecRef] -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with a custom term, and no
--   references.
imNoRefs :: ModelKind Expr -> Inputs -> Output -> OutputConstraints -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with a custom term, and no
--   derivations or references.
imNoDerivNoRefs :: ModelKind Expr -> Inputs -> Output -> OutputConstraints -> String -> [Sentence] -> InstanceModel

-- | Grab all related <a>QDefinition</a>s from a list of instance models.
getEqModQdsFromIm :: [InstanceModel] -> [SimpleQDef]

-- | For building a quantity with no constraint.
qwUC :: (Quantity q, MayHaveUnit q) => q -> Input

-- | For building a quantity with a constraint.
qwC :: (Quantity q, MayHaveUnit q) => q -> RealInterval Expr Expr -> Input
instance Language.Drasil.UID.HasUID Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Chunk.NamedIdea.NamedIdea Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Chunk.NamedIdea.Idea Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.Definition Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.ExprClasses.Express Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Derivation.MayHaveDerivation Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.DecoratedReference.HasDecRef Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.ShortName.HasShortName Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Label.Type.HasRefAddress Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Label.Type.Referable Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.Chunk.Quantity.DefinesQuantity Theory.Drasil.InstanceModel.InstanceModel
instance Theory.Drasil.Classes.HasInputs Theory.Drasil.InstanceModel.InstanceModel
instance Theory.Drasil.Classes.HasOutput Theory.Drasil.InstanceModel.InstanceModel
instance Language.Drasil.WellTyped.RequiresChecking Theory.Drasil.InstanceModel.InstanceModel Language.Drasil.Expr.Lang.Expr Language.Drasil.Space.Space


-- | Defines types and functions for General Definitions.
module Theory.Drasil.GenDefn

-- | A general definition is a <a>ModelKind</a> that may have units, a
--   derivation, references (as <a>DecRef</a>s), a shortname, a reference
--   address, and notes.
data GenDefn

-- | Smart constructor for general definitions.
gd :: IsUnit u => ModelKind ModelExpr -> Maybe u -> Maybe Derivation -> [DecRef] -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions with no references.
gdNoRefs :: IsUnit u => ModelKind ModelExpr -> Maybe u -> Maybe Derivation -> String -> [Sentence] -> GenDefn

-- | Grab all related <tt>QDefinitions</tt> from a list of general
--   definitions.
getEqModQdsFromGd :: [GenDefn] -> [ModelQDef]
instance Language.Drasil.UID.HasUID Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Chunk.NamedIdea.NamedIdea Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Chunk.NamedIdea.Idea Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.Definition Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.ExprClasses.Express Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Derivation.MayHaveDerivation Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.DecoratedReference.HasDecRef Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.ShortName.HasShortName Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Label.Type.HasRefAddress Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Chunk.UnitDefn.MayHaveUnit Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.GenDefn.GenDefn
instance Language.Drasil.Label.Type.Referable Theory.Drasil.GenDefn.GenDefn


-- | Defines types and functions for Theoretical Models.
module Theory.Drasil.Theory

-- | Theories are the basis for building models with context, spaces,
--   quantities, operations, invariants, etc.
class Theory t
valid_context :: Theory t => Lens' t [TheoryModel]
spaces :: Theory t => Lens' t [SpaceDefn]
quantities :: Theory t => Lens' t [QuantityDict]
operations :: Theory t => Lens' t [ConceptChunk]
defined_quant :: Theory t => Lens' t [ModelQDef]
invariants :: Theory t => Lens' t [ModelExpr]
defined_fun :: Theory t => Lens' t [ModelQDef]

-- | A TheoryModel is a collection of:
--   
--   <ul>
--   <li>tUid - a UID,</li>
--   <li>con - a ConceptChunk,</li>
--   <li>vctx - definition context (<a>TheoryModel</a>s),</li>
--   <li>spc - type definitions (<a>SpaceDefn</a>s),</li>
--   <li>quan - quantities (<a>QuantityDict</a>s),</li>
--   <li>ops - operations (<a>ConceptChunk</a>s),</li>
--   <li>defq - definitions (<a>QDefinition</a>s),</li>
--   <li>invs - invariants (<a>ModelExpr</a>s),</li>
--   <li>dfun - defined functions (<a>QDefinition</a>s),</li>
--   <li>ref - accompanying references (<a>DecRef</a>s),</li>
--   <li>lb - a label (<a>SpaceDefn</a>),</li>
--   <li>ra - reference address (<a>SpaceDefn</a>),</li>
--   <li>notes - additional notes (<a>Sentence</a>s).</li>
--   </ul>
--   
--   Right now, neither the definition context (vctx) nor the spaces (spc)
--   are ever defined.
data TheoryModel

-- | Constructor for theory models. Must have a source. Uses the shortname
--   of the reference address.
tm :: (Quantity q, MayHaveUnit q, Concept c) => ModelKind ModelExpr -> [q] -> [c] -> [ModelQDef] -> [ModelExpr] -> [ModelQDef] -> [DecRef] -> String -> [Sentence] -> TheoryModel

-- | Constructor for theory models. Uses the shortname of the reference
--   address.
tmNoRefs :: (Quantity q, MayHaveUnit q, Concept c) => ModelKind ModelExpr -> [q] -> [c] -> [ModelQDef] -> [ModelExpr] -> [ModelQDef] -> String -> [Sentence] -> TheoryModel
instance Language.Drasil.UID.HasUID Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Chunk.NamedIdea.NamedIdea Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Chunk.NamedIdea.Idea Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.Definition Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.DecoratedReference.HasDecRef Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.ConceptDomain Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.HasAdditionalNotes Theory.Drasil.Theory.TheoryModel
instance Theory.Drasil.Theory.Theory Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.ShortName.HasShortName Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Label.Type.HasRefAddress Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Classes.CommonIdea Theory.Drasil.Theory.TheoryModel
instance Language.Drasil.Label.Type.Referable Theory.Drasil.Theory.TheoryModel


-- | Re-export many things to simplify external use.
module Theory.Drasil

-- | Members of this class may have inputs.
class HasInputs c

-- | Provides a <tt>Lens</tt> that holds a <a>QuantityDict</a> and maybe
--   constraints.
inputs :: HasInputs c => Lens' c [(QuantityDict, Maybe (RealInterval Expr Expr))]

-- | Members of this class may have outputs.
class HasOutput c

-- | Provides a <a>Getter</a> that holds a <a>QuantityDict</a> for output.
output :: HasOutput c => Getter c QuantityDict

-- | Provides a <a>Getter</a> that holds constraints on the output.
out_constraints :: HasOutput c => Getter c [RealInterval Expr Expr]

-- | <a>ConstraintSet</a>s are sets of invariants that always hold for
--   underlying domains.
data ConstraintSet e

-- | Smart constructor for building ConstraintSets
mkConstraintSet :: ConceptChunk -> NonEmpty e -> ConstraintSet e

-- | A data definition is a <a>QDefinition</a> that may have additional
--   notes: the scope, any references (as <a>DecRef</a>s), maybe a
--   derivation, a label (<a>ShortName</a>), a reference address, and other
--   notes (<a>Sentence</a>s).
data DataDefinition

-- | Smart constructor for data definitions.
ddE :: SimpleQDef -> [DecRef] -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions with no references.
ddENoRefs :: SimpleQDef -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions.
ddME :: ModelQDef -> [DecRef] -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Smart constructor for data definitions with no references.
ddMENoRefs :: ModelQDef -> Maybe Derivation -> String -> [Sentence] -> DataDefinition

-- | Extracts the 'QDefinition e' from a <a>DataDefinition</a>.
qdFromDD :: DataDefinition -> Either SimpleQDef ModelQDef
qdEFromDD :: DataDefinition -> Maybe SimpleQDef

-- | A general definition is a <a>ModelKind</a> that may have units, a
--   derivation, references (as <a>DecRef</a>s), a shortname, a reference
--   address, and notes.
data GenDefn

-- | Smart constructor for general definitions.
gd :: IsUnit u => ModelKind ModelExpr -> Maybe u -> Maybe Derivation -> [DecRef] -> String -> [Sentence] -> GenDefn

-- | Smart constructor for general definitions with no references.
gdNoRefs :: IsUnit u => ModelKind ModelExpr -> Maybe u -> Maybe Derivation -> String -> [Sentence] -> GenDefn

-- | Grab all related <tt>QDefinitions</tt> from a list of general
--   definitions.
getEqModQdsFromGd :: [GenDefn] -> [ModelQDef]

-- | <a>MultiDefn</a>s are QDefinition factories, used for showing one or
--   more ways we can define a QDefinition.
data MultiDefn e

-- | <a>DefiningExpr</a> are the data that make up a (quantity) definition,
--   namely the description, the defining (rhs) expression and the context
--   domain(s). These are meant to be <tt>alternate</tt> but equivalent
--   definitions for a single concept.
data DefiningExpr e

-- | Smart constructor for MultiDefns, does nothing special at the moment.
--   First argument is the <a>Space</a> to become a <a>UID</a>.
mkMultiDefn :: String -> QuantityDict -> Sentence -> NonEmpty (DefiningExpr e) -> MultiDefn e

-- | Smart constructor for <a>MultiDefn</a>s defining <a>UID</a>s using
--   that of the <a>QuantityDict</a>.
mkMultiDefnForQuant :: QuantityDict -> Sentence -> NonEmpty (DefiningExpr e) -> MultiDefn e

-- | Smart constructor for <a>DefiningExpr</a>s.
mkDefiningExpr :: String -> [UID] -> Sentence -> e -> DefiningExpr e

-- | Convert <a>MultiDefn</a>s into <a>QDefinition</a>s via a specific
--   <a>DefiningExpr</a>.
multiDefnGenQD :: MultiDefn e -> DefiningExpr e -> QDefinition e

-- | Convert <a>MultiDefn</a>s into <a>QDefinition</a>s via a specific
--   <a>DefiningExpr</a> (by <a>UID</a>).
multiDefnGenQDByUID :: MultiDefn e -> UID -> QDefinition e

-- | <a>ModelKinds</a> carrier, used to carry commonly overwritten
--   information from the IMs<i>TMs</i>GDs.
data ModelKind e

-- | Smart constructor for <a>NewDEModel</a>s
newDEModel :: String -> NP -> DifferentialModel -> ModelKind e

-- | Smart constructor for <a>DEModel</a>s
deModel :: String -> NP -> RelationConcept -> ModelKind e

-- | Smart constructor for <a>EquationalConstraints</a>
equationalConstraints :: String -> NP -> ConstraintSet e -> ModelKind e

-- | Smart constructor for <a>EquationalModel</a>s
equationalModel :: String -> NP -> QDefinition e -> ModelKind e

-- | Smart constructor for <a>EquationalRealm</a>s
equationalRealm :: String -> NP -> MultiDefn e -> ModelKind e

-- | Smart constructor for <a>OthModel</a>s
othModel :: String -> NP -> RelationConcept -> ModelKind Expr

-- | Smart constructor for <a>NewDEModel</a>s, deriving UID+Term from the
--   <a>DifferentialModel</a>
newDEModel' :: DifferentialModel -> ModelKind e

-- | Smart constructor for <a>DEModel</a>s, deriving UID+Term from the
--   <a>RelationConcept</a>
deModel' :: RelationConcept -> ModelKind e

-- | Smart constructor for <a>EquationalConstraints</a>, deriving UID+Term
--   from the <a>ConstraintSet</a>
equationalConstraints' :: ConstraintSet e -> ModelKind e

-- | Smart constructor for <a>EquationalModel</a>s, deriving UID+Term from
--   the <a>QDefinition</a>
equationalModel' :: QDefinition e -> ModelKind e

-- | Smart constructor for <a>EquationalRealm</a>s, deriving UID+Term from
--   the <a>MultiDefn</a>
equationalRealm' :: MultiDefn e -> ModelKind e

-- | Smart constructor for <a>OthModel</a>s, deriving UID+Term from the
--   <a>RelationConcept</a>
othModel' :: RelationConcept -> ModelKind e

-- | Smart constructor for <a>EquationalModel</a>s, deriving Term from the
--   <a>QDefinition</a>
equationalModelU :: String -> QDefinition e -> ModelKind e

-- | Smart constructor for <a>EquationalModel</a>s, deriving UID from the
--   <a>QDefinition</a>
equationalModelN :: NP -> QDefinition e -> ModelKind e

-- | Smart constructor for <a>EquationalRealm</a>s
equationalRealmU :: String -> MultiDefn e -> ModelKind e

-- | Smart constructor for <a>EquationalRealm</a>s, deriving UID from the
--   <a>MultiDefn</a>
equationalRealmN :: NP -> MultiDefn e -> ModelKind e

-- | An instance model is a ModelKind that may have specific inputs,
--   outputs, and output constraints. It also has attributes like
--   references, derivation, labels (<a>ShortName</a>), reference address,
--   and notes.
data InstanceModel

-- | Smart constructor for instance models with everything defined.
im :: ModelKind Expr -> Inputs -> Output -> OutputConstraints -> [DecRef] -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with a custom term, and no
--   derivation.
imNoDeriv :: ModelKind Expr -> Inputs -> Output -> OutputConstraints -> [DecRef] -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with a custom term, and no
--   references.
imNoRefs :: ModelKind Expr -> Inputs -> Output -> OutputConstraints -> Maybe Derivation -> String -> [Sentence] -> InstanceModel

-- | Smart constructor for instance models with a custom term, and no
--   derivations or references.
imNoDerivNoRefs :: ModelKind Expr -> Inputs -> Output -> OutputConstraints -> String -> [Sentence] -> InstanceModel

-- | For building a quantity with no constraint.
qwUC :: (Quantity q, MayHaveUnit q) => q -> Input

-- | For building a quantity with a constraint.
qwC :: (Quantity q, MayHaveUnit q) => q -> RealInterval Expr Expr -> Input

-- | Grab all related <a>QDefinition</a>s from a list of instance models.
getEqModQdsFromIm :: [InstanceModel] -> [SimpleQDef]

-- | Theories are the basis for building models with context, spaces,
--   quantities, operations, invariants, etc.
class Theory t
valid_context :: Theory t => Lens' t [TheoryModel]
spaces :: Theory t => Lens' t [SpaceDefn]
quantities :: Theory t => Lens' t [QuantityDict]
operations :: Theory t => Lens' t [ConceptChunk]
defined_quant :: Theory t => Lens' t [ModelQDef]
invariants :: Theory t => Lens' t [ModelExpr]
defined_fun :: Theory t => Lens' t [ModelQDef]

-- | A TheoryModel is a collection of:
--   
--   <ul>
--   <li>tUid - a UID,</li>
--   <li>con - a ConceptChunk,</li>
--   <li>vctx - definition context (<a>TheoryModel</a>s),</li>
--   <li>spc - type definitions (<a>SpaceDefn</a>s),</li>
--   <li>quan - quantities (<a>QuantityDict</a>s),</li>
--   <li>ops - operations (<a>ConceptChunk</a>s),</li>
--   <li>defq - definitions (<a>QDefinition</a>s),</li>
--   <li>invs - invariants (<a>ModelExpr</a>s),</li>
--   <li>dfun - defined functions (<a>QDefinition</a>s),</li>
--   <li>ref - accompanying references (<a>DecRef</a>s),</li>
--   <li>lb - a label (<a>SpaceDefn</a>),</li>
--   <li>ra - reference address (<a>SpaceDefn</a>),</li>
--   <li>notes - additional notes (<a>Sentence</a>s).</li>
--   </ul>
--   
--   Right now, neither the definition context (vctx) nor the spaces (spc)
--   are ever defined.
data TheoryModel

-- | Constructor for theory models. Must have a source. Uses the shortname
--   of the reference address.
tm :: (Quantity q, MayHaveUnit q, Concept c) => ModelKind ModelExpr -> [q] -> [c] -> [ModelQDef] -> [ModelExpr] -> [ModelQDef] -> [DecRef] -> String -> [Sentence] -> TheoryModel

-- | Constructor for theory models. Uses the shortname of the reference
--   address.
tmNoRefs :: (Quantity q, MayHaveUnit q, Concept c) => ModelKind ModelExpr -> [q] -> [c] -> [ModelQDef] -> [ModelExpr] -> [ModelQDef] -> String -> [Sentence] -> TheoryModel
