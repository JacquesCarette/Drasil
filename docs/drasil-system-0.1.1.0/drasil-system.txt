-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - System SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-system
@version 0.1.1.0


-- | Define types and functions related to creating a system information
--   database.
module Drasil.System

-- | Data structure for holding all of the requisite information about a
--   system to be used in artifact generation.
data System
[SI] :: (CommonIdea a, Idea a, Quantity e, Eq e, MayHaveUnit e, Concept e, Quantity h, MayHaveUnit h, Concept h, Quantity i, MayHaveUnit i, Concept i, HasUID j, Constrained j) => a -> SystemKind -> People -> Purpose -> Background -> Scope -> Motivation -> [e] -> [TheoryModel] -> [GenDefn] -> [DataDefinition] -> [InstanceModel] -> [String] -> [h] -> [i] -> [j] -> [ConstQDef] -> ChunkDB -> System
data SystemKind
Specification :: SystemKind
RunnableSoftware :: SystemKind
Notebook :: SystemKind
Website :: SystemKind
class HasSystem c_a8WH
system :: HasSystem c_a8WH => Lens' c_a8WH System
authors :: HasSystem c_a8WH => Lens' c_a8WH People
background :: HasSystem c_a8WH => Lens' c_a8WH Background
configFiles :: HasSystem c_a8WH => Lens' c_a8WH [String]
constants :: HasSystem c_a8WH => Lens' c_a8WH [ConstQDef]
dataDefns :: HasSystem c_a8WH => Lens' c_a8WH [DataDefinition]
genDefns :: HasSystem c_a8WH => Lens' c_a8WH [GenDefn]
instModels :: HasSystem c_a8WH => Lens' c_a8WH [InstanceModel]
kind :: HasSystem c_a8WH => Lens' c_a8WH SystemKind
motivation :: HasSystem c_a8WH => Lens' c_a8WH Motivation
purpose :: HasSystem c_a8WH => Lens' c_a8WH Purpose
scope :: HasSystem c_a8WH => Lens' c_a8WH Scope
systemdb :: HasSystem c_a8WH => Lens' c_a8WH ChunkDB
theoryModels :: HasSystem c_a8WH => Lens' c_a8WH [TheoryModel]
whatsTheBigIdea :: System -> IdeaDict
mkSystem :: (CommonIdea a, Idea a, Quantity e, Eq e, MayHaveUnit e, Concept e, Quantity h, MayHaveUnit h, Concept h, Quantity i, MayHaveUnit i, Concept i, HasUID j, Constrained j) => a -> SystemKind -> People -> Purpose -> Background -> Scope -> Motivation -> [e] -> [TheoryModel] -> [GenDefn] -> [DataDefinition] -> [InstanceModel] -> [String] -> [h] -> [i] -> [j] -> [ConstQDef] -> ChunkDB -> System

-- | Project Example purpose.
type Purpose = [Sentence]

-- | Project Example background information, used in the <tt>What</tt>
--   section of README.
type Background = [Sentence]

-- | Project Example scope.
type Scope = [Sentence]

-- | Project Example motivation.
type Motivation = [Sentence]
instance Drasil.System.HasSystem Drasil.System.System
