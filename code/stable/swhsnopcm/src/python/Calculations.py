## \file Calculations.py
# \author Thulasi Jegatheesan
# \brief Provides functions for calculating the outputs
# \note Generated by Drasil v0.1-alpha

import scipy.integrate

## \brief Calculates volume of water (m^3)
# \param V_tank volume of the cylindrical tank (m^3)
# \return volume of water (m^3)
def func_V_W(V_tank):
    return V_tank

## \brief Calculates mass of water (kg)
# \param rho_W density of water (kg/m^3)
# \param V_W volume of water (m^3)
# \return mass of water (kg)
def func_m_W(rho_W, V_W):
    return V_W * rho_W

## \brief Calculates ODE parameter for water related to decay time (s)
# \param C_W specific heat capacity of water (J/(kg degreeC))
# \param h_C convective heat transfer coefficient between coil and water (W/(m^2 degreeC))
# \param A_C heating coil surface area (m^2)
# \param m_W mass of water (kg)
# \return ODE parameter for water related to decay time (s)
def func_tau_W(C_W, h_C, A_C, m_W):
    return m_W * C_W / (h_C * A_C)

## \brief Calculates temperature of the water (degreeC)
# \param T_C temperature of the heating coil (degreeC)
# \param T_init initial temperature (degreeC)
# \param t_final final time (s)
# \param A_tol absolute tolerance
# \param R_tol relative tolerance
# \param t_step time step for simulation (s)
# \param tau_W ODE parameter for water related to decay time (s)
# \return temperature of the water (degreeC)
def func_T_W(T_C, T_init, t_final, A_tol, R_tol, t_step, tau_W):
    def f(t, T_W):
        return [-(1.0 / tau_W) * T_W[0] + 1.0 / tau_W * T_C]
    
    r = scipy.integrate.ode(f)
    r.set_integrator("dopri5", atol=A_tol, rtol=R_tol)
    r.set_initial_value([T_init], 0.0)
    T_W = [[T_init][0]]
    while r.successful() and r.t < t_final:
        r.integrate(r.t + t_step)
        T_W.append(r.y[0])
    
    return T_W
