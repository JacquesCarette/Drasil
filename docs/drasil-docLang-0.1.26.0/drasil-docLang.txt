-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Document Language SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-docLang
@version 0.1.26.0

module Drasil.DocLang.Notebook

-- | Section constructors for the lesson plan documents/jupyter notebooks.
--   should be fixed once we have a more concrete idea of the notebook
--   structure TODO: Remove [Section] since the structure of lesson plans
--   should not be nested maybe add a new type Chapter for lesson plans?
intro :: [Contents] -> [Section] -> Section

-- | Section constructors for the lesson plan documents/jupyter notebooks.
--   should be fixed once we have a more concrete idea of the notebook
--   structure TODO: Remove [Section] since the structure of lesson plans
--   should not be nested maybe add a new type Chapter for lesson plans?
learnObj :: [Contents] -> [Section] -> Section

-- | Section constructors for the lesson plan documents/jupyter notebooks.
--   should be fixed once we have a more concrete idea of the notebook
--   structure TODO: Remove [Section] since the structure of lesson plans
--   should not be nested maybe add a new type Chapter for lesson plans?
review :: [Contents] -> [Section] -> Section

-- | Section constructors for the lesson plan documents/jupyter notebooks.
--   should be fixed once we have a more concrete idea of the notebook
--   structure TODO: Remove [Section] since the structure of lesson plans
--   should not be nested maybe add a new type Chapter for lesson plans?
caseProb :: [Contents] -> [Section] -> Section

-- | Section constructors for the lesson plan documents/jupyter notebooks.
--   should be fixed once we have a more concrete idea of the notebook
--   structure TODO: Remove [Section] since the structure of lesson plans
--   should not be nested maybe add a new type Chapter for lesson plans?
summary :: [Contents] -> [Section] -> Section

-- | Section constructors for the lesson plan documents/jupyter notebooks.
--   should be fixed once we have a more concrete idea of the notebook
--   structure TODO: Remove [Section] since the structure of lesson plans
--   should not be nested maybe add a new type Chapter for lesson plans?
appendix :: [Contents] -> [Section] -> Section

-- | Section constructors for the lesson plan documents/jupyter notebooks.
--   should be fixed once we have a more concrete idea of the notebook
--   structure TODO: Remove [Section] since the structure of lesson plans
--   should not be nested maybe add a new type Chapter for lesson plans?
reference :: [Contents] -> [Section] -> Section

-- | Section constructors for the lesson plan documents/jupyter notebooks.
--   should be fixed once we have a more concrete idea of the notebook
--   structure TODO: Remove [Section] since the structure of lesson plans
--   should not be nested maybe add a new type Chapter for lesson plans?
example :: [Contents] -> [Section] -> Section
sectionReferences :: [Reference]

-- | Individual section reference labels. Used in creating example sections
--   for the notebook.
introLabel :: Reference

-- | Individual section reference labels. Used in creating example sections
--   for the notebook.
learnObjLabel :: Reference

-- | Individual section reference labels. Used in creating example sections
--   for the notebook.
docPurposeLabel :: Reference

-- | Individual section reference labels. Used in creating example sections
--   for the notebook.
referenceLabel :: Reference

-- | Individual section reference labels. Used in creating example sections
--   for the notebook.
reviewLabel :: Reference

-- | Individual section reference labels. Used in creating example sections
--   for the notebook.
caseProbLabel :: Reference

-- | Individual section reference labels. Used in creating example sections
--   for the notebook.
appendixLabel :: Reference

-- | Individual section reference labels. Used in creating example sections
--   for the notebook.
summaryLabel :: Reference

-- | Individual section reference labels. Used in creating example sections
--   for the notebook.
exampleLabel :: Reference


-- | Holds all section constructors and labels for creating SRS documents.
module Drasil.DocLang.SRS

-- | Table of Contents section.
--   
--   Standard SRS section builders.
tOfCont :: [Contents] -> [Section] -> Section

-- | Reference Material section.
--   
--   Standard SRS section builders.
refMat :: [Contents] -> [Section] -> Section

-- | Table of Units section.
--   
--   Standard SRS section builders.
tOfUnit :: [Contents] -> [Section] -> Section

-- | Table of Symbols section.
--   
--   Standard SRS section builders.
tOfSymb :: [Contents] -> [Section] -> Section

-- | Table of Abbreviations and Acronyms section.
--   
--   Standard SRS section builders.
tOfAbbAcc :: [Contents] -> [Section] -> Section

-- | Introduction section.
--   
--   Standard SRS section builders.
intro :: [Contents] -> [Section] -> Section

-- | Purpose of Document section.
--   
--   Standard SRS section builders.
prpsOfDoc :: [Contents] -> [Section] -> Section

-- | Scope of Requirements section.
--   
--   Standard SRS section builders.
scpOfReq :: [Contents] -> [Section] -> Section

-- | Characteristics of Intended Reader section.
--   
--   Standard SRS section builders.
charOfIR :: [Contents] -> [Section] -> Section

-- | Organization of Document section.
--   
--   Standard SRS section builders.
orgOfDoc :: [Contents] -> [Section] -> Section

-- | Stakeholders section.
--   
--   Standard SRS section builders.
stakeholder :: [Contents] -> [Section] -> Section

-- | The Customer section.
--   
--   Standard SRS section builders.
theCustomer :: [Contents] -> [Section] -> Section

-- | The Client section.
--   
--   Standard SRS section builders.
theClient :: [Contents] -> [Section] -> Section

-- | General System Description section.
--   
--   Standard SRS section builders.
genSysDes :: [Contents] -> [Section] -> Section

-- | System Context section.
--   
--   Standard SRS section builders.
sysCont :: [Contents] -> [Section] -> Section

-- | User Characteristics section.
--   
--   Standard SRS section builders.
userChar :: [Contents] -> [Section] -> Section

-- | System Constraints section.
--   
--   Standard SRS section builders.
sysCon :: [Contents] -> [Section] -> Section

-- | Specific System Description section.
--   
--   Standard SRS section builders.
specSysDes :: [Contents] -> [Section] -> Section

-- | Problem Description section.
--   
--   Standard SRS section builders.
probDesc :: [Contents] -> [Section] -> Section

-- | Terminology and Definitions section.
--   
--   Standard SRS section builders.
termAndDefn :: [Contents] -> [Section] -> Section

-- | Physical System Description section.
--   
--   Standard SRS section builders.
physSyst :: [Contents] -> [Section] -> Section

-- | Goal Statement section.
--   
--   Standard SRS section builders.
goalStmt :: [Contents] -> [Section] -> Section

-- | Solution Characteristics Specification section.
--   
--   Standard SRS section builders.
solCharSpec :: [Contents] -> [Section] -> Section

-- | Assumptions section.
--   
--   Standard SRS section builders.
assumpt :: [Contents] -> [Section] -> Section

-- | Theoretical Models section.
--   
--   Standard SRS section builders.
thModel :: [Contents] -> [Section] -> Section

-- | General Definitions section.
--   
--   Standard SRS section builders.
genDefn :: [Contents] -> [Section] -> Section

-- | Data Definitions section.
--   
--   Standard SRS section builders.
dataDefn :: [Contents] -> [Section] -> Section

-- | Instance Models section.
--   
--   Standard SRS section builders.
inModel :: [Contents] -> [Section] -> Section

-- | Data Constraints section.
--   
--   Standard SRS section builders.
datCon :: [Contents] -> [Section] -> Section

-- | Properties of a Correct Solution section.
--   
--   Standard SRS section builders.
propCorSol :: [Contents] -> [Section] -> Section

-- | Requirements section.
--   
--   Standard SRS section builders.
require :: [Contents] -> [Section] -> Section

-- | Non-Functional Requirements section.
--   
--   Standard SRS section builders.
nonfuncReq :: [Contents] -> [Section] -> Section

-- | Functional Requirements section.
--   
--   Standard SRS section builders.
funcReq :: [Contents] -> [Section] -> Section

-- | Likely Changes section.
--   
--   Standard SRS section builders.
likeChg :: [Contents] -> [Section] -> Section

-- | Unlikely Changes section.
--   
--   Standard SRS section builders.
unlikeChg :: [Contents] -> [Section] -> Section

-- | Traceablilty Matrices and Graphs section.
--   
--   Standard SRS section builders.
traceyMandG :: [Contents] -> [Section] -> Section

-- | Values of Auxiliary Constants section.
--   
--   Standard SRS section builders.
valsOfAuxCons :: [Contents] -> [Section] -> Section

-- | References section.
--   
--   Standard SRS section builders.
reference :: [Contents] -> [Section] -> Section

-- | Appendix section.
--   
--   Standard SRS section builders.
appendix :: [Contents] -> [Section] -> Section

-- | Off-the-Shelf Solutions section.
--   
--   Standard SRS section builders.
offShelfSol :: [Contents] -> [Section] -> Section

-- | Scope of the Project section.
--   
--   Standard SRS section builders.
scpOfTheProj :: [Contents] -> [Section] -> Section

-- | Product Use Case Table section.
--   
--   Standard SRS section builders.
prodUCTable :: [Contents] -> [Section] -> Section

-- | Individual Product Use Case section.
--   
--   Standard SRS section builders.
indPRCase :: [Contents] -> [Section] -> Section

-- | Terminology section.
--   
--   Standard SRS section builders.
termogy :: [Contents] -> [Section] -> Section

-- | Makes a <a>Reference</a> to a <a>Section</a>.
tOfContLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
refMatLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
tOfUnitLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
tOfSymbLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
tOfAbbAccLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
introLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
docPurposeLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
reqsScopeLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
readerCharsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
docOrgLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
stakeholderLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
clientLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
customerLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
genSysDescLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
sysContextLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
userCharsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
sysConstraintsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
specSystDescLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
physSystLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
probDescLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
termDefsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
goalStmtLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
solCharSpecLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
assumptLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
thModelLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
genDefnLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
dataDefnLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
inModelLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
datConLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
corSolPropsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
requirementsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
funcReqLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
nonfuncReqLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
likeChgLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
unlikeChgLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
traceMatricesLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
valsOfAuxConsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
referenceLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
appendixLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
offShelfSolnsLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
indPRCaseLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
projScopeLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
useCaseTableLabel :: Reference

-- | Makes a <a>Reference</a> to a <a>Section</a>.
terminologyLabel :: Reference

-- | Collections all <a>Section</a> <a>Reference</a>s.
sectionReferences :: [Reference]


-- | Helpers for dealing with formatting of Units
module Drasil.DocumentLanguage.Units

-- | Get the units, if they exist, and wrap them as a <a>Sentence</a>.
--   Default value is "--".
toSentence :: MayHaveUnit u => u -> Sentence

-- | Similar to <a>toSentence</a>, except default value is "Unitless".
toSentenceUnitless :: MayHaveUnit u => u -> Sentence


-- | Defines functions to create traceability graphs in SRS documents.
module Drasil.DocumentLanguage.TraceabilityGraph

-- | Wrapper for <a>traceMIntro</a> and <a>traceGIntro</a>. Turns
--   references (<a>LabelledContent</a>s), trailing notes
--   (<a>Sentence</a>s), and any other needed contents to create a
--   Traceability <a>Section</a>. Traceability graphs generate as both a
--   link and a figure for convenience.
traceMGF :: [LabelledContent] -> [Sentence] -> [Contents] -> String -> [Section] -> Section

-- | Generalized traceability graph introduction: appends references to the
--   traceability graphs in <a>Sentence</a> form and wraps in
--   <a>Contents</a>. Usually references the five graphs as defined in
--   <a>GraphInfo</a>.
traceGIntro :: [UID] -> [Sentence] -> [UnlabelledContent]

-- | Extracts traceability graph inforomation from filled-in
--   <a>SystemInformation</a>.
mkGraphInfo :: SystemInformation -> GraphInfo

-- | Gets the node family of a graph based on the given section and system
--   information. Also applies a given colour to the node family.
mkGraphNodes :: TraceViewCat -> SystemInformation -> String -> NodeFamily

-- | Creates the graph edges based on the relation of the first list of
--   sections to the second. Also needs the system information. Return
--   value is of the form (Section, [Dependencies]).
mkGraphEdges :: [TraceViewCat] -> [TraceViewCat] -> SystemInformation -> [(UID, [UID])]

-- | Helper for making graph edges. Taken from Utils.Drasil's traceability
--   matrix relation finder. But, instead of marking <a>X</a> on two
--   related ideas, it makes them an edge.
makeTGraph :: [UID] -> [[UID]] -> [UID] -> [(UID, [UID])]

-- | Checker for uids by finding if the <a>UID</a> is in one of the
--   possible data sets contained in the <a>SystemInformation</a> database.
checkUID :: UID -> SystemInformation -> UID

-- | Similar to <a>checkUID</a> but prepends domain for labelling.
checkUIDAbbrev :: SystemInformation -> UID -> String

-- | Similar to <a>checkUID</a> but gets reference addresses for display.
checkUIDRefAdd :: SystemInformation -> UID -> String

-- | Helper that finds the header of a traceability matrix. However, here
--   we use this to get a list of <a>UID</a>s for a traceability graph
--   instead.
traceGHeader :: (ChunkDB -> [UID]) -> SystemInformation -> [UID]

-- | Helper that finds the headers of the traceability matrix rows.
--   However, here we use this to get a list of <a>UID</a>s for a
--   traceability graph instead. This is then used to create the graph
--   edges.
traceGRowHeader :: ([UID] -> [UID]) -> SystemInformation -> [UID]

-- | Helper that makes references of the form "<tt>reference</tt> shows the
--   dependencies of <tt>something</tt>". Only takes a reference <a>UID</a>
--   instead of a <a>Reference</a>.
graphShows :: UID -> Sentence -> Sentence

-- | Description of the <tt>AllvsAll</tt> traceability graph.
allvsallDesc :: Sentence

-- | Create a list of traceability graph references.
traceGLst :: Contents

-- | The Traceability Graph contents.
traceGCon :: String -> [Contents]

-- | Generates traceability graphs as figures on an SRS document.
traceGraphLC :: String -> FilePath -> UID -> LabelledContent

-- | Traceability graph file names.
traceGFiles :: [String]

-- | Traceabiliy graph reference <a>UID</a>s.
traceGUIDs :: [UID]

-- | Create reference paths to traceability graphs given an example name.
--   For <tt>.pdf</tt> links
traceyGraphPaths :: String -> [String]

-- | Create references to traceability graphs given an example name.
--   Primarily used for reference database in examples.
traceyGraphGetRefs :: String -> [Reference]

-- | Gets the path of a traceability graph given an example folder name and
--   the graph name. For <tt>.png</tt> files
traceyGraphPath :: String -> String -> String

-- | Traceability graphs reference path.
resourcePath :: String

-- | Helper to create a list of traceability graph references.
folderList' :: [ItemType]


-- | Re-export document language types and functions for easy use in other
--   packages.
module Drasil.DocLang

-- | A Software Requirements Specification Declaration is made up of all
--   necessary sections (<a>DocSection</a>s).
type SRSDecl = [DocSection]

-- | Contains all the different sections needed for a full SRS
--   (<a>SRSDecl</a>).
data DocSection

-- | Table of Contents
TableOfContents :: DocSection

-- | Reference.
RefSec :: RefSec -> DocSection

-- | Introduction.
IntroSec :: IntroSec -> DocSection

-- | Stakeholders.
StkhldrSec :: StkhldrSec -> DocSection

-- | General System Description.
GSDSec :: GSDSec -> DocSection

-- | Specific System Description.
SSDSec :: SSDSec -> DocSection

-- | Requirements.
ReqrmntSec :: ReqrmntSec -> DocSection

-- | Likely Changes.
LCsSec :: DocSection

-- | Unlikely Changes.
UCsSec :: DocSection

-- | Traceability.
TraceabilitySec :: TraceabilitySec -> DocSection

-- | Auxiliary Constants.
AuxConstntSec :: AuxConstntSec -> DocSection

-- | Bibliography.
Bibliography :: DocSection

-- | Appendix.
AppndxSec :: AppndxSec -> DocSection

-- | Off the Shelf Solutions.
OffShelfSolnsSec :: OffShelfSolnsSec -> DocSection

-- | Requirements section (wraps <a>ReqsSub</a> subsections).
newtype ReqrmntSec
ReqsProg :: [ReqsSub] -> ReqrmntSec

-- | Requirements subsections.
data ReqsSub

-- | Functional requirements. <a>LabelledContent</a> for tables (includes
--   input values).
[FReqsSub] :: Sentence -> [LabelledContent] -> ReqsSub

-- | Functional requirements. <a>LabelledContent</a> for tables (no input
--   values).
[FReqsSub'] :: [LabelledContent] -> ReqsSub

-- | Non-Functional requirements.
[NonFReqsSub] :: ReqsSub

-- | Problem Description subsections.
data PDSub

-- | Terms and Definitions.
[TermsAndDefs] :: Concept c => Maybe Sentence -> [c] -> PDSub

-- | Physical System Description.
[PhySysDesc] :: Idea a => a -> [Sentence] -> LabelledContent -> [Contents] -> PDSub

-- | Goals.
[Goals] :: [Sentence] -> PDSub

-- | Problem Description section.
data ProblemDescription
[PDProg] :: Sentence -> [Section] -> [PDSub] -> ProblemDescription

-- | Specific System Description section (wraps <a>SSDSub</a> subsections).
newtype SSDSec
SSDProg :: [SSDSub] -> SSDSec

-- | Specific System Description subsections.
data SSDSub

-- | Problem description.
[SSDProblem] :: ProblemDescription -> SSDSub

-- | Solution characteristics.
[SSDSolChSpec] :: SolChSpec -> SSDSub

-- | Solution Characteristics Specification subsections.
data SCSSub

-- | Assumptions.
[Assumptions] :: SCSSub

-- | Theory models.
[TMs] :: [Sentence] -> Fields -> SCSSub

-- | General definitions.
[GDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Data definitions.
[DDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Instance models.
[IMs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Constraints.
[Constraints] :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => Sentence -> [c] -> SCSSub

-- | Properties of a correct solution.
[CorrSolnPpties] :: (Quantity c, Constrained c) => [c] -> [Contents] -> SCSSub

-- | Solution Characteristics Specification section (wraps <a>SCSSub</a>
--   subsections).
data SolChSpec
[SCSProg] :: [SCSSub] -> SolChSpec

-- | Appendix section.
newtype AppndxSec
AppndxProg :: [Contents] -> AppndxSec

-- | Values of Auxiliary Constants section.
data AuxConstntSec
AuxConsProg :: CI -> [ConstQDef] -> AuxConstntSec

-- | Choose whether to show or hide the derivation of an expression.
data DerivationDisplay
ShowDerivation :: DerivationDisplay
HideDerivation :: DerivationDisplay

-- | How to handle emphasis of words.
data Emphasis
Bold :: Emphasis
Italics :: Emphasis

-- | Off-The-Shelf Solutions section.
newtype OffShelfSolnsSec
OffShelfSolnsProg :: [Contents] -> OffShelfSolnsSec

-- | General System Description section (wraps <a>GSDSub</a> subsections).
newtype GSDSec
GSDProg :: [GSDSub] -> GSDSec

-- | General System Description subsections.
data GSDSub

-- | System context.
[SysCntxt] :: [Contents] -> GSDSub

-- | User characteristics.
[UsrChars] :: [Contents] -> GSDSub

-- | System constraints.
[SystCons] :: [Contents] -> [Section] -> GSDSub

-- | Introduction section. Contents are top level followed by a list of
--   subsections.
data IntroSec

-- | Temporary, will be modified once we've figured out more about the
--   section.
IntroProg :: Sentence -> Sentence -> [IntroSub] -> IntroSec

-- | Introduction subsections.
data IntroSub

-- | Describes purpose of the system.
[IPurpose] :: [Sentence] -> IntroSub

-- | Describes scope of the system.
[IScope] :: Sentence -> IntroSub

-- | Describes characteristics of the system.
[IChar] :: [Sentence] -> [Sentence] -> [Sentence] -> IntroSub

-- | Organises the section.
[IOrgSec] :: CI -> Section -> Sentence -> IntroSub

-- | Lens (lookup) functions (currently for TSymb).
data LFunc
[Term] :: LFunc
[Defn] :: LFunc
[TermExcept] :: [DefinedQuantityDict] -> LFunc
[DefnExcept] :: [DefinedQuantityDict] -> LFunc
[TAD] :: LFunc

-- | Types of literature.
data Literature

-- | Literature (with a Topic).
Lit :: Topic -> Literature

-- | Existing documentation for (plural version of topic).
Doc' :: Topic -> Literature

-- | Manual.
Manual :: Topic -> Literature

-- | Reference section. Contents are top level followed by a list of
--   subsections.
data RefSec
RefProg :: Contents -> [RefTab] -> RefSec

-- | Reference subsections (tables) made out of units or symbols (can be
--   customized).
data RefTab

-- | Default table of units.
[TUnits] :: RefTab

-- | Customized introduction.
[TUnits'] :: [TUIntro] -> ([UnitDefn] -> LabelledContent) -> RefTab

-- | Adds an introduction for a table of symbols.
[TSymb] :: [TSIntro] -> RefTab

-- | Allows Lens functions in addition to an introduction for a table of
--   symbols.
[TSymb'] :: LFunc -> [TSIntro] -> RefTab

-- | Default.
[TAandA] :: RefTab

-- | Stakeholders section (wraps stakeholders subsections
--   <a>StkhldrSub</a>).
newtype StkhldrSec
StkhldrProg :: [StkhldrSub] -> StkhldrSec

-- | Stakeholders subsections.
data StkhldrSub

-- | May have a client.
[Client] :: CI -> Sentence -> StkhldrSub

-- | May have a customer.
[Cstmr] :: CI -> StkhldrSub

-- | Possible typographic conventions.
data TConvention

-- | How vectors are emphasized.
Vector :: Emphasis -> TConvention

-- | Verbatim for specialized conventions.
Verb :: Sentence -> TConvention

-- | Traceability Matices and Graphs section. Contains configurations
--   (<a>TraceConfig</a>).
newtype TraceabilitySec
TraceabilityProg :: [TraceConfig] -> TraceabilitySec

-- | For creating a table of symbols introduction
data TSIntro

-- | Typographic conventions used.
TypogConvention :: [TConvention] -> TSIntro

-- | Symbol ordering (defaults to alphabetical).
SymbOrder :: TSIntro

-- | Symbol conventions match specified literature.
SymbConvention :: [Literature] -> TSIntro

-- | Purpose of the Table of Symbols.
TSPurpose :: TSIntro

-- | Definition of vector components.
VectorUnits :: TSIntro

-- | For creating the table of units introduction.
data TUIntro

-- | System of units (defaults to SI).
System :: TUIntro

-- | Sentence about derived units being used alongside SI.
Derived :: TUIntro

-- | Purpose of the table of units.
TUPurpose :: TUIntro

-- | Creates a document from a document description, a title combinator
--   function, and system information.
mkDoc :: SRSDecl -> (IdeaDict -> IdeaDict -> Sentence) -> SystemInformation -> Document

-- | Helper for filling in the traceability matrix and graph information
--   into the system.
fillTraceSI :: SRSDecl -> SystemInformation -> SystemInformation

-- | Assuming a given <a>ChunkDB</a> with no traces and minimal/no
--   references, fill in for rest of system information. Currently fills in
--   references, traceability matrix information and <a>IdeaDict</a>s.
fillcdbSRS :: SRSDecl -> SystemInformation -> SystemInformation

-- | Recursively find all references in a section (meant for getting at
--   <a>LabelledContent</a>).
findAllRefs :: Section -> [Reference]

-- | A Lesson Plan notebook declaration is made up of all necessary
--   chapters (<a>LsnChapter</a>s).
type LsnDecl = [LsnChapter]

-- | Contains all the different chapters needed for a notebook lesson plan
--   (<a>LsnDecl</a>).
data LsnChapter
Intro :: Intro -> LsnChapter
LearnObj :: LearnObj -> LsnChapter
Review :: Review -> LsnChapter
CaseProb :: CaseProb -> LsnChapter
Example :: Example -> LsnChapter
Smmry :: Smmry -> LsnChapter
BibSec :: LsnChapter
Apndx :: Apndx -> LsnChapter
newtype Intro
IntrodProg :: [Contents] -> Intro
newtype LearnObj
LrnObjProg :: [Contents] -> LearnObj
newtype Review
ReviewProg :: [Contents] -> Review
newtype CaseProb
CaseProbProg :: [Contents] -> CaseProb
newtype Example
ExampleProg :: [Contents] -> Example
newtype Smmry
SmmryProg :: [Contents] -> Smmry
newtype Apndx
ApndxProg :: [Contents] -> Apndx

-- | Creates a notebook from a lesson description and system information.
mkNb :: LsnDecl -> (IdeaDict -> IdeaDict -> Sentence) -> SystemInformation -> Document

-- | Fields that should be displayed in definitions.
data Field
Label :: Field
Symbol :: Field
Units :: Field
DefiningEquation :: Field
Description :: Verbosity -> InclUnits -> Field
Input :: Field
Output :: Field
InConstraints :: Field
OutConstraints :: Field
Notes :: Field
Source :: Field
RefBy :: Field

-- | Synonym for a list of <a>Field</a>s.
type Fields = [Field]

-- | Determines whether to include or ignore units.
data InclUnits

-- | In description field (for other symbols).
IncludeUnits :: InclUnits

-- | Refers to the verbosity of statements.
data Verbosity

-- | Full Descriptions.
Verbose :: Verbosity

-- | Simple Description (do not redefine other symbols).
Succinct :: Verbosity

-- | Create a data definition using a list of fields, a database of
--   symbols, and a <a>QDefinition</a> (called automatically by
--   <tt>SCSSub</tt> program).
ddefn :: Fields -> SystemInformation -> DataDefinition -> LabelledContent

-- | Extracts traceability graph inforomation from filled-in
--   <a>SystemInformation</a>.
mkGraphInfo :: SystemInformation -> GraphInfo

-- | Create references to traceability graphs given an example name.
--   Primarily used for reference database in examples.
traceyGraphGetRefs :: String -> [Reference]

-- | Helpers to check if given argument has more than one peice of
--   information
--   
--   Contains traceability matrix assumptions, other assumptions,
--   refinement, and other requirements.
traceMatStandard :: SystemInformation -> [TraceConfig]

-- | Records other requirements. Converts the <a>SystemInformation</a> into
--   a <a>TraceConfig</a>.
traceMatOtherReq :: SystemInformation -> TraceConfig

-- | Creates a traceability map from document sections.
generateTraceMap :: [DocSection] -> TraceMap

-- | Helper that gets a table of constants from a <a>QDefinition</a>.
tableOfConstants :: [ConstQDef] -> LabelledContent

-- | Combines <a>purpDocPara1</a> and <a>developmentProcessParagraph</a>.
--   Verbosity controls if the <a>developmentProcessParagraph</a> is added
--   or not.
purpDoc :: CI -> Verbosity -> [Sentence]

-- | Default Reference Material section introduction.
intro :: Contents

-- | Helper for variants of <a>emptySectSent</a>
emptySectSentPlu :: NamedIdea n => [n] -> Sentence

-- | Helper for variants of <a>emptySectSent</a>
emptySectSentSing :: NamedIdea n => [n] -> Sentence

-- | Default is term and given introduction.
--   
--   Table of symbols constructor.
tsymb :: [TSIntro] -> RefTab

-- | Table of symbols constructor. Takes a custom function and
--   introduction.
tsymb'' :: [TSIntro] -> LFunc -> RefTab

-- | Makes a reference to the Table of Units.
unitTableRef :: Reference

-- | Table of units with an SI Name.
--   
--   Table of units constructors.
tunit :: [TUIntro] -> RefTab

-- | Table of units with SI name in the description column.
--   
--   Table of units constructors.
tunit' :: [TUIntro] -> RefTab

-- | Table of units with SI name in the description column.
--   
--   Table of units constructors.
tunitNone :: [TUIntro] -> RefTab

-- | Creates a <a>ConceptInstance</a> of input values.
inReq :: Sentence -> ConceptInstance

-- | Creates a generalized input-value table for the Requirements section.
inTable :: (Quantity i, MayHaveUnit i) => [i] -> LabelledContent

-- | Creates an Input Data Table for use in the Functional Requirments
--   section. Takes a list of wrapped variables and something that is
--   <a>Referable</a>.
mkInputPropsTable :: (Quantity i, MayHaveUnit i, HasShortName r, Referable r) => [i] -> r -> LabelledContent
mkQRTuple :: (HasOutput i, HasShortName i, Referable i) => [i] -> [(QuantityDict, Sentence)]
mkQRTupleRef :: (Quantity i, MayHaveUnit i, HasShortName r, Referable r) => [i] -> [r] -> [(QuantityDict, Sentence)]

-- | Creates a table for use in the Functional Requirments section. Takes a
--   list of tuples containing variables and sources, a label, and a
--   caption.
mkValsSourceTable :: (Quantity i, MayHaveUnit i) => [(i, Sentence)] -> String -> Sentence -> LabelledContent

-- | Reference for the Required Inputs table.
reqInputsRef :: Reference

-- | Common Non-Functional Requirement for Maintainability. Takes in a
--   Reference Address (<a>Space</a>), a percent value (<a>Space</a>), and
--   a label (<a>Space</a>).
mkMaintainableNFR :: String -> Integer -> String -> ConceptInstance

-- | Common Non-Functional Requirement for Portability.
mkPortableNFR :: String -> [String] -> String -> ConceptInstance

-- | General <a>Sentence</a> that describes some auxiliary specifications
--   of the system.
auxSpecSent :: Sentence

-- | Similar to <a>termDefnF</a>, except does not take definitions from the
--   list of terms.
termDefnF' :: Maybe Sentence -> [Contents] -> Section

-- | Creates the input Data Constraints Table.
inDataConstTbl :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => [c] -> LabelledContent

-- | Creates the output Data Constraints Table.
outDataConstTbl :: (Quantity c, Constrained c) => [c] -> LabelledContent

-- | Extracts <a>Sentence</a>s from a document description.
getDocDesc :: DocDesc -> [Sentence]

-- | Extracts expressions from the document description (<a>DocDesc</a>)
--   and default <a>DLPlate</a>.
egetDocDesc :: DocDesc -> [ModelExpr]

-- | All section references used in creating a Software Requirements
--   Specification (SRS).
secRefs :: [Reference]


-- | Re-export functions common to all SRS-related examples. This aims to
--   reduce clutter at the top of every <tt>Body.hs</tt> file in the Drasil
--   examples. If an import is changed here, it will be changed for every
--   example.
module Drasil.SRSDocument

-- | for listing <a>QDefinition</a>s in <a>SystemInformation</a>.
data () => Block a
Parallel :: a -> [a] -> Block a

-- | Our chunk databases. Must contain all maps needed in an example. In
--   turn, these maps must contain every chunk definition or concept used
--   in its respective example, else an error is thrown.
data () => ChunkDB

-- | Database for internal references. Contains citations and referrable
--   concepts.
data () => ReferenceDB

-- | Data structure for holding all of the requisite information about a
--   system to be used in artifact generation.
data () => SystemInformation
[SI] :: forall a b c e f h i j. (CommonIdea a, Idea a, Idea b, HasName c, Quantity e, Eq e, MayHaveUnit e, Quantity f, MayHaveUnit f, Concept f, Eq f, Quantity h, MayHaveUnit h, Quantity i, MayHaveUnit i, HasUID j, Constrained j) => a -> b -> [c] -> Purpose -> Background -> [e] -> [f] -> [InstanceModel] -> [DataDefinition] -> [String] -> [h] -> [i] -> [Block SimpleQDef] -> [j] -> [ConstQDef] -> ChunkDB -> ChunkDB -> ReferenceDB -> SystemInformation

-- | Smart constructor for chunk databases. Takes in the following:
--   
--   <ul>
--   <li>[<a>Quantity</a>] (for <a>SymbolMap</a>),</li>
--   <li><a>NamedIdea</a>s (for <a>TermMap</a>),</li>
--   <li><a>Concept</a>s (for <a>ConceptMap</a>),</li>
--   <li>Units (something that <a>IsUnit</a> for <a>UnitMap</a>),</li>
--   <li><a>DataDefinition</a>s (for <a>DatadefnMap</a>),</li>
--   <li><a>InstanceModel</a>s (for <a>InsModelMap</a>),</li>
--   <li><a>GenDefn</a>s (for <a>GendefMap</a>),</li>
--   <li><a>TheoryModel</a>s (for <a>TheoryModelMap</a>),</li>
--   <li><a>ConceptInstance</a>s (for <a>ConceptInstanceMap</a>),</li>
--   <li><a>Section</a>s (for <a>SectionMap</a>),</li>
--   <li><a>LabelledContent</a>s (for <a>LabelledContentMap</a>).</li>
--   </ul>
cdb :: (Quantity q, MayHaveUnit q, Idea t, Concept c, IsUnit u) => [q] -> [t] -> [c] -> [u] -> [DataDefinition] -> [InstanceModel] -> [GenDefn] -> [TheoryModel] -> [ConceptInstance] -> [Section] -> [LabelledContent] -> [Reference] -> ChunkDB

-- | Smart constructor for creating a reference database from a
--   bibliography and concept instances.
rdb :: BibRef -> [ConceptInstance] -> ReferenceDB

-- | Printing information contains a database, a stage, and a printing
--   configuration.
data () => PrintingInformation
PI :: ChunkDB -> Stage -> PrintingConfiguration -> PrintingInformation
[_ckdb] :: PrintingInformation -> ChunkDB
[_stg] :: PrintingInformation -> Stage
[_configuration] :: PrintingInformation -> PrintingConfiguration

-- | Default configuration is for engineering.
defaultConfiguration :: PrintingConfiguration

-- | Builds a document's printing information based on the system
--   information.
piSys :: SystemInformation -> Stage -> PrintingConfiguration -> PrintingInformation

-- | A Software Requirements Specification Declaration is made up of all
--   necessary sections (<a>DocSection</a>s).
type SRSDecl = [DocSection]

-- | Contains all the different sections needed for a full SRS
--   (<a>SRSDecl</a>).
data DocSection

-- | Table of Contents
TableOfContents :: DocSection

-- | Reference.
RefSec :: RefSec -> DocSection

-- | Introduction.
IntroSec :: IntroSec -> DocSection

-- | Stakeholders.
StkhldrSec :: StkhldrSec -> DocSection

-- | General System Description.
GSDSec :: GSDSec -> DocSection

-- | Specific System Description.
SSDSec :: SSDSec -> DocSection

-- | Requirements.
ReqrmntSec :: ReqrmntSec -> DocSection

-- | Likely Changes.
LCsSec :: DocSection

-- | Unlikely Changes.
UCsSec :: DocSection

-- | Traceability.
TraceabilitySec :: TraceabilitySec -> DocSection

-- | Auxiliary Constants.
AuxConstntSec :: AuxConstntSec -> DocSection

-- | Bibliography.
Bibliography :: DocSection

-- | Appendix.
AppndxSec :: AppndxSec -> DocSection

-- | Off the Shelf Solutions.
OffShelfSolnsSec :: OffShelfSolnsSec -> DocSection

-- | Requirements section (wraps <a>ReqsSub</a> subsections).
newtype ReqrmntSec
ReqsProg :: [ReqsSub] -> ReqrmntSec

-- | Requirements subsections.
data ReqsSub

-- | Functional requirements. <a>LabelledContent</a> for tables (includes
--   input values).
[FReqsSub] :: Sentence -> [LabelledContent] -> ReqsSub

-- | Functional requirements. <a>LabelledContent</a> for tables (no input
--   values).
[FReqsSub'] :: [LabelledContent] -> ReqsSub

-- | Non-Functional requirements.
[NonFReqsSub] :: ReqsSub

-- | Problem Description subsections.
data PDSub

-- | Terms and Definitions.
[TermsAndDefs] :: Concept c => Maybe Sentence -> [c] -> PDSub

-- | Physical System Description.
[PhySysDesc] :: Idea a => a -> [Sentence] -> LabelledContent -> [Contents] -> PDSub

-- | Goals.
[Goals] :: [Sentence] -> PDSub

-- | Problem Description section.
data ProblemDescription
[PDProg] :: Sentence -> [Section] -> [PDSub] -> ProblemDescription

-- | Specific System Description section (wraps <a>SSDSub</a> subsections).
newtype SSDSec
SSDProg :: [SSDSub] -> SSDSec

-- | Specific System Description subsections.
data SSDSub

-- | Problem description.
[SSDProblem] :: ProblemDescription -> SSDSub

-- | Solution characteristics.
[SSDSolChSpec] :: SolChSpec -> SSDSub

-- | Solution Characteristics Specification subsections.
data SCSSub

-- | Assumptions.
[Assumptions] :: SCSSub

-- | Theory models.
[TMs] :: [Sentence] -> Fields -> SCSSub

-- | General definitions.
[GDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Data definitions.
[DDs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Instance models.
[IMs] :: [Sentence] -> Fields -> DerivationDisplay -> SCSSub

-- | Constraints.
[Constraints] :: (HasUncertainty c, Quantity c, Constrained c, HasReasVal c, MayHaveUnit c) => Sentence -> [c] -> SCSSub

-- | Properties of a correct solution.
[CorrSolnPpties] :: (Quantity c, Constrained c) => [c] -> [Contents] -> SCSSub

-- | Solution Characteristics Specification section (wraps <a>SCSSub</a>
--   subsections).
data SolChSpec
[SCSProg] :: [SCSSub] -> SolChSpec

-- | Appendix section.
newtype AppndxSec
AppndxProg :: [Contents] -> AppndxSec

-- | Values of Auxiliary Constants section.
data AuxConstntSec
AuxConsProg :: CI -> [ConstQDef] -> AuxConstntSec

-- | Choose whether to show or hide the derivation of an expression.
data DerivationDisplay
ShowDerivation :: DerivationDisplay
HideDerivation :: DerivationDisplay

-- | How to handle emphasis of words.
data Emphasis
Bold :: Emphasis
Italics :: Emphasis

-- | Off-The-Shelf Solutions section.
newtype OffShelfSolnsSec
OffShelfSolnsProg :: [Contents] -> OffShelfSolnsSec

-- | General System Description section (wraps <a>GSDSub</a> subsections).
newtype GSDSec
GSDProg :: [GSDSub] -> GSDSec

-- | General System Description subsections.
data GSDSub

-- | System context.
[SysCntxt] :: [Contents] -> GSDSub

-- | User characteristics.
[UsrChars] :: [Contents] -> GSDSub

-- | System constraints.
[SystCons] :: [Contents] -> [Section] -> GSDSub

-- | Introduction section. Contents are top level followed by a list of
--   subsections.
data IntroSec

-- | Temporary, will be modified once we've figured out more about the
--   section.
IntroProg :: Sentence -> Sentence -> [IntroSub] -> IntroSec

-- | Introduction subsections.
data IntroSub

-- | Describes purpose of the system.
[IPurpose] :: [Sentence] -> IntroSub

-- | Describes scope of the system.
[IScope] :: Sentence -> IntroSub

-- | Describes characteristics of the system.
[IChar] :: [Sentence] -> [Sentence] -> [Sentence] -> IntroSub

-- | Organises the section.
[IOrgSec] :: CI -> Section -> Sentence -> IntroSub

-- | Lens (lookup) functions (currently for TSymb).
data LFunc
[Term] :: LFunc
[Defn] :: LFunc
[TermExcept] :: [DefinedQuantityDict] -> LFunc
[DefnExcept] :: [DefinedQuantityDict] -> LFunc
[TAD] :: LFunc

-- | Types of literature.
data Literature

-- | Literature (with a Topic).
Lit :: Topic -> Literature

-- | Existing documentation for (plural version of topic).
Doc' :: Topic -> Literature

-- | Manual.
Manual :: Topic -> Literature

-- | Reference section. Contents are top level followed by a list of
--   subsections.
data RefSec
RefProg :: Contents -> [RefTab] -> RefSec

-- | Reference subsections (tables) made out of units or symbols (can be
--   customized).
data RefTab

-- | Default table of units.
[TUnits] :: RefTab

-- | Customized introduction.
[TUnits'] :: [TUIntro] -> ([UnitDefn] -> LabelledContent) -> RefTab

-- | Adds an introduction for a table of symbols.
[TSymb] :: [TSIntro] -> RefTab

-- | Allows Lens functions in addition to an introduction for a table of
--   symbols.
[TSymb'] :: LFunc -> [TSIntro] -> RefTab

-- | Default.
[TAandA] :: RefTab

-- | Stakeholders section (wraps stakeholders subsections
--   <a>StkhldrSub</a>).
newtype StkhldrSec
StkhldrProg :: [StkhldrSub] -> StkhldrSec

-- | Stakeholders subsections.
data StkhldrSub

-- | May have a client.
[Client] :: CI -> Sentence -> StkhldrSub

-- | May have a customer.
[Cstmr] :: CI -> StkhldrSub

-- | Possible typographic conventions.
data TConvention

-- | How vectors are emphasized.
Vector :: Emphasis -> TConvention

-- | Verbatim for specialized conventions.
Verb :: Sentence -> TConvention

-- | Traceability Matices and Graphs section. Contains configurations
--   (<a>TraceConfig</a>).
newtype TraceabilitySec
TraceabilityProg :: [TraceConfig] -> TraceabilitySec

-- | For creating a table of symbols introduction
data TSIntro

-- | Typographic conventions used.
TypogConvention :: [TConvention] -> TSIntro

-- | Symbol ordering (defaults to alphabetical).
SymbOrder :: TSIntro

-- | Symbol conventions match specified literature.
SymbConvention :: [Literature] -> TSIntro

-- | Purpose of the Table of Symbols.
TSPurpose :: TSIntro

-- | Definition of vector components.
VectorUnits :: TSIntro

-- | For creating the table of units introduction.
data TUIntro

-- | System of units (defaults to SI).
System :: TUIntro

-- | Sentence about derived units being used alongside SI.
Derived :: TUIntro

-- | Purpose of the table of units.
TUPurpose :: TUIntro

-- | Fields that should be displayed in definitions.
data Field
Label :: Field
Symbol :: Field
Units :: Field
DefiningEquation :: Field
Description :: Verbosity -> InclUnits -> Field
Input :: Field
Output :: Field
InConstraints :: Field
OutConstraints :: Field
Notes :: Field
Source :: Field
RefBy :: Field

-- | Synonym for a list of <a>Field</a>s.
type Fields = [Field]

-- | Determines whether to include or ignore units.
data InclUnits

-- | In description field (for other symbols).
IncludeUnits :: InclUnits

-- | Refers to the verbosity of statements.
data Verbosity

-- | Full Descriptions.
Verbose :: Verbosity

-- | Simple Description (do not redefine other symbols).
Succinct :: Verbosity

-- | Creates a document from a document description, a title combinator
--   function, and system information.
mkDoc :: SRSDecl -> (IdeaDict -> IdeaDict -> Sentence) -> SystemInformation -> Document

-- | Assuming a given <a>ChunkDB</a> with no traces and minimal/no
--   references, fill in for rest of system information. Currently fills in
--   references, traceability matrix information and <a>IdeaDict</a>s.
fillcdbSRS :: SRSDecl -> SystemInformation -> SystemInformation

-- | Default Reference Material section introduction.
intro :: Contents

-- | Helpers to check if given argument has more than one peice of
--   information
--   
--   Contains traceability matrix assumptions, other assumptions,
--   refinement, and other requirements.
traceMatStandard :: SystemInformation -> [TraceConfig]

-- | Default is term and given introduction.
--   
--   Table of symbols constructor.
tsymb :: [TSIntro] -> RefTab

-- | Table of symbols constructor. Takes a custom function and
--   introduction.
tsymb'' :: [TSIntro] -> LFunc -> RefTab

-- | Combines <a>purpDocPara1</a> and <a>developmentProcessParagraph</a>.
--   Verbosity controls if the <a>developmentProcessParagraph</a> is added
--   or not.
purpDoc :: CI -> Verbosity -> [Sentence]
