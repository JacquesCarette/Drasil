-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Build System SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-build
@version 0.1.1.0


-- | Defines types and functions for generating Makefiles.
module Build.Drasil.Make.MakeString

-- | Type synonym for variable names.
type VarName = String

-- | Type synonym for variable values.
type VarVal = String
data MakeString

-- | A string for Makefiles.
Mr :: String -> MakeString

-- | Holds a Makefile variable.
Mv :: MVar -> MakeString

-- | Concatenates two <a>MakeString</a>s.
Mc :: MakeString -> MakeString -> MakeString

-- | For creating Makefile variables.
data MVar

-- | Operating System specific variable. Holds information for Windows,
--   Mac, and Linux systems.
Os :: VarName -> VarVal -> VarVal -> VarVal -> MVar

-- | Implicit OS.
Implicit :: VarName -> MVar

-- | Independent of OS.
Free :: VarName -> MVar

-- | Concatenates two <a>MakeString</a>s with a space in between.
(+:+) :: MakeString -> MakeString -> MakeString

-- | Renders a <a>MakeString</a>. Variables have the form
--   "$(<tt>var</tt>)".
renderMS :: MakeString -> String

-- | Renders variables. Takes in a function for the variable, and the type
--   of variable.
renderVar :: (String -> String) -> MVar -> String

-- | Constructor for converting a <a>String</a> into a <a>MakeString</a>.
makeS :: String -> MakeString

-- | Constructor for Windows OS variables.
mkWindowsVar :: VarName -> VarVal -> VarVal -> MakeString

-- | Constructor for OS variables.
mkOSVar :: VarName -> VarVal -> VarVal -> VarVal -> MakeString

-- | Constructor for <a>Implicit</a> variables.
mkImplicitVar :: VarName -> MakeString

-- | Constructor for <a>Free</a> variables.
mkFreeVar :: VarName -> MakeString
instance GHC.Classes.Eq Build.Drasil.Make.MakeString.MVar
instance GHC.Base.Semigroup Build.Drasil.Make.MakeString.MakeString
instance GHC.Base.Monoid Build.Drasil.Make.MakeString.MakeString


-- | Defines a Makefile abstract syntax tree.
module Build.Drasil.Make.AST

-- | A Makefile is made up of Makefile rules.
newtype Makefile
M :: [Rule] -> Makefile

-- | A Makefile Rule can have comments and commands but needs a target,
--   dependencies, and a type.
data Rule
R :: Annotation -> Target -> Dependencies -> Type -> [Command] -> Rule

-- | A command is made up of <a>MakeString</a>s and command operators.
data Command
C :: MakeString -> [CommandOpts] -> Command

-- | Ignore the return code from the system.
data CommandOpts
IgnoreReturnCode :: CommandOpts

-- | Type of rule, either abstract or file-oriented.
data Type
Abstract :: Type
File :: Type

-- | A Makefile Annotation is made of 0 or more <a>Comment</a>s
type Annotation = [Comment]

-- | A Makefile target is made from a <a>MakeString</a>.
type Target = MakeString

-- | Dependencies are made up of 0 or more <a>Target</a>s.
type Dependencies = [Target]

-- | Creates a Rule which results in a file being created.
mkFile :: Annotation -> Target -> Dependencies -> [Command] -> Rule

-- | Creates an abstract Rule not associated to a specific file.
mkRule :: Annotation -> Target -> Dependencies -> [Command] -> Rule

-- | Creates a Command which fails the make process if it does not return
--   zero.
mkCheckedCommand :: MakeString -> Command

-- | Creates a command which executes and ignores the return code.
mkCommand :: MakeString -> Command
instance GHC.Classes.Eq Build.Drasil.Make.AST.CommandOpts
instance GHC.Classes.Eq Build.Drasil.Make.AST.Type


-- | Defines classes and constructors for Makefile generators.
module Build.Drasil.Make.Import

-- | Members can be transformed into a make rule.
class RuleTransformer c
makeRule :: RuleTransformer c => c -> [Rule]

-- | Creates a Makefile (calls <a>makeRules</a>).
toMake :: RuleTransformer c => [c] -> Makefile

-- | Helper for creating make rules for different document types.
makeRules :: RuleTransformer c => [c] -> [Rule]


-- | Helper functions for creating Makefiles.
module Build.Drasil.Make.Helpers

-- | Assignment operator ("=").
($=) :: MVar -> String -> Doc

-- | Extracts information for Windows OS from a variable.
win :: MVar -> String

-- | Extracts information for Mac OS from a variable.
mac :: MVar -> String

-- | Extracts information for Linux OS from a variable.
linux :: MVar -> String

-- | Defines variables dependent on OS.
defineOsVars :: (MVar -> String) -> [MVar] -> Doc

-- | Helper for rendering OS-specific variables.
osDefinitions :: [MVar] -> Doc

-- | Deduplicates a list of variables and ensures duplicate variables have
--   the same definition.
uniqueVars :: [MVar] -> [MVar]

-- | Extracts the variable name from a Makefile variable.
varName :: MVar -> String

-- | Extracts variables from a Makefile rule.
extractVars :: Rule -> [MVar]

-- | Gets one or more variables from a MakeString.
getVars :: MakeString -> [MVar]

-- | Checks if a variable is OS dependent.
isOsVar :: MVar -> Bool

-- | Helper for prepending common features to a Makefile.
addCommonFeatures :: [Rule] -> Doc -> Doc

-- | Recipes must be indented with tabs.
tab :: Doc

-- | Makefile Syntax Indent (i.e. non recipes).
msIndent :: Doc -> Doc


-- | Defines printers for generating Makefiles.
module Build.Drasil.Make.Print

-- | Generates the makefile by calling <a>build</a> after <a>toMake</a>.
genMake :: RuleTransformer c => [c] -> Doc

-- | Renders the makefile rules.
build :: Makefile -> Doc

-- | Renders specific makefile rules. Called by <a>build</a>.
printRule :: Rule -> Doc

-- | Renders a makefile comment
printComment :: Comment -> Doc
wrapSettings :: WrapSettings

-- | Renders multiple comments
printComments :: Annotation -> Doc

-- | Gathers all rules to abstract targets and tags them as phony.
printPhony :: [Rule] -> Doc

-- | Renders targets with their dependencies.
printTarget :: Target -> Dependencies -> Doc

-- | Renders a makefile command.
printCmd :: Command -> Doc

-- | Renders multiple commands.
printCmds :: [Command] -> Doc


-- | Re-export all contents in drasil-build for external use.
module Build.Drasil

-- | Members can be transformed into a make rule.
class RuleTransformer c
makeRule :: RuleTransformer c => c -> [Rule]

-- | A Makefile Annotation is made of 0 or more <a>Comment</a>s
type Annotation = [Comment]

-- | A command is made up of <a>MakeString</a>s and command operators.
data Command

-- | Creates a Command which fails the make process if it does not return
--   zero.
mkCheckedCommand :: MakeString -> Command

-- | Creates a command which executes and ignores the return code.
mkCommand :: MakeString -> Command

-- | Dependencies are made up of 0 or more <a>Target</a>s.
type Dependencies = [Target]

-- | A Makefile Rule can have comments and commands but needs a target,
--   dependencies, and a type.
data Rule

-- | Creates a Rule which results in a file being created.
mkFile :: Annotation -> Target -> Dependencies -> [Command] -> Rule

-- | Creates an abstract Rule not associated to a specific file.
mkRule :: Annotation -> Target -> Dependencies -> [Command] -> Rule
data MakeString

-- | Concatenates two <a>MakeString</a>s with a space in between.
(+:+) :: MakeString -> MakeString -> MakeString

-- | Constructor for converting a <a>String</a> into a <a>MakeString</a>.
makeS :: String -> MakeString

-- | Constructor for <a>Free</a> variables.
mkFreeVar :: VarName -> MakeString

-- | Constructor for <a>Implicit</a> variables.
mkImplicitVar :: VarName -> MakeString

-- | Constructor for Windows OS variables.
mkWindowsVar :: VarName -> VarVal -> VarVal -> MakeString

-- | Constructor for OS variables.
mkOSVar :: VarName -> VarVal -> VarVal -> VarVal -> MakeString

-- | Generates the makefile by calling <a>build</a> after <a>toMake</a>.
genMake :: RuleTransformer c => [c] -> Doc
