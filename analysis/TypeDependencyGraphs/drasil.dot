digraph alltypes {
	subgraph ast {
		subgraph rule{
		Rule	[shape=oval, color=darkviolet, label="Rule"];
		Rule -> Annotation;
		Rule -> Target;
		Rule -> Dependencies;
		Rule -> Type;
		Rule -> Command;
		}
		subgraph command{
		Command	[shape=oval, color=darkviolet, label="Command"];
		Command -> MakeString;
		Command -> CommandOpts;
		}
		subgraph commandopts{
		CommandOpts	[shape=oval, color=darkviolet, label="CommandOpts"];
		}
		subgraph type{
		Type	[shape=oval, color=darkviolet, label="Type"];
		}
		subgraph makefile{
		Makefile	[shape=oval, color=darkgreen, label="Makefile"];
		Makefile -> Rule;
		}
		subgraph annotation{
		Annotation	[shape=oval, color=red2, label="Annotation"];
		Annotation -> Comment;
		}
		subgraph target{
		Target	[shape=oval, color=red2, label="Target"];
		Target -> MakeString;
		}
		subgraph dependencies{
		Dependencies	[shape=oval, color=red2, label="Dependencies"];
		Dependencies -> Target;
		}
	}
	subgraph helpers {
	}
	subgraph import {
	}
	subgraph makestring {
		subgraph makestring{
		MakeString	[shape=oval, color=darkviolet, label="MakeString"];
		MakeString -> String;
		}
		subgraph mvar{
		MVar	[shape=oval, color=darkviolet, label="MVar"];
		MVar -> VarName;
		MVar -> VarVal;
		}
		subgraph varname{
		VarName	[shape=oval, color=red2, label="VarName"];
		VarName -> String;
		}
		subgraph varval{
		VarVal	[shape=oval, color=red2, label="VarVal"];
		VarVal -> String;
		}
	}
	subgraph print {
	}
	subgraph drails {
	}
	subgraph odelibraries {
	}
	subgraph code {
	}
	subgraph codebaes {
	}
	subgraph codedefinition {
		subgraph definitiontype{
		DefinitionType	[shape=oval, color=cyan3, label="DefinitionType"];
		DefinitionType -> CodeChunk;
		DefinitionType -> CodeExpr;
		DefinitionType -> DefinitionType;
		}
	}
	subgraph contraintmaps {
		subgraph constraintce{
		ConstraintCE	[shape=oval, color=red2, label="ConstraintCE"];
		ConstraintCE -> ConstraintCodeExpr;
		}
		subgraph constraintcemap{
		ConstraintCEMap	[shape=oval, color=red2, label="ConstraintCEMap"];
		ConstraintCEMap -> MapUIDConstraintCE;
		}
	}
	subgraph namedargument {
		subgraph namedargument{
		NamedArgument	[shape=oval, color=darkgreen, label="NamedArgument"];
		NamedArgument -> QuantityDict;
		}
	}
	subgraph parameter {
		subgraph passby{
		PassBy	[shape=oval, color=cyan3, label="PassBy"];
		PassBy -> CodeChunk;
		PassBy -> PassBy;
		}
	}
	subgraph ast {
		subgraph docconfig{
		DocConfig	[shape=oval, color=cyan3, label="DocConfig"];
		DocConfig -> String;
		DocConfig -> Bool;
		}
		subgraph buildname{
		BuildName	[shape=oval, color=darkviolet, label="BuildName"];
		BuildName -> BuildName;
		BuildName -> Ext;
		}
		subgraph ext{
		Ext	[shape=oval, color=darkviolet, label="Ext"];
		Ext -> MakeString;
		}
		subgraph builddependencies{
		BuildDependencies	[shape=oval, color=darkviolet, label="BuildDependencies"];
		BuildDependencies -> BuildName;
		}
		subgraph buildconfig{
		BuildConfig	[shape=oval, color=darkviolet, label="BuildConfig"];
		}
		subgraph runtype{
		RunType	[shape=oval, color=darkviolet, label="RunType"];
		RunType -> CommandFragment;
		}
		subgraph runnable{
		Runnable	[shape=oval, color=darkviolet, label="Runnable"];
		Runnable -> BuildName;
		Runnable -> NameOpts;
		Runnable -> RunType;
		}
		subgraph commandfragment{
		CommandFragment	[shape=oval, color=red2, label="CommandFragment"];
		CommandFragment -> MakeString;
		}
		subgraph buildcommand{
		BuildCommand	[shape=oval, color=red2, label="BuildCommand"];
		BuildCommand -> CommandFragment;
		}
		subgraph interpretercommand{
		InterpreterCommand	[shape=oval, color=red2, label="InterpreterCommand"];
		InterpreterCommand -> String;
		}
		subgraph interpreteroption{
		InterpreterOption	[shape=oval, color=red2, label="InterpreterOption"];
		InterpreterOption -> String;
		}
	}
	subgraph import {
		subgraph codeharness{
		CodeHarness	[shape=oval, color=cyan3, label="CodeHarness"];
		CodeHarness -> MaybeBuildConfig;
		CodeHarness -> MaybeRunnable;
		CodeHarness -> GOOLState;
		CodeHarness -> ProgData;
		CodeHarness -> MaybeDocConfig;
		}
	}
	subgraph import {
		subgraph optimizechoice{
		OptimizeChoice	[shape=oval, color=red2, label="OptimizeChoice"];
		OptimizeChoice -> Doc;
		}
		subgraph projname{
		ProjName	[shape=oval, color=red2, label="ProjName"];
		ProjName -> String;
		}
	}
	subgraph csarprendererh {
		subgraph csharpprojecta{
		CSharpProjecta	[shape=oval, color=darkgreen, label="CSharpProjecta"];
		CSharpProjecta -> a;
		}
		subgraph packagecsharpproject{
		PackageCSharpProject	[shape=oval, color=red2, label="PackageCSharpProject"];
		PackageCSharpProject -> PackData;
		}
		subgraph auxiliarycsharpproject{
		AuxiliaryCSharpProject	[shape=oval, color=red2, label="AuxiliaryCSharpProject"];
		AuxiliaryCSharpProject -> AuxData;
		}
		subgraph auxhelpercsharpproject{
		AuxHelperCSharpProject	[shape=oval, color=red2, label="AuxHelperCSharpProject"];
		AuxHelperCSharpProject -> Doc;
		}
	}
	subgraph cpprenderer {
		subgraph cppprojecta{
		CppProjecta	[shape=oval, color=darkgreen, label="CppProjecta"];
		CppProjecta -> a;
		}
		subgraph packagecppproject{
		PackageCppProject	[shape=oval, color=red2, label="PackageCppProject"];
		PackageCppProject -> PackData;
		}
		subgraph auxiliarycppproject{
		AuxiliaryCppProject	[shape=oval, color=red2, label="AuxiliaryCppProject"];
		AuxiliaryCppProject -> AuxData;
		}
		subgraph auxhelpercppproject{
		AuxHelperCppProject	[shape=oval, color=red2, label="AuxHelperCppProject"];
		AuxHelperCppProject -> Doc;
		}
	}
	subgraph javarenderer {
		subgraph javaprojecta{
		JavaProjecta	[shape=oval, color=darkgreen, label="JavaProjecta"];
		JavaProjecta -> a;
		}
		subgraph packagejavaproject{
		PackageJavaProject	[shape=oval, color=red2, label="PackageJavaProject"];
		PackageJavaProject -> PackData;
		}
		subgraph auxiliaryjavaproject{
		AuxiliaryJavaProject	[shape=oval, color=red2, label="AuxiliaryJavaProject"];
		AuxiliaryJavaProject -> AuxData;
		}
		subgraph auxhelperjavaproject{
		AuxHelperJavaProject	[shape=oval, color=red2, label="AuxHelperJavaProject"];
		AuxHelperJavaProject -> Doc;
		}
	}
	subgraph languagepolymorpich {
	}
	subgraph pytonrendererh {
		subgraph pythonprojecta{
		PythonProjecta	[shape=oval, color=darkgreen, label="PythonProjecta"];
		PythonProjecta -> a;
		}
		subgraph packagepythonproject{
		PackagePythonProject	[shape=oval, color=red2, label="PackagePythonProject"];
		PackagePythonProject -> PackData;
		}
		subgraph auxiliarypythonproject{
		AuxiliaryPythonProject	[shape=oval, color=red2, label="AuxiliaryPythonProject"];
		AuxiliaryPythonProject -> AuxData;
		}
		subgraph auxhelperpythonproject{
		AuxHelperPythonProject	[shape=oval, color=red2, label="AuxHelperPythonProject"];
		AuxHelperPythonProject -> Doc;
		}
	}
	subgraph swiftrenderer {
		subgraph swiftprojecta{
		SwiftProjecta	[shape=oval, color=darkgreen, label="SwiftProjecta"];
		SwiftProjecta -> a;
		}
		subgraph packageswiftproject{
		PackageSwiftProject	[shape=oval, color=red2, label="PackageSwiftProject"];
		PackageSwiftProject -> PackData;
		}
		subgraph auxiliaryswiftproject{
		AuxiliarySwiftProject	[shape=oval, color=red2, label="AuxiliarySwiftProject"];
		AuxiliarySwiftProject -> AuxData;
		}
		subgraph auxhelperswiftproject{
		AuxHelperSwiftProject	[shape=oval, color=red2, label="AuxHelperSwiftProject"];
		AuxHelperSwiftProject -> Doc;
		}
	}
	subgraph clasinterfaces {
		subgraph readmeinfo{
		ReadMeInfo	[shape=oval, color=cyan3, label="ReadMeInfo"];
		ReadMeInfo -> LangAbbrev;
		ReadMeInfo -> LangVers;
		ReadMeInfo -> MaybeString;
		ReadMeInfo -> ImplementationType;
		ReadMeInfo -> Name;
		ReadMeInfo -> FilePath;
		ReadMeInfo -> Contributor;
		ReadMeInfo -> CaseName;
		ReadMeInfo -> ExamplePurpose;
		ReadMeInfo -> ExampleDescr;
		ReadMeInfo -> Int;
		ReadMeInfo -> InFile;
		}
		subgraph langabbrev{
		LangAbbrev	[shape=oval, color=red2, label="LangAbbrev"];
		LangAbbrev -> String;
		}
		subgraph langvers{
		LangVers	[shape=oval, color=red2, label="LangVers"];
		LangVers -> String;
		}
		subgraph casename{
		CaseName	[shape=oval, color=red2, label="CaseName"];
		CaseName -> String;
		}
		subgraph examplepurpose{
		ExamplePurpose	[shape=oval, color=red2, label="ExamplePurpose"];
		ExamplePurpose -> String;
		}
		subgraph exampledescr{
		ExampleDescr	[shape=oval, color=red2, label="ExampleDescr"];
		ExampleDescr -> String;
		}
		subgraph contributor{
		Contributor	[shape=oval, color=red2, label="Contributor"];
		Contributor -> String;
		}
		subgraph infile{
		InFile	[shape=oval, color=red2, label="InFile"];
		InFile -> String;
		}
		subgraph outfile{
		OutFile	[shape=oval, color=red2, label="OutFile"];
		OutFile -> String;
		}
	}
	subgraph data {
		subgraph auxdata{
		AuxData	[shape=oval, color=cyan3, label="AuxData"];
		AuxData -> FilePath;
		AuxData -> Doc;
		}
		subgraph packdata{
		PackData	[shape=oval, color=cyan3, label="PackData"];
		PackData -> ProgData;
		PackData -> AuxData;
		}
	}
	subgraph languagerenderer {
	}
	subgraph configparers {
		subgraph configuration{
		Configuration	[shape=oval, color=cyan3, label="Configuration"];
		Configuration -> String;
		Configuration -> MaybeString;
		Configuration -> Options;
		}
	}
	subgraph comments {
	}
	subgraph conceptmatch {
	}
	subgraph decriptionss {
	}
	subgraph drailstates {
		subgraph drasilstate{
		DrasilState	[shape=oval, color=cyan3, label="DrasilState"];
		DrasilState -> CodeSpec;
		DrasilState -> Modularity;
		DrasilState -> ImplementationType;
		DrasilState -> Structure;
		DrasilState -> ConstantStructure;
		DrasilState -> ConstantRepr;
		DrasilState -> MatchedConceptMap;
		DrasilState -> MatchedSpaces;
		DrasilState -> ConstraintBehaviour;
		DrasilState -> Comments;
		DrasilState -> Verbosity;
		DrasilState -> String;
		DrasilState -> Logging;
		DrasilState -> AuxFile;
		DrasilState -> Expr;
		DrasilState -> InternalConceptName;
		DrasilState -> Mod;
		DrasilState -> Name;
		DrasilState -> ExtLibMap;
		DrasilState -> FilePath;
		DrasilState -> ModExportMap;
		DrasilState -> ClassDefinitionMap;
		DrasilState -> SetName;
		DrasilState -> Int;
		DrasilState -> Doc;
		DrasilState -> Space;
		}
		subgraph matchedspaces{
		MatchedSpaces	[shape=oval, color=red2, label="MatchedSpaces"];
		MatchedSpaces -> SpaceGenStateCodeType;
		}
		subgraph extlibmap{
		ExtLibMap	[shape=oval, color=red2, label="ExtLibMap"];
		ExtLibMap -> MapStringExtLibState;
		}
		subgraph modexportmap{
		ModExportMap	[shape=oval, color=red2, label="ModExportMap"];
		ModExportMap -> MapStringString;
		}
		subgraph classdefinitionmap{
		ClassDefinitionMap	[shape=oval, color=red2, label="ClassDefinitionMap"];
		ClassDefinitionMap -> MapStringString;
		}
		subgraph genstate{
		GenState	[shape=oval, color=red2, label="GenState"];
		GenState -> StateDrasilState;
		}
		subgraph modexp{
		ModExp	[shape=oval, color=red2, label="ModExp"];
		ModExp -> StringString;
		}
		subgraph classdef{
		ClassDef	[shape=oval, color=red2, label="ClassDef"];
		ClassDef -> StringString;
		}
	}
	subgraph functioncalls {
	}
	subgraph genode {
		subgraph odegeninfo{
		ODEGenInfo	[shape=oval, color=red2, label="ODEGenInfo"];
		ODEGenInfo -> MaybeFilePathNameExtLibStateNameVersion;
		}
	}
	subgraph generategool {
		subgraph classtype{
		ClassType	[shape=oval, color=darkviolet, label="ClassType"];
		ClassType -> OOProg;
		ClassType -> r;
		ClassType -> ClassType;
		ClassType -> Name;
		ClassType -> Maybe;
		ClassType -> Description;
		}
	}
	subgraph generator {
	}
	subgraph helpers {
	}
	subgraph import {
	}
	subgraph logging {
	}
	subgraph modules {
		subgraph calctype{
		CalcType	[shape=oval, color=darkviolet, label="CalcType"];
		CalcType -> OOProg;
		CalcType -> r;
		CalcType -> CalcType;
		CalcType -> CodeDefinition;
		CalcType -> CodeExpr;
		}
		subgraph constraintce{
		ConstraintCE	[shape=oval, color=red2, label="ConstraintCE"];
		ConstraintCE -> ConstraintCodeExpr;
		}
	}
	subgraph parameters {
		subgraph paramtype{
		ParamType	[shape=oval, color=darkviolet, label="ParamType"];
		ParamType -> ParamType;
		ParamType -> Bool;
		}
	}
	subgraph readinput {
	}
	subgraph spacematch {
	}
	subgraph writeinput {
	}
	subgraph writereadme {
	}
	subgraph code {
		subgraph code{
		Code	[shape=oval, color=darkgreen, label="Code"];
		Code -> FilePath;
		}
	}
	subgraph codegeneration {
	}
	subgraph codequantitydicts {
	}
	subgraph datadecs {
		subgraph datadesc_{
		DataDesc_	[shape=oval, color=darkviolet, label="DataDesc_"];
		DataDesc_ -> Data_;
		DataDesc_ -> Delimiter;
		DataDesc_ -> DataDesc_;
		}
		subgraph data_{
		Data_	[shape=oval, color=darkviolet, label="Data_"];
		Data_ -> DataItem_;
		}
		subgraph dataitem_{
		DataItem_	[shape=oval, color=darkviolet, label="DataItem_"];
		}
		subgraph data{
		Data	[shape=oval, color=darkviolet, label="Data"];
		Data -> DataItem;
		}
		subgraph linepattern{
		LinePattern	[shape=oval, color=darkviolet, label="LinePattern"];
		LinePattern -> DataItem;
		}
		subgraph dataitem{
		DataItem	[shape=oval, color=red2, label="DataItem"];
		DataItem -> CodeVarChunk;
		}
		subgraph delimiter{
		Delimiter	[shape=oval, color=red2, label="Delimiter"];
		Delimiter -> String;
		}
		subgraph datadesc{
		DataDesc	[shape=oval, color=red2, label="DataDesc"];
		DataDesc -> Data;
		}
		subgraph delim{
		Delim	[shape=oval, color=red2, label="Delim"];
		Delim -> Char;
		}
	}
	subgraph extlibimport {
		subgraph extlibstate{
		ExtLibState	[shape=oval, color=cyan3, label="ExtLibState"];
		ExtLibState -> Mod;
		ExtLibState -> FuncStmt;
		ExtLibState -> Name;
		ExtLibState -> String;
		}
	}
	subgraph externallibrary {
		subgraph step{
		Step	[shape=oval, color=darkviolet, label="Step"];
		Step -> FunctionInterface;
		Step -> NonEmpty;
		Step -> CodeExpr;
		Step -> Condition;
		Step -> Step;
		Step -> CodeVarChunk;
		Step -> FuncStmt;
		}
		subgraph functioninterface{
		FunctionInterface	[shape=oval, color=darkviolet, label="FunctionInterface"];
		FunctionInterface -> NonEmpty;
		FunctionInterface -> Requires;
		FunctionInterface -> FuncType;
		FunctionInterface -> CodeFuncChunk;
		FunctionInterface -> Argument;
		FunctionInterface -> Maybe;
		FunctionInterface -> Result;
		}
		subgraph result{
		Result	[shape=oval, color=darkviolet, label="Result"];
		Result -> CodeVarChunk;
		}
		subgraph argument{
		Argument	[shape=oval, color=darkviolet, label="Argument"];
		Argument -> Maybe;
		Argument -> NamedArgument;
		Argument -> ArgumentInfo;
		}
		subgraph argumentinfo{
		ArgumentInfo	[shape=oval, color=darkviolet, label="ArgumentInfo"];
		ArgumentInfo -> CodeExpr;
		ArgumentInfo -> Space;
		ArgumentInfo -> Maybe;
		ArgumentInfo -> CodeVarChunk;
		ArgumentInfo -> CodeFuncChunk;
		ArgumentInfo -> Parameter;
		ArgumentInfo -> Step;
		ArgumentInfo -> Requires;
		ArgumentInfo -> Description;
		ArgumentInfo -> ClassInfo;
		ArgumentInfo -> NonEmpty;
		}
		subgraph parameter{
		Parameter	[shape=oval, color=darkviolet, label="Parameter"];
		Parameter -> ParameterChunk;
		Parameter -> Space;
		}
		subgraph classinfo{
		ClassInfo	[shape=oval, color=darkviolet, label="ClassInfo"];
		ClassInfo -> MethodInfo;
		ClassInfo -> String;
		}
		subgraph methodinfo{
		MethodInfo	[shape=oval, color=darkviolet, label="MethodInfo"];
		MethodInfo -> Description;
		MethodInfo -> Parameter;
		MethodInfo -> Step;
		MethodInfo -> CodeFuncChunk;
		MethodInfo -> Maybe;
		MethodInfo -> NonEmpty;
		}
		subgraph functype{
		FuncType	[shape=oval, color=darkviolet, label="FuncType"];
		FuncType -> CodeVarChunk;
		FuncType -> StepGroup;
		FuncType -> ExternalLibrary;
		}
		subgraph condition{
		Condition	[shape=oval, color=red2, label="Condition"];
		Condition -> CodeExpr;
		}
		subgraph requires{
		Requires	[shape=oval, color=red2, label="Requires"];
		Requires -> String;
		}
		subgraph externallibrary{
		ExternalLibrary	[shape=oval, color=red2, label="ExternalLibrary"];
		ExternalLibrary -> StepGroup;
		}
		subgraph stepgroup{
		StepGroup	[shape=oval, color=red2, label="StepGroup"];
		StepGroup -> NonEmptyStep;
		}
	}
	subgraph externallibrarycall {
		subgraph stepgroupfill{
		StepGroupFill	[shape=oval, color=darkviolet, label="StepGroupFill"];
		StepGroupFill -> Int;
		StepGroupFill -> StepFill;
		}
		subgraph stepfill{
		StepFill	[shape=oval, color=darkviolet, label="StepFill"];
		StepFill -> FunctionIntFill;
		StepFill -> NonEmpty;
		StepFill -> CodeExpr;
		StepFill -> StepFill;
		StepFill -> CodeVarChunk;
		}
		subgraph argumentfill{
		ArgumentFill	[shape=oval, color=darkviolet, label="ArgumentFill"];
		ArgumentFill -> Maybe;
		ArgumentFill -> NamedArgument;
		ArgumentFill -> CodeExpr;
		}
		subgraph parameterfill{
		ParameterFill	[shape=oval, color=darkviolet, label="ParameterFill"];
		ParameterFill -> ParameterChunk;
		}
		subgraph classinfofill{
		ClassInfoFill	[shape=oval, color=darkviolet, label="ClassInfoFill"];
		ClassInfoFill -> MethodInfoFill;
		}
		subgraph methodinfofill{
		MethodInfoFill	[shape=oval, color=darkviolet, label="MethodInfoFill"];
		MethodInfoFill -> ParameterFill;
		MethodInfoFill -> Initializer;
		MethodInfoFill -> StepFill;
		MethodInfoFill -> NonEmpty;
		MethodInfoFill -> StepGroupFill;
		MethodInfoFill -> ExternalLibraryCall;
		}
		subgraph functionintfill{
		FunctionIntFill	[shape=oval, color=darkgreen, label="FunctionIntFill"];
		FunctionIntFill -> ArgumentFill;
		}
		subgraph externallibrarycall{
		ExternalLibraryCall	[shape=oval, color=red2, label="ExternalLibraryCall"];
		ExternalLibraryCall -> StepGroupFill;
		}
	}
	subgraph lang {
		subgraph lang{
		Lang	[shape=oval, color=darkviolet, label="Lang"];
		}
	}
	subgraph odeinfo {
		subgraph odeinfo{
		ODEInfo	[shape=oval, color=cyan3, label="ODEInfo"];
		ODEInfo -> CodeVarChunk;
		ODEInfo -> CodeExpr;
		ODEInfo -> ODEOptions;
		}
		subgraph odeoptions{
		ODEOptions	[shape=oval, color=cyan3, label="ODEOptions"];
		ODEOptions -> ODEMethod;
		ODEOptions -> CodeExpr;
		}
		subgraph odemethod{
		ODEMethod	[shape=oval, color=darkviolet, label="ODEMethod"];
		ODEMethod -> DifferentialModel;
		ODEMethod -> CodeExpr;
		}
	}
	subgraph odelibpckg {
		subgraph odelibpckg{
		ODELibPckg	[shape=oval, color=cyan3, label="ODELibPckg"];
		ODELibPckg -> Name;
		ODELibPckg -> Version;
		ODELibPckg -> ExternalLibrary;
		ODELibPckg -> ODEInfoExternalLibraryCall;
		ODELibPckg -> MaybeFilePath;
		ODELibPckg -> Lang;
		}
	}
	subgraph coicehs {
		subgraph choices{
		Choices	[shape=oval, color=cyan3, label="Choices"];
		Choices -> Lang;
		Choices -> Architecture;
		Choices -> DataInfo;
		Choices -> Maps;
		Choices -> OptionalFeatures;
		Choices -> Constraints;
		Choices -> ExtLib;
		Choices -> InternalConceptName;
		Choices -> Int;
		}
		subgraph architecture{
		Architecture	[shape=oval, color=cyan3, label="Architecture"];
		Architecture -> Modularity;
		Architecture -> ImplementationType;
		}
		subgraph datainfo{
		DataInfo	[shape=oval, color=cyan3, label="DataInfo"];
		DataInfo -> Structure;
		DataInfo -> ConstantStructure;
		DataInfo -> ConstantRepr;
		}
		subgraph maps{
		Maps	[shape=oval, color=cyan3, label="Maps"];
		Maps -> ConceptMatchMap;
		Maps -> SpaceMatch;
		}
		subgraph optionalfeatures{
		OptionalFeatures	[shape=oval, color=cyan3, label="OptionalFeatures"];
		OptionalFeatures -> DocConfig;
		OptionalFeatures -> LogConfig;
		OptionalFeatures -> AuxFile;
		}
		subgraph docconfig{
		DocConfig	[shape=oval, color=cyan3, label="DocConfig"];
		DocConfig -> Comments;
		DocConfig -> Verbosity;
		DocConfig -> Visibility;
		}
		subgraph logconfig{
		LogConfig	[shape=oval, color=cyan3, label="LogConfig"];
		LogConfig -> Logging;
		LogConfig -> FilePath;
		}
		subgraph constraints{
		Constraints	[shape=oval, color=cyan3, label="Constraints"];
		Constraints -> ConstraintBehaviour;
		}
		subgraph modularity{
		Modularity	[shape=oval, color=darkviolet, label="Modularity"];
		}
		subgraph implementationtype{
		ImplementationType	[shape=oval, color=darkviolet, label="ImplementationType"];
		}
		subgraph structure{
		Structure	[shape=oval, color=darkviolet, label="Structure"];
		}
		subgraph constantstructure{
		ConstantStructure	[shape=oval, color=darkviolet, label="ConstantStructure"];
		}
		subgraph constantrepr{
		ConstantRepr	[shape=oval, color=darkviolet, label="ConstantRepr"];
		}
		subgraph codeconcept{
		CodeConcept	[shape=oval, color=darkviolet, label="CodeConcept"];
		}
		subgraph comments{
		Comments	[shape=oval, color=darkviolet, label="Comments"];
		}
		subgraph verbosity{
		Verbosity	[shape=oval, color=darkviolet, label="Verbosity"];
		}
		subgraph visibility{
		Visibility	[shape=oval, color=darkviolet, label="Visibility"];
		}
		subgraph logging{
		Logging	[shape=oval, color=darkviolet, label="Logging"];
		}
		subgraph auxfile{
		AuxFile	[shape=oval, color=darkviolet, label="AuxFile"];
		AuxFile -> FilePath;
		}
		subgraph constraintbehaviour{
		ConstraintBehaviour	[shape=oval, color=darkviolet, label="ConstraintBehaviour"];
		}
		subgraph internalconcept{
		InternalConcept	[shape=oval, color=darkviolet, label="InternalConcept"];
		}
		subgraph extlib{
		ExtLib	[shape=oval, color=darkgreen, label="ExtLib"];
		}
		subgraph conceptmatchmap{
		ConceptMatchMap	[shape=oval, color=red2, label="ConceptMatchMap"];
		ConceptMatchMap -> MapUIDCodeConcept;
		}
		subgraph matchedconceptmap{
		MatchedConceptMap	[shape=oval, color=red2, label="MatchedConceptMap"];
		MatchedConceptMap -> MapUIDCodeConcept;
		}
		subgraph spacematch{
		SpaceMatch	[shape=oval, color=red2, label="SpaceMatch"];
		SpaceMatch -> SpaceCodeType;
		}
	}
	subgraph code {
	}
	subgraph codespec {
		subgraph codespec{
		CodeSpec	[shape=oval, color=cyan3, label="CodeSpec"];
		CodeSpec -> Name;
		CodeSpec -> a;
		CodeSpec -> Purpose;
		CodeSpec -> Background;
		CodeSpec -> Input;
		CodeSpec -> Derived;
		CodeSpec -> Output;
		CodeSpec -> FilePath;
		CodeSpec -> Def;
		CodeSpec -> ConstraintCEMap;
		CodeSpec -> Const;
		CodeSpec -> ConstantMap;
		CodeSpec -> Mod;
		CodeSpec -> ChunkDB;
		}
		subgraph input{
		Input	[shape=oval, color=red2, label="Input"];
		Input -> CodeVarChunk;
		}
		subgraph output{
		Output	[shape=oval, color=red2, label="Output"];
		Output -> CodeVarChunk;
		}
		subgraph const{
		Const	[shape=oval, color=red2, label="Const"];
		Const -> CodeDefinition;
		}
		subgraph derived{
		Derived	[shape=oval, color=red2, label="Derived"];
		Derived -> CodeDefinition;
		}
		subgraph def{
		Def	[shape=oval, color=red2, label="Def"];
		Def -> CodeDefinition;
		}
		subgraph constantmap{
		ConstantMap	[shape=oval, color=red2, label="ConstantMap"];
		ConstantMap -> MapUIDCodeDefinition;
		}
		subgraph known{
		Known	[shape=oval, color=red2, label="Known"];
		Known -> CodeVarChunk;
		}
		subgraph need{
		Need	[shape=oval, color=red2, label="Need"];
		Need -> CodeVarChunk;
		}
	}
	subgraph mod {
		subgraph class{
		Class	[shape=oval, color=cyan3, label="Class"];
		Class -> Name;
		Class -> MaybeName;
		Class -> Description;
		Class -> StateVariable;
		Class -> Func;
		}
		subgraph statevariable{
		StateVariable	[shape=oval, color=cyan3, label="StateVariable"];
		StateVariable -> ScopeTag;
		StateVariable -> CodeVarChunk;
		}
		subgraph mod{
		Mod	[shape=oval, color=darkviolet, label="Mod"];
		Mod -> Name;
		Mod -> Description;
		Mod -> Import;
		Mod -> Class;
		Mod -> Func;
		Mod -> Mod;
		}
		subgraph func{
		Func	[shape=oval, color=darkviolet, label="Func"];
		Func -> FuncDef;
		Func -> FuncData;
		Func -> Name;
		Func -> Description;
		Func -> DataDesc;
		Func -> Func;
		}
		subgraph funcdata{
		FuncData	[shape=oval, color=darkviolet, label="FuncData"];
		FuncData -> Name;
		FuncData -> Description;
		FuncData -> DataDesc;
		FuncData -> FuncData;
		}
		subgraph funcdef{
		FuncDef	[shape=oval, color=darkviolet, label="FuncDef"];
		FuncDef -> Name;
		FuncDef -> Description;
		FuncDef -> ParameterChunk;
		FuncDef -> Space;
		}
		subgraph funcstmt{
		FuncStmt	[shape=oval, color=darkviolet, label="FuncStmt"];
		FuncStmt -> CodeVarChunk;
		FuncStmt -> CodeExpr;
		FuncStmt -> FuncStmt;
		FuncStmt -> Integer;
		}
		subgraph name{
		Name	[shape=oval, color=red2, label="Name"];
		Name -> String;
		}
		subgraph description{
		Description	[shape=oval, color=red2, label="Description"];
		Description -> String;
		}
		subgraph import{
		Import	[shape=oval, color=red2, label="Import"];
		Import -> String;
		}
		subgraph version{
		Version	[shape=oval, color=red2, label="Version"];
		Version -> String;
		}
		subgraph initializer{
		Initializer	[shape=oval, color=red2, label="Initializer"];
		Initializer -> CodeVarChunkCodeExpr;
		}
	}
	subgraph filetetss {
	}
	subgraph helloworld {
	}
	subgraph helper {
	}
	subgraph main {
	}
	subgraph namegentets {
	}
	subgraph obervers {
	}
	subgraph patterntets {
	}
	subgraph vectortets {
	}
	subgraph languagestructure {
		subgraph comment{
		Comment	[shape=oval, color=red2, label="Comment"];
		Comment -> String;
		}
	}
	subgraph drails {
	}
	subgraph computation {
	}
	subgraph documentation {
	}
	subgraph education {
	}
	subgraph math {
	}
	subgraph pyicalpropertieshs {
	}
	subgraph pyicshs {
	}
	subgraph software {
	}
	subgraph solidmecanichs {
	}
	subgraph termodynamichs {
	}
	subgraph derivations {
	}
	subgraph pyicshs {
	}
	subgraph math {
	}
	subgraph pyicalpropertieshs {
	}
	subgraph pyicshs {
	}
	subgraph solidmecanichs {
	}
	subgraph termodynamichs {
	}
	subgraph products {
	}
	subgraph pyicshs {
	}
	subgraph pyicalpropertieshs {
	}
	subgraph pyicshs {
	}
	subgraph solidmecanichs {
	}
	subgraph termodynamichs {
	}
	subgraph citations {
	}
	subgraph contraintss {
	}
	subgraph people {
	}
	subgraph si_units {
	}
	subgraph cunkdbh {
		subgraph chunkdb{
		ChunkDB	[shape=oval, color=cyan3, label="ChunkDB"];
		ChunkDB -> SymbolMap;
		ChunkDB -> TermMap;
		ChunkDB -> ConceptMap;
		ChunkDB -> UnitMap;
		ChunkDB -> TraceMap;
		ChunkDB -> RefbyMap;
		ChunkDB -> DatadefnMap;
		ChunkDB -> InsModelMap;
		ChunkDB -> GendefMap;
		ChunkDB -> TheoryModelMap;
		ChunkDB -> ConceptInstanceMap;
		ChunkDB -> SectionMap;
		ChunkDB -> LabelledContentMap;
		ChunkDB -> ReferenceMap;
		}
		subgraph umapa{
		UMapa	[shape=oval, color=red2, label="UMapa"];
		UMapa -> MapUIDaInt;
		}
		subgraph symbolmap{
		SymbolMap	[shape=oval, color=red2, label="SymbolMap"];
		SymbolMap -> UMapQuantityDict;
		}
		subgraph conceptmap{
		ConceptMap	[shape=oval, color=red2, label="ConceptMap"];
		ConceptMap -> UMapConceptChunk;
		}
		subgraph unitmap{
		UnitMap	[shape=oval, color=red2, label="UnitMap"];
		UnitMap -> UMapUnitDefn;
		}
		subgraph termmap{
		TermMap	[shape=oval, color=red2, label="TermMap"];
		TermMap -> UMapIdeaDict;
		}
		subgraph tracemap{
		TraceMap	[shape=oval, color=red2, label="TraceMap"];
		TraceMap -> MapUIDUID;
		}
		subgraph refbymap{
		RefbyMap	[shape=oval, color=red2, label="RefbyMap"];
		RefbyMap -> MapUIDUID;
		}
		subgraph datadefnmap{
		DatadefnMap	[shape=oval, color=red2, label="DatadefnMap"];
		DatadefnMap -> UMapDataDefinition;
		}
		subgraph insmodelmap{
		InsModelMap	[shape=oval, color=red2, label="InsModelMap"];
		InsModelMap -> UMapInstanceModel;
		}
		subgraph gendefmap{
		GendefMap	[shape=oval, color=red2, label="GendefMap"];
		GendefMap -> UMapGenDefn;
		}
		subgraph theorymodelmap{
		TheoryModelMap	[shape=oval, color=red2, label="TheoryModelMap"];
		TheoryModelMap -> UMapTheoryModel;
		}
		subgraph conceptinstancemap{
		ConceptInstanceMap	[shape=oval, color=red2, label="ConceptInstanceMap"];
		ConceptInstanceMap -> UMapConceptInstance;
		}
		subgraph sectionmap{
		SectionMap	[shape=oval, color=red2, label="SectionMap"];
		SectionMap -> UMapSection;
		}
		subgraph labelledcontentmap{
		LabelledContentMap	[shape=oval, color=red2, label="LabelledContentMap"];
		LabelledContentMap -> UMapLabelledContent;
		}
		subgraph referencemap{
		ReferenceMap	[shape=oval, color=red2, label="ReferenceMap"];
		ReferenceMap -> UMapReference;
		}
	}
	subgraph dump {
		subgraph chunktype{
		ChunkType	[shape=oval, color=red2, label="ChunkType"];
		ChunkType -> String;
		}
		subgraph dumpedchunkdb{
		DumpedChunkDB	[shape=oval, color=red2, label="DumpedChunkDB"];
		DumpedChunkDB -> MapChunkTypeUID;
		}
	}
	subgraph drails {
	}
	subgraph notebook {
	}
	subgraph references {
	}
	subgraph srs {
	}
	subgraph core {
		subgraph lsnchapter{
		LsnChapter	[shape=oval, color=darkviolet, label="LsnChapter"];
		LsnChapter -> Intro;
		LsnChapter -> LearnObj;
		LsnChapter -> Review;
		LsnChapter -> CaseProb;
		LsnChapter -> Example;
		LsnChapter -> Smmry;
		LsnChapter -> Apndx;
		}
		subgraph apndx{
		Apndx	[shape=oval, color=darkgreen, label="Apndx"];
		}
		subgraph intro{
		Intro	[shape=oval, color=darkgreen, label="Intro"];
		Intro -> Contents;
		}
		subgraph learnobj{
		LearnObj	[shape=oval, color=darkgreen, label="LearnObj"];
		LearnObj -> Contents;
		}
		subgraph review{
		Review	[shape=oval, color=darkgreen, label="Review"];
		Review -> Contents;
		}
		subgraph caseprob{
		CaseProb	[shape=oval, color=darkgreen, label="CaseProb"];
		CaseProb -> Contents;
		}
		subgraph example{
		Example	[shape=oval, color=darkgreen, label="Example"];
		Example -> Contents;
		}
		subgraph smmry{
		Smmry	[shape=oval, color=darkgreen, label="Smmry"];
		Smmry -> Contents;
		}
		subgraph lsndesc{
		LsnDesc	[shape=oval, color=red2, label="LsnDesc"];
		LsnDesc -> LsnChapter;
		}
	}
	subgraph documentlanguage {
	}
	subgraph lndecls {
		subgraph lsnchapter{
		LsnChapter	[shape=oval, color=darkviolet, label="LsnChapter"];
		LsnChapter -> Intro;
		LsnChapter -> LearnObj;
		LsnChapter -> Review;
		LsnChapter -> CaseProb;
		LsnChapter -> Example;
		LsnChapter -> Smmry;
		LsnChapter -> Apndx;
		LsnChapter -> SystemInformation;
		LsnChapter -> LsnDecl;
		LsnChapter -> LsnDesc;
		}
		subgraph lsndecl{
		LsnDecl	[shape=oval, color=red2, label="LsnDecl"];
		LsnDecl -> LsnChapter;
		}
	}
	subgraph core {
		subgraph docsection{
		DocSection	[shape=oval, color=darkviolet, label="DocSection"];
		DocSection -> RefSec;
		DocSection -> IntroSec;
		DocSection -> StkhldrSec;
		DocSection -> GSDSec;
		DocSection -> SSDSec;
		DocSection -> ReqrmntSec;
		DocSection -> LCsSec;
		DocSection -> UCsSec;
		DocSection -> TraceabilitySec;
		DocSection -> AuxConstntSec;
		DocSection -> AppndxSec;
		DocSection -> OffShelfSolnsSec;
		}
		subgraph refsec{
		RefSec	[shape=oval, color=darkviolet, label="RefSec"];
		RefSec -> Contents;
		RefSec -> RefTab;
		}
		subgraph reftab{
		RefTab	[shape=oval, color=darkviolet, label="RefTab"];
		RefTab -> RefTab;
		RefTab -> TUIntro;
		RefTab -> UnitDefn;
		RefTab -> LabelledContent;
		RefTab -> TSIntro;
		RefTab -> LFunc;
		}
		subgraph tsintro{
		TSIntro	[shape=oval, color=darkviolet, label="TSIntro"];
		TSIntro -> TConvention;
		}
		subgraph tconvention{
		TConvention	[shape=oval, color=darkviolet, label="TConvention"];
		TConvention -> Emphasis;
		}
		subgraph emphasis{
		Emphasis	[shape=oval, color=darkviolet, label="Emphasis"];
		}
		subgraph literature{
		Literature	[shape=oval, color=darkviolet, label="Literature"];
		Literature -> Topic;
		}
		subgraph tuintro{
		TUIntro	[shape=oval, color=darkviolet, label="TUIntro"];
		}
		subgraph lfunc{
		LFunc	[shape=oval, color=darkviolet, label="LFunc"];
		LFunc -> LFunc;
		LFunc -> DefinedQuantityDict;
		}
		subgraph introsec{
		IntroSec	[shape=oval, color=darkviolet, label="IntroSec"];
		IntroSec -> Sentence;
		IntroSec -> IntroSub;
		}
		subgraph introsub{
		IntroSub	[shape=oval, color=darkviolet, label="IntroSub"];
		IntroSub -> Sentence;
		IntroSub -> IntroSub;
		IntroSub -> CI;
		IntroSub -> Section;
		}
		subgraph stkhldrsub{
		StkhldrSub	[shape=oval, color=darkviolet, label="StkhldrSub"];
		StkhldrSub -> CI;
		StkhldrSub -> Sentence;
		StkhldrSub -> StkhldrSub;
		}
		subgraph gsdsub{
		GSDSub	[shape=oval, color=darkviolet, label="GSDSub"];
		GSDSub -> Contents;
		GSDSub -> GSDSub;
		}
		subgraph ssdsub{
		SSDSub	[shape=oval, color=darkviolet, label="SSDSub"];
		SSDSub -> ProblemDescription;
		SSDSub -> SSDSub;
		SSDSub -> SolChSpec;
		}
		subgraph problemdescription{
		ProblemDescription	[shape=oval, color=darkviolet, label="ProblemDescription"];
		ProblemDescription -> Sentence;
		ProblemDescription -> Section;
		ProblemDescription -> PDSub;
		ProblemDescription -> ProblemDescription;
		}
		subgraph pdsub{
		PDSub	[shape=oval, color=darkviolet, label="PDSub"];
		PDSub -> Concept;
		PDSub -> c;
		PDSub -> Maybe;
		PDSub -> Sentence;
		PDSub -> PDSub;
		PDSub -> Idea;
		PDSub -> a;
		PDSub -> LabelledContent;
		PDSub -> Contents;
		PDSub -> ConceptInstance;
		}
		subgraph solchspec{
		SolChSpec	[shape=oval, color=darkviolet, label="SolChSpec"];
		SolChSpec -> SCSSub;
		SolChSpec -> SolChSpec;
		}
		subgraph scssub{
		SCSSub	[shape=oval, color=darkviolet, label="SCSSub"];
		SCSSub -> ConceptInstance;
		SCSSub -> SCSSub;
		SCSSub -> Sentence;
		SCSSub -> Fields;
		SCSSub -> TheoryModel;
		SCSSub -> GenDefn;
		SCSSub -> DerivationDisplay;
		SCSSub -> DataDefinition;
		}
		subgraph derivationdisplay{
		DerivationDisplay	[shape=oval, color=darkviolet, label="DerivationDisplay"];
		}
		subgraph reqssub{
		ReqsSub	[shape=oval, color=darkviolet, label="ReqsSub"];
		ReqsSub -> ConceptInstance;
		ReqsSub -> LabelledContent;
		ReqsSub -> ReqsSub;
		}
		subgraph traceconfig{
		TraceConfig	[shape=oval, color=darkviolet, label="TraceConfig"];
		TraceConfig -> UID;
		TraceConfig -> Sentence;
		TraceConfig -> TraceViewCat;
		TraceConfig -> TraceConfig;
		}
		subgraph auxconstntsec{
		AuxConstntSec	[shape=oval, color=darkviolet, label="AuxConstntSec"];
		AuxConstntSec -> CI;
		AuxConstntSec -> ConstQDef;
		}
		subgraph appndxsec{
		AppndxSec	[shape=oval, color=darkgreen, label="AppndxSec"];
		}
		subgraph stkhldrsec{
		StkhldrSec	[shape=oval, color=darkgreen, label="StkhldrSec"];
		StkhldrSec -> StkhldrSub;
		}
		subgraph gsdsec{
		GSDSec	[shape=oval, color=darkgreen, label="GSDSec"];
		GSDSec -> GSDSub;
		}
		subgraph ssdsec{
		SSDSec	[shape=oval, color=darkgreen, label="SSDSec"];
		SSDSec -> SSDSub;
		}
		subgraph reqrmntsec{
		ReqrmntSec	[shape=oval, color=darkgreen, label="ReqrmntSec"];
		ReqrmntSec -> ReqsSub;
		}
		subgraph lcssec{
		LCsSec	[shape=oval, color=darkgreen, label="LCsSec"];
		LCsSec -> ConceptInstance;
		}
		subgraph ucssec{
		UCsSec	[shape=oval, color=darkgreen, label="UCsSec"];
		UCsSec -> ConceptInstance;
		}
		subgraph traceabilitysec{
		TraceabilitySec	[shape=oval, color=darkgreen, label="TraceabilitySec"];
		TraceabilitySec -> TraceConfig;
		}
		subgraph offshelfsolnssec{
		OffShelfSolnsSec	[shape=oval, color=darkgreen, label="OffShelfSolnsSec"];
		OffShelfSolnsSec -> Contents;
		}
		subgraph system{
		System	[shape=oval, color=red2, label="System"];
		System -> Sentence;
		}
		subgraph dockind{
		DocKind	[shape=oval, color=red2, label="DocKind"];
		DocKind -> Sentence;
		}
		subgraph docdesc{
		DocDesc	[shape=oval, color=red2, label="DocDesc"];
		DocDesc -> DocSection;
		}
		subgraph topic{
		Topic	[shape=oval, color=red2, label="Topic"];
		Topic -> IdeaDict;
		}
	}
	subgraph definitions {
		subgraph field{
		Field	[shape=oval, color=darkviolet, label="Field"];
		Field -> Verbosity;
		Field -> InclUnits;
		}
		subgraph verbosity{
		Verbosity	[shape=oval, color=darkviolet, label="Verbosity"];
		}
		subgraph inclunits{
		InclUnits	[shape=oval, color=darkviolet, label="InclUnits"];
		}
		subgraph fields{
		Fields	[shape=oval, color=red2, label="Fields"];
		Fields -> Field;
		}
		subgraph modrow{
		ModRow	[shape=oval, color=red2, label="ModRow"];
		ModRow -> StringContents;
		}
	}
	subgraph traceabilitygraph {
	}
	subgraph traceabilitymatrix {
		subgraph traceviewcat{
		TraceViewCat	[shape=oval, color=red2, label="TraceViewCat"];
		TraceViewCat -> UIDChunkDBUID;
		}
	}
	subgraph units {
	}
	subgraph auxiliarycontantss {
	}
	subgraph generalsytdescs {
	}
	subgraph introduction {
	}
	subgraph referencematerial {
		subgraph plurality{
		Plurality	[shape=oval, color=darkviolet, label="Plurality"];
		Plurality -> NamedIdea;
		Plurality -> n;
		Plurality -> Plurality;
		Plurality -> Sentence;
		}
	}
	subgraph requirements {
	}
	subgraph specificsytemdescriptions {
	}
	subgraph stakeolderhs {
	}
	subgraph tableofabbandacronyms {
	}
	subgraph tableofcontents {
	}
	subgraph tableofsymbols {
	}
	subgraph tableofunits {
	}
	subgraph traceabilitymandgs {
	}
	subgraph docdecl {
		subgraph docsection{
		DocSection	[shape=oval, color=darkviolet, label="DocSection"];
		}
		subgraph ssdsub{
		SSDSub	[shape=oval, color=darkviolet, label="SSDSub"];
		SSDSub -> ProblemDescription;
		SSDSub -> SSDSub;
		SSDSub -> SolChSpec;
		}
		subgraph problemdescription{
		ProblemDescription	[shape=oval, color=darkviolet, label="ProblemDescription"];
		ProblemDescription -> Sentence;
		ProblemDescription -> Section;
		ProblemDescription -> PDSub;
		ProblemDescription -> ProblemDescription;
		}
		subgraph pdsub{
		PDSub	[shape=oval, color=darkviolet, label="PDSub"];
		PDSub -> Concept;
		PDSub -> c;
		PDSub -> Maybe;
		PDSub -> Sentence;
		PDSub -> PDSub;
		PDSub -> Idea;
		PDSub -> a;
		PDSub -> LabelledContent;
		PDSub -> Contents;
		}
		subgraph solchspec{
		SolChSpec	[shape=oval, color=darkviolet, label="SolChSpec"];
		SolChSpec -> SCSSub;
		SolChSpec -> SolChSpec;
		}
		subgraph scssub{
		SCSSub	[shape=oval, color=darkviolet, label="SCSSub"];
		SCSSub -> SCSSub;
		SCSSub -> Sentence;
		SCSSub -> Fields;
		SCSSub -> DerivationDisplay;
		SCSSub -> HasUncertainty;
		SCSSub -> c;
		SCSSub -> Quantity;
		SCSSub -> Constrained;
		SCSSub -> HasReasVal;
		SCSSub -> MayHaveUnit;
		SCSSub -> Contents;
		}
		subgraph reqssub{
		ReqsSub	[shape=oval, color=darkviolet, label="ReqsSub"];
		ReqsSub -> Sentence;
		ReqsSub -> LabelledContent;
		ReqsSub -> ReqsSub;
		ReqsSub -> SystemInformation;
		ReqsSub -> SRSDecl;
		ReqsSub -> DocDesc;
		}
		subgraph ssdsec{
		SSDSec	[shape=oval, color=darkgreen, label="SSDSec"];
		SSDSec -> SSDSub;
		}
		subgraph reqrmntsec{
		ReqrmntSec	[shape=oval, color=darkgreen, label="ReqrmntSec"];
		ReqrmntSec -> ReqsSub;
		}
		subgraph srsdecl{
		SRSDecl	[shape=oval, color=red2, label="SRSDecl"];
		SRSDecl -> DocSection;
		}
	}
	subgraph doclang {
	}
	subgraph documentlanguage {
	}
	subgraph extractdocdecs {
	}
	subgraph srsdocument {
	}
	subgraph tracetable {
	}
	subgraph main {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph coicehs {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph derivations {
	}
	subgraph expresionss {
	}
	subgraph figures {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph odes {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph unitals {
	}
	subgraph main {
	}
	subgraph arbiter {
	}
	subgraph vector {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph coicehs {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph derivations {
	}
	subgraph expresionss {
	}
	subgraph gdefs {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph tmods {
	}
	subgraph unitals {
	}
	subgraph main {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph coicehs {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph figures {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph moduledefs {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph symbols {
	}
	subgraph tmods {
	}
	subgraph unitals {
		subgraph glasstype{
		GlassType	[shape=oval, color=red2, label="GlassType"];
		GlassType -> IntegerCI;
		}
		subgraph glassthickness{
		GlassThickness	[shape=oval, color=red2, label="GlassThickness"];
		GlassThickness -> DoubleDouble;
		}
	}
	subgraph units {
	}
	subgraph main {
	}
	subgraph body {
	}
	subgraph coicehs {
	}
	subgraph heattranfers {
	}
	subgraph main {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph coicehs {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph gendefs {
	}
	subgraph gensydescs {
	}
	subgraph imodel {
	}
	subgraph introsection {
	}
	subgraph odes {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph spsydescs {
	}
	subgraph tmodel {
	}
	subgraph unitals {
	}
	subgraph main {
	}
	subgraph body {
	}
	subgraph caeprobs {
	}
	subgraph example {
	}
	subgraph figures {
	}
	subgraph learnobj {
	}
	subgraph main {
	}
	subgraph review {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph coicehs {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph derivations {
	}
	subgraph expresionss {
	}
	subgraph figures {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph unitals {
	}
	subgraph main {
	}
	subgraph body {
	}
	subgraph datadefs {
	}
	subgraph derivations {
	}
	subgraph expresionss {
	}
	subgraph figures {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph requirements {
	}
	subgraph unitals {
	}
	subgraph main {
	}
	subgraph asumptionss {
	}
	subgraph baicexprss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph coicehs {
	}
	subgraph datadefs {
	}
	subgraph defs {
	}
	subgraph figures {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph tmods {
	}
	subgraph unitals {
	}
	subgraph main {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph coicehs {
	}
	subgraph concepts {
	}
	subgraph datadefs {
	}
	subgraph derivations {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph tmods {
		subgraph phasechange{
		PhaseChange	[shape=oval, color=darkviolet, label="PhaseChange"];
		PhaseChange -> PhaseChange;
		PhaseChange -> Sentence;
		PhaseChange -> TheoryModel;
		}
	}
	subgraph unitals {
	}
	subgraph main {
	}
	subgraph asumptionss {
	}
	subgraph body {
	}
	subgraph cangehs {
	}
	subgraph coicehs {
	}
	subgraph datadefs {
	}
	subgraph definitions {
	}
	subgraph derivations {
	}
	subgraph gendefs {
	}
	subgraph goals {
	}
	subgraph imods {
	}
	subgraph odes {
	}
	subgraph references {
	}
	subgraph requirements {
	}
	subgraph unitals {
	}
	subgraph main {
	}
	subgraph body {
	}
	subgraph formats {
		subgraph docchoices{
		DocChoices	[shape=oval, color=cyan3, label="DocChoices"];
		DocChoices -> DocType;
		DocChoices -> Format;
		}
		subgraph docspec{
		DocSpec	[shape=oval, color=darkviolet, label="DocSpec"];
		DocSpec -> DocChoices;
		DocSpec -> Filename;
		}
		subgraph docclass{
		DocClass	[shape=oval, color=darkviolet, label="DocClass"];
		DocClass -> Maybe;
		DocClass -> String;
		}
		subgraph exdoc{
		ExDoc	[shape=oval, color=darkviolet, label="ExDoc"];
		ExDoc -> Maybe;
		ExDoc -> String;
		}
		subgraph usepackages{
		UsePackages	[shape=oval, color=darkgreen, label="UsePackages"];
		UsePackages -> String;
		}
		subgraph filename{
		Filename	[shape=oval, color=red2, label="Filename"];
		Filename -> String;
		}
	}
	subgraph dump {
		subgraph path{
		Path	[shape=oval, color=red2, label="Path"];
		Path -> String;
		}
		subgraph targetfile{
		TargetFile	[shape=oval, color=red2, label="TargetFile"];
		TargetFile -> String;
		}
	}
	subgraph generate {
	}
	subgraph typececkh {
	}
	subgraph clike {
	}
	subgraph csarprendererh {
		subgraph csharpcodea{
		CSharpCodea	[shape=oval, color=darkgreen, label="CSharpCodea"];
		CSharpCodea -> a;
		}
		subgraph programcsharpcode{
		ProgramCSharpCode	[shape=oval, color=red2, label="ProgramCSharpCode"];
		ProgramCSharpCode -> ProgData;
		}
		subgraph filecsharpcode{
		FileCSharpCode	[shape=oval, color=red2, label="FileCSharpCode"];
		FileCSharpCode -> FileData;
		}
		subgraph importcsharpcode{
		ImportCSharpCode	[shape=oval, color=red2, label="ImportCSharpCode"];
		ImportCSharpCode -> Doc;
		}
		subgraph permanencecsharpcode{
		PermanenceCSharpCode	[shape=oval, color=red2, label="PermanenceCSharpCode"];
		PermanenceCSharpCode -> Doc;
		}
		subgraph bodycsharpcode{
		BodyCSharpCode	[shape=oval, color=red2, label="BodyCSharpCode"];
		BodyCSharpCode -> Doc;
		}
		subgraph blockcsharpcode{
		BlockCSharpCode	[shape=oval, color=red2, label="BlockCSharpCode"];
		BlockCSharpCode -> Doc;
		}
		subgraph typecsharpcode{
		TypeCSharpCode	[shape=oval, color=red2, label="TypeCSharpCode"];
		TypeCSharpCode -> TypeData;
		}
		subgraph unaryopcsharpcode{
		UnaryOpCSharpCode	[shape=oval, color=red2, label="UnaryOpCSharpCode"];
		UnaryOpCSharpCode -> OpData;
		}
		subgraph binaryopcsharpcode{
		BinaryOpCSharpCode	[shape=oval, color=red2, label="BinaryOpCSharpCode"];
		BinaryOpCSharpCode -> OpData;
		}
		subgraph variablecsharpcode{
		VariableCSharpCode	[shape=oval, color=red2, label="VariableCSharpCode"];
		VariableCSharpCode -> VarData;
		}
		subgraph valuecsharpcode{
		ValueCSharpCode	[shape=oval, color=red2, label="ValueCSharpCode"];
		ValueCSharpCode -> ValData;
		}
		subgraph functioncsharpcode{
		FunctionCSharpCode	[shape=oval, color=red2, label="FunctionCSharpCode"];
		FunctionCSharpCode -> FuncData;
		}
		subgraph thunkcsharpcode{
		ThunkCSharpCode	[shape=oval, color=red2, label="ThunkCSharpCode"];
		ThunkCSharpCode -> CommonThunkVS;
		}
		subgraph statementcsharpcode{
		StatementCSharpCode	[shape=oval, color=red2, label="StatementCSharpCode"];
		StatementCSharpCode -> DocTerminator;
		}
		subgraph scopecsharpcode{
		ScopeCSharpCode	[shape=oval, color=red2, label="ScopeCSharpCode"];
		ScopeCSharpCode -> Doc;
		}
		subgraph methodtypecsharpcode{
		MethodTypeCSharpCode	[shape=oval, color=red2, label="MethodTypeCSharpCode"];
		MethodTypeCSharpCode -> TypeData;
		}
		subgraph parametercsharpcode{
		ParameterCSharpCode	[shape=oval, color=red2, label="ParameterCSharpCode"];
		ParameterCSharpCode -> ParamData;
		}
		subgraph methodcsharpcode{
		MethodCSharpCode	[shape=oval, color=red2, label="MethodCSharpCode"];
		MethodCSharpCode -> MethodData;
		}
		subgraph statevarcsharpcode{
		StateVarCSharpCode	[shape=oval, color=red2, label="StateVarCSharpCode"];
		StateVarCSharpCode -> Doc;
		}
		subgraph classcsharpcode{
		ClassCSharpCode	[shape=oval, color=red2, label="ClassCSharpCode"];
		ClassCSharpCode -> Doc;
		}
		subgraph modulecsharpcode{
		ModuleCSharpCode	[shape=oval, color=red2, label="ModuleCSharpCode"];
		ModuleCSharpCode -> ModData;
		}
		subgraph blockcommentcsharpcode{
		BlockCommentCSharpCode	[shape=oval, color=red2, label="BlockCommentCSharpCode"];
		BlockCommentCSharpCode -> Doc;
		}
	}
	subgraph commonpeudooos {
	}
	subgraph contructorss {
		subgraph vsopr{
		VSOpr	[shape=oval, color=red2, label="VSOpr"];
		VSOpr -> VSrOpData;
		}
	}
	subgraph cpprenderer {
		subgraph cppcodexya{
		CppCodexya	[shape=oval, color=cyan3, label="CppCodexya"];
		CppCodexya -> xa;
		CppCodexya -> ya;
		}
		subgraph methoddata{
		MethodData	[shape=oval, color=cyan3, label="MethodData"];
		MethodData -> ScopeTag;
		MethodData -> Doc;
		}
		subgraph cppsrccodea{
		CppSrcCodea	[shape=oval, color=darkgreen, label="CppSrcCodea"];
		CppSrcCodea -> a;
		}
		subgraph cpphdrcodea{
		CppHdrCodea	[shape=oval, color=darkgreen, label="CppHdrCodea"];
		CppHdrCodea -> a;
		}
		subgraph programpcppsrccodecpphdrcode{
		ProgrampCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="ProgrampCppSrcCodeCppHdrCode"];
		ProgrampCppSrcCodeCppHdrCode -> ProgData;
		}
		subgraph filepcppsrccodecpphdrcode{
		FilepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="FilepCppSrcCodeCppHdrCode"];
		FilepCppSrcCodeCppHdrCode -> FileData;
		}
		subgraph importpcppsrccodecpphdrcode{
		ImportpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="ImportpCppSrcCodeCppHdrCode"];
		ImportpCppSrcCodeCppHdrCode -> Doc;
		}
		subgraph permanencepcppsrccodecpphdrcode{
		PermanencepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="PermanencepCppSrcCodeCppHdrCode"];
		PermanencepCppSrcCodeCppHdrCode -> BindData;
		}
		subgraph bodypcppsrccodecpphdrcode{
		BodypCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="BodypCppSrcCodeCppHdrCode"];
		BodypCppSrcCodeCppHdrCode -> Doc;
		}
		subgraph blockpcppsrccodecpphdrcode{
		BlockpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="BlockpCppSrcCodeCppHdrCode"];
		BlockpCppSrcCodeCppHdrCode -> Doc;
		}
		subgraph typepcppsrccodecpphdrcode{
		TypepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="TypepCppSrcCodeCppHdrCode"];
		TypepCppSrcCodeCppHdrCode -> TypeData;
		}
		subgraph unaryoppcppsrccodecpphdrcode{
		UnaryOppCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="UnaryOppCppSrcCodeCppHdrCode"];
		UnaryOppCppSrcCodeCppHdrCode -> OpData;
		}
		subgraph binaryoppcppsrccodecpphdrcode{
		BinaryOppCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="BinaryOppCppSrcCodeCppHdrCode"];
		BinaryOppCppSrcCodeCppHdrCode -> OpData;
		}
		subgraph variablepcppsrccodecpphdrcode{
		VariablepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="VariablepCppSrcCodeCppHdrCode"];
		VariablepCppSrcCodeCppHdrCode -> VarData;
		}
		subgraph valuepcppsrccodecpphdrcode{
		ValuepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="ValuepCppSrcCodeCppHdrCode"];
		ValuepCppSrcCodeCppHdrCode -> ValData;
		}
		subgraph functionpcppsrccodecpphdrcode{
		FunctionpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="FunctionpCppSrcCodeCppHdrCode"];
		FunctionpCppSrcCodeCppHdrCode -> FuncData;
		}
		subgraph thunkpcppsrccodecpphdrcode{
		ThunkpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="ThunkpCppSrcCodeCppHdrCode"];
		ThunkpCppSrcCodeCppHdrCode -> CommonThunkVS;
		}
		subgraph statementpcppsrccodecpphdrcode{
		StatementpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="StatementpCppSrcCodeCppHdrCode"];
		StatementpCppSrcCodeCppHdrCode -> DocTerminator;
		}
		subgraph scopepcppsrccodecpphdrcode{
		ScopepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="ScopepCppSrcCodeCppHdrCode"];
		ScopepCppSrcCodeCppHdrCode -> DocScopeTag;
		}
		subgraph methodtypepcppsrccodecpphdrcode{
		MethodTypepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="MethodTypepCppSrcCodeCppHdrCode"];
		MethodTypepCppSrcCodeCppHdrCode -> TypeData;
		}
		subgraph parameterpcppsrccodecpphdrcode{
		ParameterpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="ParameterpCppSrcCodeCppHdrCode"];
		ParameterpCppSrcCodeCppHdrCode -> ParamData;
		}
		subgraph methodpcppsrccodecpphdrcode{
		MethodpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="MethodpCppSrcCodeCppHdrCode"];
		MethodpCppSrcCodeCppHdrCode -> MethodData;
		}
		subgraph statevarpcppsrccodecpphdrcode{
		StateVarpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="StateVarpCppSrcCodeCppHdrCode"];
		StateVarpCppSrcCodeCppHdrCode -> StateVarData;
		}
		subgraph classpcppsrccodecpphdrcode{
		ClasspCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="ClasspCppSrcCodeCppHdrCode"];
		ClasspCppSrcCodeCppHdrCode -> Doc;
		}
		subgraph modulepcppsrccodecpphdrcode{
		ModulepCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="ModulepCppSrcCodeCppHdrCode"];
		ModulepCppSrcCodeCppHdrCode -> ModData;
		}
		subgraph blockcommentpcppsrccodecpphdrcode{
		BlockCommentpCppSrcCodeCppHdrCode	[shape=oval, color=red2, label="BlockCommentpCppSrcCodeCppHdrCode"];
		BlockCommentpCppSrcCodeCppHdrCode -> Doc;
		}
		subgraph srcstatesa{
		SrcStatesa	[shape=oval, color=red2, label="SrcStatesa"];
		SrcStatesa -> StatesCppSrcCodea;
		}
		subgraph hdrstatesa{
		HdrStatesa	[shape=oval, color=red2, label="HdrStatesa"];
		HdrStatesa -> StatesCppHdrCodea;
		}
		subgraph pairstatespa{
		PairStatespa	[shape=oval, color=red2, label="PairStatespa"];
		PairStatespa -> StatespCppSrcCodeCppHdrCodea;
		}
		subgraph programcppsrccode{
		ProgramCppSrcCode	[shape=oval, color=red2, label="ProgramCppSrcCode"];
		ProgramCppSrcCode -> ProgData;
		}
		subgraph filecppsrccode{
		FileCppSrcCode	[shape=oval, color=red2, label="FileCppSrcCode"];
		FileCppSrcCode -> FileData;
		}
		subgraph importcppsrccode{
		ImportCppSrcCode	[shape=oval, color=red2, label="ImportCppSrcCode"];
		ImportCppSrcCode -> Doc;
		}
		subgraph permanencecppsrccode{
		PermanenceCppSrcCode	[shape=oval, color=red2, label="PermanenceCppSrcCode"];
		PermanenceCppSrcCode -> BindData;
		}
		subgraph bodycppsrccode{
		BodyCppSrcCode	[shape=oval, color=red2, label="BodyCppSrcCode"];
		BodyCppSrcCode -> Doc;
		}
		subgraph blockcppsrccode{
		BlockCppSrcCode	[shape=oval, color=red2, label="BlockCppSrcCode"];
		BlockCppSrcCode -> Doc;
		}
		subgraph typecppsrccode{
		TypeCppSrcCode	[shape=oval, color=red2, label="TypeCppSrcCode"];
		TypeCppSrcCode -> TypeData;
		}
		subgraph unaryopcppsrccode{
		UnaryOpCppSrcCode	[shape=oval, color=red2, label="UnaryOpCppSrcCode"];
		UnaryOpCppSrcCode -> OpData;
		}
		subgraph binaryopcppsrccode{
		BinaryOpCppSrcCode	[shape=oval, color=red2, label="BinaryOpCppSrcCode"];
		BinaryOpCppSrcCode -> OpData;
		}
		subgraph variablecppsrccode{
		VariableCppSrcCode	[shape=oval, color=red2, label="VariableCppSrcCode"];
		VariableCppSrcCode -> VarData;
		}
		subgraph valuecppsrccode{
		ValueCppSrcCode	[shape=oval, color=red2, label="ValueCppSrcCode"];
		ValueCppSrcCode -> ValData;
		}
		subgraph functioncppsrccode{
		FunctionCppSrcCode	[shape=oval, color=red2, label="FunctionCppSrcCode"];
		FunctionCppSrcCode -> FuncData;
		}
		subgraph thunkcppsrccode{
		ThunkCppSrcCode	[shape=oval, color=red2, label="ThunkCppSrcCode"];
		ThunkCppSrcCode -> CommonThunkVS;
		}
		subgraph statementcppsrccode{
		StatementCppSrcCode	[shape=oval, color=red2, label="StatementCppSrcCode"];
		StatementCppSrcCode -> DocTerminator;
		}
		subgraph scopecppsrccode{
		ScopeCppSrcCode	[shape=oval, color=red2, label="ScopeCppSrcCode"];
		ScopeCppSrcCode -> DocScopeTag;
		}
		subgraph methodtypecppsrccode{
		MethodTypeCppSrcCode	[shape=oval, color=red2, label="MethodTypeCppSrcCode"];
		MethodTypeCppSrcCode -> TypeData;
		}
		subgraph parametercppsrccode{
		ParameterCppSrcCode	[shape=oval, color=red2, label="ParameterCppSrcCode"];
		ParameterCppSrcCode -> ParamData;
		}
		subgraph methodcppsrccode{
		MethodCppSrcCode	[shape=oval, color=red2, label="MethodCppSrcCode"];
		MethodCppSrcCode -> MethodData;
		}
		subgraph statevarcppsrccode{
		StateVarCppSrcCode	[shape=oval, color=red2, label="StateVarCppSrcCode"];
		StateVarCppSrcCode -> StateVarData;
		}
		subgraph classcppsrccode{
		ClassCppSrcCode	[shape=oval, color=red2, label="ClassCppSrcCode"];
		ClassCppSrcCode -> Doc;
		}
		subgraph modulecppsrccode{
		ModuleCppSrcCode	[shape=oval, color=red2, label="ModuleCppSrcCode"];
		ModuleCppSrcCode -> ModData;
		}
		subgraph blockcommentcppsrccode{
		BlockCommentCppSrcCode	[shape=oval, color=red2, label="BlockCommentCppSrcCode"];
		BlockCommentCppSrcCode -> Doc;
		}
		subgraph filecpphdrcode{
		FileCppHdrCode	[shape=oval, color=red2, label="FileCppHdrCode"];
		FileCppHdrCode -> FileData;
		}
		subgraph importcpphdrcode{
		ImportCppHdrCode	[shape=oval, color=red2, label="ImportCppHdrCode"];
		ImportCppHdrCode -> Doc;
		}
		subgraph permanencecpphdrcode{
		PermanenceCppHdrCode	[shape=oval, color=red2, label="PermanenceCppHdrCode"];
		PermanenceCppHdrCode -> BindData;
		}
		subgraph bodycpphdrcode{
		BodyCppHdrCode	[shape=oval, color=red2, label="BodyCppHdrCode"];
		BodyCppHdrCode -> Doc;
		}
		subgraph blockcpphdrcode{
		BlockCppHdrCode	[shape=oval, color=red2, label="BlockCppHdrCode"];
		BlockCppHdrCode -> Doc;
		}
		subgraph typecpphdrcode{
		TypeCppHdrCode	[shape=oval, color=red2, label="TypeCppHdrCode"];
		TypeCppHdrCode -> TypeData;
		}
		subgraph unaryopcpphdrcode{
		UnaryOpCppHdrCode	[shape=oval, color=red2, label="UnaryOpCppHdrCode"];
		UnaryOpCppHdrCode -> OpData;
		}
		subgraph binaryopcpphdrcode{
		BinaryOpCppHdrCode	[shape=oval, color=red2, label="BinaryOpCppHdrCode"];
		BinaryOpCppHdrCode -> OpData;
		}
		subgraph variablecpphdrcode{
		VariableCppHdrCode	[shape=oval, color=red2, label="VariableCppHdrCode"];
		VariableCppHdrCode -> VarData;
		}
		subgraph valuecpphdrcode{
		ValueCppHdrCode	[shape=oval, color=red2, label="ValueCppHdrCode"];
		ValueCppHdrCode -> ValData;
		}
		subgraph functioncpphdrcode{
		FunctionCppHdrCode	[shape=oval, color=red2, label="FunctionCppHdrCode"];
		FunctionCppHdrCode -> FuncData;
		}
		subgraph thunkcpphdrcode{
		ThunkCppHdrCode	[shape=oval, color=red2, label="ThunkCppHdrCode"];
		ThunkCppHdrCode -> CommonThunkVS;
		}
		subgraph statementcpphdrcode{
		StatementCppHdrCode	[shape=oval, color=red2, label="StatementCppHdrCode"];
		StatementCppHdrCode -> DocTerminator;
		}
		subgraph scopecpphdrcode{
		ScopeCppHdrCode	[shape=oval, color=red2, label="ScopeCppHdrCode"];
		ScopeCppHdrCode -> DocScopeTag;
		}
		subgraph methodtypecpphdrcode{
		MethodTypeCppHdrCode	[shape=oval, color=red2, label="MethodTypeCppHdrCode"];
		MethodTypeCppHdrCode -> TypeData;
		}
		subgraph parametercpphdrcode{
		ParameterCppHdrCode	[shape=oval, color=red2, label="ParameterCppHdrCode"];
		ParameterCppHdrCode -> ParamData;
		}
		subgraph methodcpphdrcode{
		MethodCppHdrCode	[shape=oval, color=red2, label="MethodCppHdrCode"];
		MethodCppHdrCode -> MethodData;
		}
		subgraph statevarcpphdrcode{
		StateVarCppHdrCode	[shape=oval, color=red2, label="StateVarCppHdrCode"];
		StateVarCppHdrCode -> StateVarData;
		}
		subgraph classcpphdrcode{
		ClassCppHdrCode	[shape=oval, color=red2, label="ClassCppHdrCode"];
		ClassCppHdrCode -> Doc;
		}
		subgraph modulecpphdrcode{
		ModuleCppHdrCode	[shape=oval, color=red2, label="ModuleCppHdrCode"];
		ModuleCppHdrCode -> ModData;
		}
		subgraph blockcommentcpphdrcode{
		BlockCommentCppHdrCode	[shape=oval, color=red2, label="BlockCommentCppHdrCode"];
		BlockCommentCppHdrCode -> Doc;
		}
	}
	subgraph javarenderer {
		subgraph javacodea{
		JavaCodea	[shape=oval, color=darkgreen, label="JavaCodea"];
		JavaCodea -> a;
		}
		subgraph programjavacode{
		ProgramJavaCode	[shape=oval, color=red2, label="ProgramJavaCode"];
		ProgramJavaCode -> ProgData;
		}
		subgraph filejavacode{
		FileJavaCode	[shape=oval, color=red2, label="FileJavaCode"];
		FileJavaCode -> FileData;
		}
		subgraph importjavacode{
		ImportJavaCode	[shape=oval, color=red2, label="ImportJavaCode"];
		ImportJavaCode -> Doc;
		}
		subgraph permanencejavacode{
		PermanenceJavaCode	[shape=oval, color=red2, label="PermanenceJavaCode"];
		PermanenceJavaCode -> Doc;
		}
		subgraph bodyjavacode{
		BodyJavaCode	[shape=oval, color=red2, label="BodyJavaCode"];
		BodyJavaCode -> Doc;
		}
		subgraph blockjavacode{
		BlockJavaCode	[shape=oval, color=red2, label="BlockJavaCode"];
		BlockJavaCode -> Doc;
		}
		subgraph typejavacode{
		TypeJavaCode	[shape=oval, color=red2, label="TypeJavaCode"];
		TypeJavaCode -> TypeData;
		}
		subgraph unaryopjavacode{
		UnaryOpJavaCode	[shape=oval, color=red2, label="UnaryOpJavaCode"];
		UnaryOpJavaCode -> OpData;
		}
		subgraph binaryopjavacode{
		BinaryOpJavaCode	[shape=oval, color=red2, label="BinaryOpJavaCode"];
		BinaryOpJavaCode -> OpData;
		}
		subgraph variablejavacode{
		VariableJavaCode	[shape=oval, color=red2, label="VariableJavaCode"];
		VariableJavaCode -> VarData;
		}
		subgraph valuejavacode{
		ValueJavaCode	[shape=oval, color=red2, label="ValueJavaCode"];
		ValueJavaCode -> ValData;
		}
		subgraph functionjavacode{
		FunctionJavaCode	[shape=oval, color=red2, label="FunctionJavaCode"];
		FunctionJavaCode -> FuncData;
		}
		subgraph thunkjavacode{
		ThunkJavaCode	[shape=oval, color=red2, label="ThunkJavaCode"];
		ThunkJavaCode -> CommonThunkVS;
		}
		subgraph statementjavacode{
		StatementJavaCode	[shape=oval, color=red2, label="StatementJavaCode"];
		StatementJavaCode -> DocTerminator;
		}
		subgraph scopejavacode{
		ScopeJavaCode	[shape=oval, color=red2, label="ScopeJavaCode"];
		ScopeJavaCode -> Doc;
		}
		subgraph methodtypejavacode{
		MethodTypeJavaCode	[shape=oval, color=red2, label="MethodTypeJavaCode"];
		MethodTypeJavaCode -> TypeData;
		}
		subgraph parameterjavacode{
		ParameterJavaCode	[shape=oval, color=red2, label="ParameterJavaCode"];
		ParameterJavaCode -> ParamData;
		}
		subgraph methodjavacode{
		MethodJavaCode	[shape=oval, color=red2, label="MethodJavaCode"];
		MethodJavaCode -> MethodData;
		}
		subgraph statevarjavacode{
		StateVarJavaCode	[shape=oval, color=red2, label="StateVarJavaCode"];
		StateVarJavaCode -> Doc;
		}
		subgraph classjavacode{
		ClassJavaCode	[shape=oval, color=red2, label="ClassJavaCode"];
		ClassJavaCode -> Doc;
		}
		subgraph modulejavacode{
		ModuleJavaCode	[shape=oval, color=red2, label="ModuleJavaCode"];
		ModuleJavaCode -> ModData;
		}
		subgraph blockcommentjavacode{
		BlockCommentJavaCode	[shape=oval, color=red2, label="BlockCommentJavaCode"];
		BlockCommentJavaCode -> Doc;
		}
	}
	subgraph languagepolymorpich {
		subgraph optionalspace{
		OptionalSpace	[shape=oval, color=darkgreen, label="OptionalSpace"];
		OptionalSpace -> Doc;
		}
	}
	subgraph macros {
	}
	subgraph pytonrendererh {
		subgraph pythoncodea{
		PythonCodea	[shape=oval, color=darkgreen, label="PythonCodea"];
		PythonCodea -> a;
		}
		subgraph programpythoncode{
		ProgramPythonCode	[shape=oval, color=red2, label="ProgramPythonCode"];
		ProgramPythonCode -> ProgData;
		}
		subgraph filepythoncode{
		FilePythonCode	[shape=oval, color=red2, label="FilePythonCode"];
		FilePythonCode -> FileData;
		}
		subgraph importpythoncode{
		ImportPythonCode	[shape=oval, color=red2, label="ImportPythonCode"];
		ImportPythonCode -> Doc;
		}
		subgraph permanencepythoncode{
		PermanencePythonCode	[shape=oval, color=red2, label="PermanencePythonCode"];
		PermanencePythonCode -> Doc;
		}
		subgraph bodypythoncode{
		BodyPythonCode	[shape=oval, color=red2, label="BodyPythonCode"];
		BodyPythonCode -> Doc;
		}
		subgraph blockpythoncode{
		BlockPythonCode	[shape=oval, color=red2, label="BlockPythonCode"];
		BlockPythonCode -> Doc;
		}
		subgraph typepythoncode{
		TypePythonCode	[shape=oval, color=red2, label="TypePythonCode"];
		TypePythonCode -> TypeData;
		}
		subgraph unaryoppythoncode{
		UnaryOpPythonCode	[shape=oval, color=red2, label="UnaryOpPythonCode"];
		UnaryOpPythonCode -> OpData;
		}
		subgraph binaryoppythoncode{
		BinaryOpPythonCode	[shape=oval, color=red2, label="BinaryOpPythonCode"];
		BinaryOpPythonCode -> OpData;
		}
		subgraph variablepythoncode{
		VariablePythonCode	[shape=oval, color=red2, label="VariablePythonCode"];
		VariablePythonCode -> VarData;
		}
		subgraph valuepythoncode{
		ValuePythonCode	[shape=oval, color=red2, label="ValuePythonCode"];
		ValuePythonCode -> ValData;
		}
		subgraph functionpythoncode{
		FunctionPythonCode	[shape=oval, color=red2, label="FunctionPythonCode"];
		FunctionPythonCode -> FuncData;
		}
		subgraph thunkpythoncode{
		ThunkPythonCode	[shape=oval, color=red2, label="ThunkPythonCode"];
		ThunkPythonCode -> CommonThunkVS;
		}
		subgraph statementpythoncode{
		StatementPythonCode	[shape=oval, color=red2, label="StatementPythonCode"];
		StatementPythonCode -> DocTerminator;
		}
		subgraph scopepythoncode{
		ScopePythonCode	[shape=oval, color=red2, label="ScopePythonCode"];
		ScopePythonCode -> Doc;
		}
		subgraph methodtypepythoncode{
		MethodTypePythonCode	[shape=oval, color=red2, label="MethodTypePythonCode"];
		MethodTypePythonCode -> TypeData;
		}
		subgraph parameterpythoncode{
		ParameterPythonCode	[shape=oval, color=red2, label="ParameterPythonCode"];
		ParameterPythonCode -> ParamData;
		}
		subgraph methodpythoncode{
		MethodPythonCode	[shape=oval, color=red2, label="MethodPythonCode"];
		MethodPythonCode -> MethodData;
		}
		subgraph statevarpythoncode{
		StateVarPythonCode	[shape=oval, color=red2, label="StateVarPythonCode"];
		StateVarPythonCode -> Doc;
		}
		subgraph classpythoncode{
		ClassPythonCode	[shape=oval, color=red2, label="ClassPythonCode"];
		ClassPythonCode -> Doc;
		}
		subgraph modulepythoncode{
		ModulePythonCode	[shape=oval, color=red2, label="ModulePythonCode"];
		ModulePythonCode -> ModData;
		}
		subgraph blockcommentpythoncode{
		BlockCommentPythonCode	[shape=oval, color=red2, label="BlockCommentPythonCode"];
		BlockCommentPythonCode -> Doc;
		}
	}
	subgraph swiftrenderer {
		subgraph swiftcodea{
		SwiftCodea	[shape=oval, color=darkgreen, label="SwiftCodea"];
		SwiftCodea -> a;
		}
		subgraph programswiftcode{
		ProgramSwiftCode	[shape=oval, color=red2, label="ProgramSwiftCode"];
		ProgramSwiftCode -> ProgData;
		}
		subgraph fileswiftcode{
		FileSwiftCode	[shape=oval, color=red2, label="FileSwiftCode"];
		FileSwiftCode -> FileData;
		}
		subgraph importswiftcode{
		ImportSwiftCode	[shape=oval, color=red2, label="ImportSwiftCode"];
		ImportSwiftCode -> Doc;
		}
		subgraph permanenceswiftcode{
		PermanenceSwiftCode	[shape=oval, color=red2, label="PermanenceSwiftCode"];
		PermanenceSwiftCode -> Doc;
		}
		subgraph bodyswiftcode{
		BodySwiftCode	[shape=oval, color=red2, label="BodySwiftCode"];
		BodySwiftCode -> Doc;
		}
		subgraph blockswiftcode{
		BlockSwiftCode	[shape=oval, color=red2, label="BlockSwiftCode"];
		BlockSwiftCode -> Doc;
		}
		subgraph typeswiftcode{
		TypeSwiftCode	[shape=oval, color=red2, label="TypeSwiftCode"];
		TypeSwiftCode -> TypeData;
		}
		subgraph unaryopswiftcode{
		UnaryOpSwiftCode	[shape=oval, color=red2, label="UnaryOpSwiftCode"];
		UnaryOpSwiftCode -> OpData;
		}
		subgraph binaryopswiftcode{
		BinaryOpSwiftCode	[shape=oval, color=red2, label="BinaryOpSwiftCode"];
		BinaryOpSwiftCode -> OpData;
		}
		subgraph variableswiftcode{
		VariableSwiftCode	[shape=oval, color=red2, label="VariableSwiftCode"];
		VariableSwiftCode -> VarData;
		}
		subgraph valueswiftcode{
		ValueSwiftCode	[shape=oval, color=red2, label="ValueSwiftCode"];
		ValueSwiftCode -> ValData;
		}
		subgraph functionswiftcode{
		FunctionSwiftCode	[shape=oval, color=red2, label="FunctionSwiftCode"];
		FunctionSwiftCode -> FuncData;
		}
		subgraph thunkswiftcode{
		ThunkSwiftCode	[shape=oval, color=red2, label="ThunkSwiftCode"];
		ThunkSwiftCode -> CommonThunkVS;
		}
		subgraph statementswiftcode{
		StatementSwiftCode	[shape=oval, color=red2, label="StatementSwiftCode"];
		StatementSwiftCode -> DocTerminator;
		}
		subgraph scopeswiftcode{
		ScopeSwiftCode	[shape=oval, color=red2, label="ScopeSwiftCode"];
		ScopeSwiftCode -> Doc;
		}
		subgraph methodtypeswiftcode{
		MethodTypeSwiftCode	[shape=oval, color=red2, label="MethodTypeSwiftCode"];
		MethodTypeSwiftCode -> TypeData;
		}
		subgraph parameterswiftcode{
		ParameterSwiftCode	[shape=oval, color=red2, label="ParameterSwiftCode"];
		ParameterSwiftCode -> ParamData;
		}
		subgraph methodswiftcode{
		MethodSwiftCode	[shape=oval, color=red2, label="MethodSwiftCode"];
		MethodSwiftCode -> MethodData;
		}
		subgraph statevarswiftcode{
		StateVarSwiftCode	[shape=oval, color=red2, label="StateVarSwiftCode"];
		StateVarSwiftCode -> Doc;
		}
		subgraph classswiftcode{
		ClassSwiftCode	[shape=oval, color=red2, label="ClassSwiftCode"];
		ClassSwiftCode -> Doc;
		}
		subgraph moduleswiftcode{
		ModuleSwiftCode	[shape=oval, color=red2, label="ModuleSwiftCode"];
		ModuleSwiftCode -> ModData;
		}
		subgraph blockcommentswiftcode{
		BlockCommentSwiftCode	[shape=oval, color=red2, label="BlockCommentSwiftCode"];
		BlockCommentSwiftCode -> Doc;
		}
	}
	subgraph ast {
		subgraph binddata{
		BindData	[shape=oval, color=cyan3, label="BindData"];
		BindData -> Binding;
		BindData -> Doc;
		}
		subgraph filedata{
		FileData	[shape=oval, color=cyan3, label="FileData"];
		FileData -> FilePath;
		FileData -> ModData;
		}
		subgraph funcdata{
		FuncData	[shape=oval, color=cyan3, label="FuncData"];
		FuncData -> TypeData;
		FuncData -> Doc;
		}
		subgraph moddata{
		ModData	[shape=oval, color=cyan3, label="ModData"];
		ModData -> String;
		ModData -> Doc;
		}
		subgraph opdata{
		OpData	[shape=oval, color=cyan3, label="OpData"];
		OpData -> Int;
		OpData -> Doc;
		}
		subgraph paramdata{
		ParamData	[shape=oval, color=cyan3, label="ParamData"];
		ParamData -> VarData;
		ParamData -> Doc;
		}
		subgraph progdata{
		ProgData	[shape=oval, color=cyan3, label="ProgData"];
		ProgData -> String;
		ProgData -> FileData;
		}
		subgraph statevardata{
		StateVarData	[shape=oval, color=cyan3, label="StateVarData"];
		StateVarData -> ScopeTag;
		StateVarData -> Doc;
		}
		subgraph typedata{
		TypeData	[shape=oval, color=cyan3, label="TypeData"];
		TypeData -> CodeType;
		TypeData -> String;
		TypeData -> Doc;
		}
		subgraph valdata{
		ValData	[shape=oval, color=cyan3, label="ValData"];
		ValData -> MaybeInt;
		ValData -> MaybeInteger;
		ValData -> TypeData;
		ValData -> Doc;
		}
		subgraph vardata{
		VarData	[shape=oval, color=cyan3, label="VarData"];
		VarData -> Binding;
		VarData -> String;
		VarData -> TypeData;
		VarData -> Doc;
		}
		subgraph terminator{
		Terminator	[shape=oval, color=darkviolet, label="Terminator"];
		}
		subgraph scopetag{
		ScopeTag	[shape=oval, color=darkviolet, label="ScopeTag"];
		}
		subgraph qualifiedname{
		QualifiedName	[shape=oval, color=darkviolet, label="QualifiedName"];
		QualifiedName -> String;
		QualifiedName -> QualifiedName;
		}
		subgraph filetype{
		FileType	[shape=oval, color=darkviolet, label="FileType"];
		}
		subgraph binding{
		Binding	[shape=oval, color=darkviolet, label="Binding"];
		Binding -> Binding;
		Binding -> a;
		}
		subgraph commonthunks{
		CommonThunks	[shape=oval, color=darkviolet, label="CommonThunks"];
		}
		subgraph methoddata{
		MethodData	[shape=oval, color=darkgreen, label="MethodData"];
		MethodData -> Doc;
		}
	}
	subgraph clasess {
	}
	subgraph codeanalyiss {
		subgraph exceptiontype{
		ExceptionType	[shape=oval, color=darkviolet, label="ExceptionType"];
		ExceptionType -> String;
		}
	}
	subgraph codeinfo {
		subgraph codeinfoa{
		CodeInfoa	[shape=oval, color=darkgreen, label="CodeInfoa"];
		CodeInfoa -> a;
		}
		subgraph programcodeinfo{
		ProgramCodeInfo	[shape=oval, color=red2, label="ProgramCodeInfo"];
		ProgramCodeInfo -> GOOLState;
		}
		subgraph filecodeinfo{
		FileCodeInfo	[shape=oval, color=red2, label="FileCodeInfo"];
		}
		subgraph permanencecodeinfo{
		PermanenceCodeInfo	[shape=oval, color=red2, label="PermanenceCodeInfo"];
		}
		subgraph bodycodeinfo{
		BodyCodeInfo	[shape=oval, color=red2, label="BodyCodeInfo"];
		}
		subgraph blockcodeinfo{
		BlockCodeInfo	[shape=oval, color=red2, label="BlockCodeInfo"];
		}
		subgraph typecodeinfo{
		TypeCodeInfo	[shape=oval, color=red2, label="TypeCodeInfo"];
		TypeCodeInfo -> String;
		}
		subgraph variablecodeinfo{
		VariableCodeInfo	[shape=oval, color=red2, label="VariableCodeInfo"];
		}
		subgraph valuecodeinfo{
		ValueCodeInfo	[shape=oval, color=red2, label="ValueCodeInfo"];
		}
		subgraph functioncodeinfo{
		FunctionCodeInfo	[shape=oval, color=red2, label="FunctionCodeInfo"];
		}
		subgraph thunkcodeinfo{
		ThunkCodeInfo	[shape=oval, color=red2, label="ThunkCodeInfo"];
		}
		subgraph statementcodeinfo{
		StatementCodeInfo	[shape=oval, color=red2, label="StatementCodeInfo"];
		}
		subgraph scopecodeinfo{
		ScopeCodeInfo	[shape=oval, color=red2, label="ScopeCodeInfo"];
		ScopeCodeInfo -> ScopeTag;
		}
		subgraph parametercodeinfo{
		ParameterCodeInfo	[shape=oval, color=red2, label="ParameterCodeInfo"];
		}
		subgraph methodcodeinfo{
		MethodCodeInfo	[shape=oval, color=red2, label="MethodCodeInfo"];
		}
		subgraph statevarcodeinfo{
		StateVarCodeInfo	[shape=oval, color=red2, label="StateVarCodeInfo"];
		}
		subgraph classcodeinfo{
		ClassCodeInfo	[shape=oval, color=red2, label="ClassCodeInfo"];
		}
		subgraph modulecodeinfo{
		ModuleCodeInfo	[shape=oval, color=red2, label="ModuleCodeInfo"];
		}
	}
	subgraph codetype {
		subgraph codetype{
		CodeType	[shape=oval, color=darkviolet, label="CodeType"];
		}
		subgraph classname{
		ClassName	[shape=oval, color=red2, label="ClassName"];
		ClassName -> String;
		}
	}
	subgraph helpers {
	}
	subgraph interfacecommon {
		subgraph label{
		Label	[shape=oval, color=red2, label="Label"];
		Label -> String;
		}
		subgraph library{
		Library	[shape=oval, color=red2, label="Library"];
		Library -> String;
		}
		subgraph msbodya{
		MSBodya	[shape=oval, color=red2, label="MSBodya"];
		MSBodya -> MSaBodya;
		}
		subgraph msblocka{
		MSBlocka	[shape=oval, color=red2, label="MSBlocka"];
		MSBlocka -> MSaBlocka;
		}
		subgraph vstypea{
		VSTypea	[shape=oval, color=red2, label="VSTypea"];
		VSTypea -> VSaTypea;
		}
		subgraph svariablea{
		SVariablea	[shape=oval, color=red2, label="SVariablea"];
		SVariablea -> VSaVariablea;
		}
		subgraph svaluea{
		SValuea	[shape=oval, color=red2, label="SValuea"];
		SValuea -> VSaValuea;
		}
		subgraph namedargsr{
		NamedArgsr	[shape=oval, color=red2, label="NamedArgsr"];
		NamedArgsr -> SVariablerSValuer;
		}
		subgraph mixedcallr{
		MixedCallr	[shape=oval, color=red2, label="MixedCallr"];
		MixedCallr -> LabelVSTyperSValuerNamedArgsrSValuer;
		}
		subgraph mixedctorcallr{
		MixedCtorCallr	[shape=oval, color=red2, label="MixedCtorCallr"];
		MixedCtorCallr -> VSTyperSValuerNamedArgsrSValuer;
		}
		subgraph poscallr{
		PosCallr	[shape=oval, color=red2, label="PosCallr"];
		PosCallr -> LabelVSTyperSValuerSValuer;
		}
		subgraph posctorcallr{
		PosCtorCallr	[shape=oval, color=red2, label="PosCtorCallr"];
		PosCtorCallr -> VSTyperSValuerSValuer;
		}
		subgraph vsthunka{
		VSThunka	[shape=oval, color=red2, label="VSThunka"];
		VSThunka -> VSaThunka;
		}
		subgraph msstatementa{
		MSStatementa	[shape=oval, color=red2, label="MSStatementa"];
		MSStatementa -> MSaStatementa;
		}
		subgraph inoutcallr{
		InOutCallr	[shape=oval, color=red2, label="InOutCallr"];
		InOutCallr -> LabelSValuerSVariablerSVariabler;
		}
		subgraph msparametera{
		MSParametera	[shape=oval, color=red2, label="MSParametera"];
		MSParametera -> MSaParametera;
		}
		subgraph smethoda{
		SMethoda	[shape=oval, color=red2, label="SMethoda"];
		SMethoda -> MSaMethoda;
		}
		subgraph initializersr{
		Initializersr	[shape=oval, color=red2, label="Initializersr"];
		Initializersr -> SVariablerSValuer;
		}
		subgraph inoutfuncr{
		InOutFuncr	[shape=oval, color=red2, label="InOutFuncr"];
		InOutFuncr -> SVariablerSVariablerSVariabler;
		}
		subgraph docinoutfuncr{
		DocInOutFuncr	[shape=oval, color=red2, label="DocInOutFuncr"];
		DocInOutFuncr -> StringStringSVariabler;
		}
	}
	subgraph interfacegool {
		subgraph gsprograma{
		GSPrograma	[shape=oval, color=red2, label="GSPrograma"];
		GSPrograma -> GSaPrograma;
		}
		subgraph sfilea{
		SFilea	[shape=oval, color=red2, label="SFilea"];
		SFilea -> FSaFilea;
		}
		subgraph fsmodulea{
		FSModulea	[shape=oval, color=red2, label="FSModulea"];
		FSModulea -> FSaModulea;
		}
		subgraph sclassa{
		SClassa	[shape=oval, color=red2, label="SClassa"];
		SClassa -> CSaClassa;
		}
		subgraph csstatevara{
		CSStateVara	[shape=oval, color=red2, label="CSStateVara"];
		CSStateVara -> CSaStateVara;
		}
		subgraph vsfunctiona{
		VSFunctiona	[shape=oval, color=red2, label="VSFunctiona"];
		VSFunctiona -> VSaFunctiona;
		}
	}
	subgraph interfaceproc {
		subgraph gsprograma{
		GSPrograma	[shape=oval, color=red2, label="GSPrograma"];
		GSPrograma -> GSaPrograma;
		}
		subgraph sfilea{
		SFilea	[shape=oval, color=red2, label="SFilea"];
		SFilea -> FSaFilea;
		}
		subgraph fsmodulea{
		FSModulea	[shape=oval, color=red2, label="FSModulea"];
		FSModulea -> FSaModulea;
		}
	}
	subgraph languagerenderer {
		subgraph funcdocrenderer{
		FuncDocRenderer	[shape=oval, color=red2, label="FuncDocRenderer"];
		FuncDocRenderer -> StringStringStringStringString;
		}
		subgraph classdocrenderer{
		ClassDocRenderer	[shape=oval, color=red2, label="ClassDocRenderer"];
		ClassDocRenderer -> StringString;
		}
		subgraph moduledocrenderer{
		ModuleDocRenderer	[shape=oval, color=red2, label="ModuleDocRenderer"];
		ModuleDocRenderer -> StringStringStringStringString;
		}
	}
	subgraph rendererclasess {
		subgraph vsunopa{
		VSUnOpa	[shape=oval, color=red2, label="VSUnOpa"];
		VSUnOpa -> VSaUnaryOpa;
		}
		subgraph vsbinopa{
		VSBinOpa	[shape=oval, color=red2, label="VSBinOpa"];
		VSBinOpa -> VSaBinaryOpa;
		}
		subgraph msmthdtypea{
		MSMthdTypea	[shape=oval, color=red2, label="MSMthdTypea"];
		MSMthdTypea -> MSaMethodTypea;
		}
		subgraph parentspec{
		ParentSpec	[shape=oval, color=red2, label="ParentSpec"];
		ParentSpec -> Doc;
		}
	}
	subgraph state {
		subgraph goolstate{
		GOOLState	[shape=oval, color=cyan3, label="GOOLState"];
		GOOLState -> FilePath;
		GOOLState -> MaybeFilePath;
		GOOLState -> MapStringClassName;
		GOOLState -> MapQualifiedNameExceptionType;
		GOOLState -> MapQualifiedNameQualifiedName;
		GOOLState -> Bool;
		}
		subgraph filestate{
		FileState	[shape=oval, color=cyan3, label="FileState"];
		FileState -> GOOLState;
		FileState -> String;
		FileState -> FileType;
		FileState -> Bool;
		FileState -> ClassName;
		FileState -> Doc;
		}
		subgraph classstate{
		ClassState	[shape=oval, color=cyan3, label="ClassState"];
		ClassState -> FileState;
		ClassState -> ClassName;
		}
		subgraph methodstate{
		MethodState	[shape=oval, color=cyan3, label="MethodState"];
		MethodState -> ClassState;
		MethodState -> String;
		MethodState -> MapStringInt;
		MethodState -> Bool;
		MethodState -> ExceptionType;
		MethodState -> QualifiedName;
		MethodState -> ScopeTag;
		MethodState -> Index;
		}
		subgraph valuestate{
		ValueState	[shape=oval, color=darkgreen, label="ValueState"];
		}
		subgraph index{
		Index	[shape=oval, color=red2, label="Index"];
		Index -> Integer;
		}
		subgraph gs{
		GS	[shape=oval, color=red2, label="GS"];
		GS -> StateGOOLState;
		}
		subgraph fs{
		FS	[shape=oval, color=red2, label="FS"];
		FS -> StateFileState;
		}
		subgraph cs{
		CS	[shape=oval, color=red2, label="CS"];
		CS -> StateClassState;
		}
		subgraph ms{
		MS	[shape=oval, color=red2, label="MS"];
		MS -> StateMethodState;
		}
		subgraph vs{
		VS	[shape=oval, color=red2, label="VS"];
		VS -> StateValueState;
		}
	}
	subgraph drails {
	}
	subgraph core {
		subgraph conceptchunk{
		ConceptChunk	[shape=oval, color=cyan3, label="ConceptChunk"];
		ConceptChunk -> IdeaDict;
		ConceptChunk -> Sentence;
		ConceptChunk -> UID;
		}
		subgraph conceptinstance{
		ConceptInstance	[shape=oval, color=cyan3, label="ConceptInstance"];
		ConceptInstance -> ConceptChunk;
		ConceptInstance -> String;
		ConceptInstance -> ShortName;
		}
	}
	subgraph namedcombinators {
	}
	subgraph citation {
		subgraph citation{
		Citation	[shape=oval, color=cyan3, label="Citation"];
		Citation -> CitationKind;
		Citation -> CiteField;
		Citation -> UID;
		Citation -> ShortName;
		}
		subgraph bibref{
		BibRef	[shape=oval, color=red2, label="BibRef"];
		BibRef -> Citation;
		}
		subgraph entryid{
		EntryID	[shape=oval, color=red2, label="EntryID"];
		EntryID -> String;
		}
	}
	subgraph codevar {
		subgraph varorfunc{
		VarOrFunc	[shape=oval, color=cyan3, label="VarOrFunc"];
		VarOrFunc -> QuantityDict;
		VarOrFunc -> VarOrFunc;
		}
		subgraph codevarchunk{
		CodeVarChunk	[shape=oval, color=cyan3, label="CodeVarChunk"];
		CodeVarChunk -> CodeChunk;
		CodeVarChunk -> MaybeCodeChunk;
		}
		subgraph codefuncchunk{
		CodeFuncChunk	[shape=oval, color=darkgreen, label="CodeFuncChunk"];
		CodeFuncChunk -> CodeChunk;
		}
	}
	subgraph commonidea {
		subgraph ci{
		CI	[shape=oval, color=cyan3, label="CI"];
		CI -> IdeaDict;
		CI -> String;
		CI -> UID;
		}
	}
	subgraph concept {
	}
	subgraph contraineds {
		subgraph constrainedchunk{
		ConstrainedChunk	[shape=oval, color=cyan3, label="ConstrainedChunk"];
		ConstrainedChunk -> QuantityDict;
		ConstrainedChunk -> ConstraintE;
		ConstrainedChunk -> MaybeExpr;
		}
		subgraph constrconcept{
		ConstrConcept	[shape=oval, color=cyan3, label="ConstrConcept"];
		ConstrConcept -> DefinedQuantityDict;
		ConstrConcept -> ConstraintE;
		ConstrConcept -> MaybeExpr;
		}
	}
	subgraph definedquantity {
		subgraph definedquantitydict{
		DefinedQuantityDict	[shape=oval, color=cyan3, label="DefinedQuantityDict"];
		DefinedQuantityDict -> ConceptChunk;
		DefinedQuantityDict -> StageSymbol;
		DefinedQuantityDict -> Space;
		DefinedQuantityDict -> MaybeUnitDefn;
		}
	}
	subgraph differentialmodel {
		subgraph term{
		Term	[shape=oval, color=cyan3, label="Term"];
		Term -> Expr;
		Term -> Unknown;
		}
		subgraph differentialmodel{
		DifferentialModel	[shape=oval, color=cyan3, label="DifferentialModel"];
		DifferentialModel -> UnitalChunk;
		DifferentialModel -> ConstrConcept;
		DifferentialModel -> Expr;
		DifferentialModel -> Unknown;
		DifferentialModel -> ConceptChunk;
		}
		subgraph initialvalueproblem{
		InitialValueProblem	[shape=oval, color=cyan3, label="InitialValueProblem"];
		InitialValueProblem -> Expr;
		}
		subgraph odesolverformat{
		ODESolverFormat	[shape=oval, color=cyan3, label="ODESolverFormat"];
		ODESolverFormat -> Expr;
		ODESolverFormat -> Integer;
		}
		subgraph unknown{
		Unknown	[shape=oval, color=red2, label="Unknown"];
		Unknown -> Integer;
		}
		subgraph lhs{
		LHS	[shape=oval, color=red2, label="LHS"];
		LHS -> Term;
		}
	}
	subgraph eq {
		subgraph qdefinitione{
		QDefinitione	[shape=oval, color=darkviolet, label="QDefinitione"];
		QDefinitione -> DefinedQuantityDict;
		QDefinitione -> UID;
		QDefinitione -> e;
		QDefinitione -> QDefinition;
		QDefinitione -> Lens_;
		}
	}
	subgraph namedidea {
		subgraph ideadict{
		IdeaDict	[shape=oval, color=cyan3, label="IdeaDict"];
		IdeaDict -> UID;
		IdeaDict -> NP;
		IdeaDict -> MaybeString;
		}
	}
	subgraph quantity {
		subgraph quantitydict{
		QuantityDict	[shape=oval, color=cyan3, label="QuantityDict"];
		QuantityDict -> IdeaDict;
		QuantityDict -> Space;
		QuantityDict -> StageSymbol;
		QuantityDict -> MaybeUnitDefn;
		}
	}
	subgraph relation {
		subgraph relationconcept{
		RelationConcept	[shape=oval, color=cyan3, label="RelationConcept"];
		RelationConcept -> ConceptChunk;
		RelationConcept -> ModelExpr;
		}
	}
	subgraph uncertainquantity {
		subgraph uncertainchunk{
		UncertainChunk	[shape=oval, color=cyan3, label="UncertainChunk"];
		UncertainChunk -> ConstrainedChunk;
		UncertainChunk -> Uncertainty;
		}
		subgraph uncertq{
		UncertQ	[shape=oval, color=cyan3, label="UncertQ"];
		UncertQ -> ConstrConcept;
		UncertQ -> Uncertainty;
		}
	}
	subgraph unitdefn {
		subgraph unitdefn{
		UnitDefn	[shape=oval, color=cyan3, label="UnitDefn"];
		UnitDefn -> ConceptChunk;
		UnitDefn -> UnitSymbol;
		UnitDefn -> UID;
		}
		subgraph unitequation{
		UnitEquation	[shape=oval, color=cyan3, label="UnitEquation"];
		UnitEquation -> UID;
		UnitEquation -> USymb;
		}
	}
	subgraph unital {
		subgraph unitalchunk{
		UnitalChunk	[shape=oval, color=cyan3, label="UnitalChunk"];
		UnitalChunk -> DefinedQuantityDict;
		UnitalChunk -> UnitDefn;
		}
	}
	subgraph unitary {
		subgraph unitarychunk{
		UnitaryChunk	[shape=oval, color=cyan3, label="UnitaryChunk"];
		UnitaryChunk -> QuantityDict;
		UnitaryChunk -> UnitDefn;
		}
	}
	subgraph class {
	}
	subgraph convert {
	}
	subgraph development {
	}
	subgraph extract {
	}
	subgraph lang {
		subgraph arithbinop{
		ArithBinOp	[shape=oval, color=darkviolet, label="ArithBinOp"];
		}
		subgraph eqbinop{
		EqBinOp	[shape=oval, color=darkviolet, label="EqBinOp"];
		}
		subgraph boolbinop{
		BoolBinOp	[shape=oval, color=darkviolet, label="BoolBinOp"];
		}
		subgraph labinop{
		LABinOp	[shape=oval, color=darkviolet, label="LABinOp"];
		}
		subgraph ordbinop{
		OrdBinOp	[shape=oval, color=darkviolet, label="OrdBinOp"];
		}
		subgraph vvvbinop{
		VVVBinOp	[shape=oval, color=darkviolet, label="VVVBinOp"];
		}
		subgraph vvnbinop{
		VVNBinOp	[shape=oval, color=darkviolet, label="VVNBinOp"];
		}
		subgraph nvvbinop{
		NVVBinOp	[shape=oval, color=darkviolet, label="NVVBinOp"];
		}
		subgraph assocarithoper{
		AssocArithOper	[shape=oval, color=darkviolet, label="AssocArithOper"];
		}
		subgraph assocbooloper{
		AssocBoolOper	[shape=oval, color=darkviolet, label="AssocBoolOper"];
		}
		subgraph ufunc{
		UFunc	[shape=oval, color=darkviolet, label="UFunc"];
		}
		subgraph ufuncb{
		UFuncB	[shape=oval, color=darkviolet, label="UFuncB"];
		}
		subgraph ufuncvv{
		UFuncVV	[shape=oval, color=darkviolet, label="UFuncVV"];
		}
		subgraph ufuncvn{
		UFuncVN	[shape=oval, color=darkviolet, label="UFuncVN"];
		}
		subgraph codeexpr{
		CodeExpr	[shape=oval, color=darkviolet, label="CodeExpr"];
		CodeExpr -> Literal;
		CodeExpr -> CodeExpr;
		CodeExpr -> AssocArithOper;
		CodeExpr -> AssocBoolOper;
		CodeExpr -> UID;
		CodeExpr -> Completeness;
		CodeExpr -> UFunc;
		CodeExpr -> UFuncB;
		CodeExpr -> UFuncVV;
		CodeExpr -> UFuncVN;
		CodeExpr -> ArithBinOp;
		CodeExpr -> BoolBinOp;
		CodeExpr -> EqBinOp;
		CodeExpr -> LABinOp;
		CodeExpr -> OrdBinOp;
		CodeExpr -> VVVBinOp;
		CodeExpr -> VVNBinOp;
		CodeExpr -> NVVBinOp;
		CodeExpr -> DiscreteDomainDesc;
		CodeExpr -> RealInterval;
		}
	}
	subgraph precedence {
	}
	subgraph citation {
		subgraph citefield{
		CiteField	[shape=oval, color=darkviolet, label="CiteField"];
		CiteField -> String;
		CiteField -> People;
		}
		subgraph hp{
		HP	[shape=oval, color=darkviolet, label="HP"];
		HP -> String;
		}
		subgraph citationkind{
		CitationKind	[shape=oval, color=darkviolet, label="CitationKind"];
		CitationKind -> editor;
		CitationKind -> People;
		CitationKind -> CiteField;
		}
	}
	subgraph date {
		subgraph month{
		Month	[shape=oval, color=darkviolet, label="Month"];
		}
	}
	subgraph sentence {
	}
	subgraph combinators {
	}
	subgraph contents {
	}
	subgraph core {
		subgraph labelledcontent{
		LabelledContent	[shape=oval, color=cyan3, label="LabelledContent"];
		LabelledContent -> Reference;
		LabelledContent -> RawContent;
		}
		subgraph listtype{
		ListType	[shape=oval, color=darkviolet, label="ListType"];
		ListType -> ItemType;
		ListType -> Maybe;
		ListType -> String;
		}
		subgraph itemtype{
		ItemType	[shape=oval, color=darkviolet, label="ItemType"];
		ItemType -> Sentence;
		}
		subgraph contents{
		Contents	[shape=oval, color=darkviolet, label="Contents"];
		Contents -> UnlabelledContent;
		Contents -> LabelledContent;
		}
		subgraph dtype{
		DType	[shape=oval, color=darkviolet, label="DType"];
		}
		subgraph rawcontent{
		RawContent	[shape=oval, color=darkviolet, label="RawContent"];
		RawContent -> Sentence;
		RawContent -> Title;
		RawContent -> Bool;
		}
		subgraph unlabelledcontent{
		UnlabelledContent	[shape=oval, color=darkgreen, label="UnlabelledContent"];
		UnlabelledContent -> RawContent;
		}
		subgraph maxwidthpercent{
		MaxWidthPercent	[shape=oval, color=red2, label="MaxWidthPercent"];
		MaxWidthPercent -> Float;
		}
		subgraph title{
		Title	[shape=oval, color=red2, label="Title"];
		Title -> Sentence;
		}
		subgraph author{
		Author	[shape=oval, color=red2, label="Author"];
		Author -> Sentence;
		}
		subgraph header{
		Header	[shape=oval, color=red2, label="Header"];
		Header -> Sentence;
		}
		subgraph depth{
		Depth	[shape=oval, color=red2, label="Depth"];
		Depth -> Int;
		}
		subgraph width{
		Width	[shape=oval, color=red2, label="Width"];
		Width -> Float;
		}
		subgraph height{
		Height	[shape=oval, color=red2, label="Height"];
		Height -> Float;
		}
		subgraph listtuple{
		ListTuple	[shape=oval, color=red2, label="ListTuple"];
		ListTuple -> TitleItemTypeMaybeString;
		}
		subgraph filepath{
		Filepath	[shape=oval, color=red2, label="Filepath"];
		Filepath -> String;
		}
		subgraph lbl{
		Lbl	[shape=oval, color=red2, label="Lbl"];
		Lbl -> Sentence;
		}
		subgraph identifier{
		Identifier	[shape=oval, color=red2, label="Identifier"];
		Identifier -> String;
		}
	}
	subgraph class {
	}
	subgraph development {
	}
	subgraph extract {
	}
	subgraph lang {
		subgraph arithbinop{
		ArithBinOp	[shape=oval, color=darkviolet, label="ArithBinOp"];
		}
		subgraph eqbinop{
		EqBinOp	[shape=oval, color=darkviolet, label="EqBinOp"];
		}
		subgraph boolbinop{
		BoolBinOp	[shape=oval, color=darkviolet, label="BoolBinOp"];
		}
		subgraph labinop{
		LABinOp	[shape=oval, color=darkviolet, label="LABinOp"];
		}
		subgraph ordbinop{
		OrdBinOp	[shape=oval, color=darkviolet, label="OrdBinOp"];
		}
		subgraph vvvbinop{
		VVVBinOp	[shape=oval, color=darkviolet, label="VVVBinOp"];
		}
		subgraph vvnbinop{
		VVNBinOp	[shape=oval, color=darkviolet, label="VVNBinOp"];
		}
		subgraph nvvbinop{
		NVVBinOp	[shape=oval, color=darkviolet, label="NVVBinOp"];
		}
		subgraph assocarithoper{
		AssocArithOper	[shape=oval, color=darkviolet, label="AssocArithOper"];
		}
		subgraph assocbooloper{
		AssocBoolOper	[shape=oval, color=darkviolet, label="AssocBoolOper"];
		}
		subgraph ufunc{
		UFunc	[shape=oval, color=darkviolet, label="UFunc"];
		}
		subgraph ufuncb{
		UFuncB	[shape=oval, color=darkviolet, label="UFuncB"];
		}
		subgraph ufuncvv{
		UFuncVV	[shape=oval, color=darkviolet, label="UFuncVV"];
		}
		subgraph ufuncvn{
		UFuncVN	[shape=oval, color=darkviolet, label="UFuncVN"];
		}
		subgraph completeness{
		Completeness	[shape=oval, color=darkviolet, label="Completeness"];
		}
		subgraph expr{
		Expr	[shape=oval, color=darkviolet, label="Expr"];
		Expr -> Literal;
		Expr -> Expr;
		Expr -> AssocArithOper;
		Expr -> AssocBoolOper;
		Expr -> UID;
		Expr -> Completeness;
		Expr -> Relation;
		Expr -> UFunc;
		Expr -> UFuncB;
		Expr -> UFuncVV;
		Expr -> UFuncVN;
		Expr -> ArithBinOp;
		Expr -> BoolBinOp;
		Expr -> EqBinOp;
		Expr -> LABinOp;
		Expr -> OrdBinOp;
		Expr -> VVVBinOp;
		Expr -> VVNBinOp;
		Expr -> NVVBinOp;
		Expr -> DiscreteDomainDesc;
		Expr -> RealInterval;
		}
		subgraph relation{
		Relation	[shape=oval, color=red2, label="Relation"];
		Relation -> Expr;
		}
		subgraph variable{
		Variable	[shape=oval, color=red2, label="Variable"];
		Variable -> String;
		}
	}
	subgraph precedence {
	}
	subgraph type {
		subgraph lbltype{
		LblType	[shape=oval, color=darkviolet, label="LblType"];
		LblType -> IRefProg;
		LblType -> String;
		}
		subgraph irefprog{
		IRefProg	[shape=oval, color=darkviolet, label="IRefProg"];
		IRefProg -> UID;
		}
	}
	subgraph class {
	}
	subgraph development {
	}
	subgraph lang {
		subgraph literal{
		Literal	[shape=oval, color=darkviolet, label="Literal"];
		Literal -> Integer;
		Literal -> Literal;
		Literal -> String;
		Literal -> Double;
		}
	}
	subgraph class {
	}
	subgraph convert {
	}
	subgraph development {
	}
	subgraph extract {
	}
	subgraph lang {
		subgraph arithbinop{
		ArithBinOp	[shape=oval, color=darkviolet, label="ArithBinOp"];
		}
		subgraph eqbinop{
		EqBinOp	[shape=oval, color=darkviolet, label="EqBinOp"];
		}
		subgraph boolbinop{
		BoolBinOp	[shape=oval, color=darkviolet, label="BoolBinOp"];
		}
		subgraph labinop{
		LABinOp	[shape=oval, color=darkviolet, label="LABinOp"];
		}
		subgraph ordbinop{
		OrdBinOp	[shape=oval, color=darkviolet, label="OrdBinOp"];
		}
		subgraph vvvbinop{
		VVVBinOp	[shape=oval, color=darkviolet, label="VVVBinOp"];
		}
		subgraph vvnbinop{
		VVNBinOp	[shape=oval, color=darkviolet, label="VVNBinOp"];
		}
		subgraph nvvbinop{
		NVVBinOp	[shape=oval, color=darkviolet, label="NVVBinOp"];
		}
		subgraph assocarithoper{
		AssocArithOper	[shape=oval, color=darkviolet, label="AssocArithOper"];
		}
		subgraph assocbooloper{
		AssocBoolOper	[shape=oval, color=darkviolet, label="AssocBoolOper"];
		}
		subgraph ufunc{
		UFunc	[shape=oval, color=darkviolet, label="UFunc"];
		}
		subgraph ufuncb{
		UFuncB	[shape=oval, color=darkviolet, label="UFuncB"];
		}
		subgraph ufuncvv{
		UFuncVV	[shape=oval, color=darkviolet, label="UFuncVV"];
		}
		subgraph ufuncvn{
		UFuncVN	[shape=oval, color=darkviolet, label="UFuncVN"];
		}
		subgraph statbinop{
		StatBinOp	[shape=oval, color=darkviolet, label="StatBinOp"];
		}
		subgraph spacebinop{
		SpaceBinOp	[shape=oval, color=darkviolet, label="SpaceBinOp"];
		}
		subgraph derivtype{
		DerivType	[shape=oval, color=darkviolet, label="DerivType"];
		}
		subgraph modelexpr{
		ModelExpr	[shape=oval, color=darkviolet, label="ModelExpr"];
		ModelExpr -> Literal;
		ModelExpr -> ModelExpr;
		ModelExpr -> Space;
		ModelExpr -> AssocArithOper;
		ModelExpr -> AssocBoolOper;
		ModelExpr -> Integer;
		ModelExpr -> DerivType;
		ModelExpr -> UID;
		ModelExpr -> Completeness;
		ModelExpr -> UFunc;
		ModelExpr -> UFuncB;
		ModelExpr -> UFuncVV;
		ModelExpr -> UFuncVN;
		ModelExpr -> ArithBinOp;
		ModelExpr -> BoolBinOp;
		ModelExpr -> EqBinOp;
		ModelExpr -> LABinOp;
		ModelExpr -> OrdBinOp;
		ModelExpr -> SpaceBinOp;
		ModelExpr -> StatBinOp;
		ModelExpr -> VVVBinOp;
		ModelExpr -> VVNBinOp;
		ModelExpr -> NVVBinOp;
		ModelExpr -> DomainDesc;
		ModelExpr -> t;
		ModelExpr -> RealInterval;
		}
		subgraph variable{
		Variable	[shape=oval, color=red2, label="Variable"];
		Variable -> String;
		}
	}
	subgraph precedence {
	}
	subgraph combinators {
	}
	subgraph core {
		subgraph capitalizationrule{
		CapitalizationRule	[shape=oval, color=darkviolet, label="CapitalizationRule"];
		}
		subgraph pluralrule{
		PluralRule	[shape=oval, color=darkviolet, label="PluralRule"];
		}
		subgraph np{
		NP	[shape=oval, color=darkviolet, label="NP"];
		NP -> String;
		NP -> PluralRule;
		}
		subgraph pluralform{
		PluralForm	[shape=oval, color=red2, label="PluralForm"];
		PluralForm -> Sentence;
		}
	}
	subgraph combinators {
	}
	subgraph extract {
	}
	subgraph fold {
		subgraph enumtype{
		EnumType	[shape=oval, color=darkviolet, label="EnumType"];
		}
		subgraph wraptype{
		WrapType	[shape=oval, color=darkviolet, label="WrapType"];
		}
		subgraph septype{
		SepType	[shape=oval, color=darkviolet, label="SepType"];
		}
		subgraph foldtype{
		FoldType	[shape=oval, color=darkviolet, label="FoldType"];
		FoldType -> SepType;
		FoldType -> FoldType;
		FoldType -> Sentence;
		}
	}
	subgraph helpers {
	}
	subgraph ast {
		subgraph uri{
		URI	[shape=oval, color=darkviolet, label="URI"];
		URI -> Scheme;
		URI -> Authority;
		URI -> Path;
		URI -> Query;
		URI -> Fragment;
		URI -> String;
		}
		subgraph scheme{
		Scheme	[shape=oval, color=darkviolet, label="Scheme"];
		}
		subgraph authority{
		Authority	[shape=oval, color=darkviolet, label="Authority"];
		Authority -> Username;
		Authority -> Password;
		Authority -> Host;
		Authority -> Port;
		}
		subgraph port{
		Port	[shape=oval, color=darkviolet, label="Port"];
		Port -> Int;
		}
		subgraph path{
		Path	[shape=oval, color=red2, label="Path"];
		Path -> String;
		}
		subgraph query{
		Query	[shape=oval, color=red2, label="Query"];
		Query -> String;
		}
		subgraph fragment{
		Fragment	[shape=oval, color=red2, label="Fragment"];
		Fragment -> String;
		}
		subgraph username{
		Username	[shape=oval, color=red2, label="Username"];
		Username -> String;
		}
		subgraph password{
		Password	[shape=oval, color=red2, label="Password"];
		Password -> String;
		}
		subgraph host{
		Host	[shape=oval, color=red2, label="Host"];
		Host -> String;
		}
	}
	subgraph clasess {
		subgraph conceptc{
		Conceptc	[shape=oval, color=red2, label="Conceptc"];
		Conceptc -> IdeacDefinitioncConceptDomainc;
		}
	}
	subgraph codeexpr {
	}
	subgraph contraints {
		subgraph constraintreason{
		ConstraintReason	[shape=oval, color=darkviolet, label="ConstraintReason"];
		}
		subgraph constrainta{
		Constrainta	[shape=oval, color=darkviolet, label="Constrainta"];
		Constrainta -> ConstraintReason;
		Constrainta -> RealInterval;
		Constrainta -> a;
		Constrainta -> Constraint;
		Constrainta -> Expr;
		Constrainta -> ConstraintE;
		}
		subgraph constrainte{
		ConstraintE	[shape=oval, color=red2, label="ConstraintE"];
		ConstraintE -> ConstraintExpr;
		}
	}
	subgraph decoratedreference {
		subgraph decref{
		DecRef	[shape=oval, color=cyan3, label="DecRef"];
		DecRef -> Reference;
		DecRef -> RefInfo;
		}
	}
	subgraph derivation {
		subgraph derivation{
		Derivation	[shape=oval, color=darkviolet, label="Derivation"];
		Derivation -> Sentence;
		}
	}
	subgraph development {
	}
	subgraph diplays {
	}
	subgraph document {
		subgraph section{
		Section	[shape=oval, color=cyan3, label="Section"];
		Section -> Title;
		Section -> SecCons;
		Section -> Reference;
		}
		subgraph section{
		Section	[shape=oval, color=cyan3, label="Section"];
		Section -> Depth;
		Section -> SecHeader;
		Section -> Content;
		}
		subgraph seccons{
		SecCons	[shape=oval, color=darkviolet, label="SecCons"];
		SecCons -> Section;
		SecCons -> Contents;
		}
		subgraph secheader{
		SecHeader	[shape=oval, color=darkviolet, label="SecHeader"];
		SecHeader -> Title;
		SecHeader -> Reference;
		}
		subgraph content{
		Content	[shape=oval, color=darkviolet, label="Content"];
		Content -> Contents;
		}
		subgraph document{
		Document	[shape=oval, color=darkviolet, label="Document"];
		Document -> Title;
		Document -> Author;
		Document -> ShowTableOfContents;
		Document -> Section;
		}
		subgraph showtableofcontents{
		ShowTableOfContents	[shape=oval, color=darkviolet, label="ShowTableOfContents"];
		ShowTableOfContents -> Document;
		}
	}
	subgraph exprclasess {
	}
	subgraph mics {
	}
	subgraph nounpraehs {
		subgraph capitalization{
		Capitalization	[shape=oval, color=red2, label="Capitalization"];
		Capitalization -> Sentence;
		}
		subgraph pluralstring{
		PluralString	[shape=oval, color=red2, label="PluralString"];
		PluralString -> String;
		}
	}
	subgraph people {
		subgraph person{
		Person	[shape=oval, color=cyan3, label="Person"];
		Person -> String;
		Person -> Conv;
		}
		subgraph conv{
		Conv	[shape=oval, color=darkviolet, label="Conv"];
		}
		subgraph people{
		People	[shape=oval, color=red2, label="People"];
		People -> Person;
		}
	}
	subgraph reference {
		subgraph reference{
		Reference	[shape=oval, color=cyan3, label="Reference"];
		Reference -> UID;
		Reference -> LblType;
		Reference -> ShortName;
		}
	}
	subgraph sentence {
		subgraph sentencestyle{
		SentenceStyle	[shape=oval, color=darkviolet, label="SentenceStyle"];
		}
		subgraph termcapitalization{
		TermCapitalization	[shape=oval, color=darkviolet, label="TermCapitalization"];
		}
		subgraph refinfo{
		RefInfo	[shape=oval, color=darkviolet, label="RefInfo"];
		RefInfo -> Int;
		RefInfo -> String;
		}
		subgraph sentence{
		Sentence	[shape=oval, color=darkviolet, label="Sentence"];
		Sentence -> SentenceStyle;
		Sentence -> TermCapitalization;
		Sentence -> UID;
		Sentence -> Sentence;
		Sentence -> USymb;
		Sentence -> String;
		Sentence -> Symbol;
		}
	}
	subgraph sorthandhs {
	}
	subgraph sortnameh {
		subgraph shortname{
		ShortName	[shape=oval, color=darkgreen, label="ShortName"];
		ShortName -> Sentence;
		}
	}
	subgraph space {
		subgraph space{
		Space	[shape=oval, color=cyan3, label="Space"];
		}
		subgraph rtopology{
		RTopology	[shape=oval, color=darkviolet, label="RTopology"];
		RTopology -> DomainDesc;
		RTopology -> tplgy;
		RTopology -> RTopology;
		RTopology -> a;
		RTopology -> b;
		RTopology -> Symbol;
		RTopology -> _Discrete;
		RTopology -> _Continuous;
		}
		subgraph inclusive{
		Inclusive	[shape=oval, color=darkviolet, label="Inclusive"];
		}
		subgraph realintervalab{
		RealIntervalab	[shape=oval, color=darkviolet, label="RealIntervalab"];
		RealIntervalab -> Inclusive;
		RealIntervalab -> a;
		RealIntervalab -> b;
		RealIntervalab -> RealInterval;
		}
		subgraph primitive{
		Primitive	[shape=oval, color=red2, label="Primitive"];
		Primitive -> Space;
		}
		subgraph discretedomaindescab{
		DiscreteDomainDescab	[shape=oval, color=red2, label="DiscreteDomainDescab"];
		DiscreteDomainDescab -> DomainDesc_Discreteab;
		}
		subgraph continuousdomaindescab{
		ContinuousDomainDescab	[shape=oval, color=red2, label="ContinuousDomainDescab"];
		ContinuousDomainDescab -> DomainDesc_Continuousab;
		}
	}
	subgraph stages {
		subgraph stage{
		Stage	[shape=oval, color=darkviolet, label="Stage"];
		}
	}
	subgraph symbol {
		subgraph decoration{
		Decoration	[shape=oval, color=darkviolet, label="Decoration"];
		}
		subgraph symbol{
		Symbol	[shape=oval, color=darkviolet, label="Symbol"];
		Symbol -> String;
		}
	}
	subgraph synonyms {
		subgraph constqdef{
		ConstQDef	[shape=oval, color=red2, label="ConstQDef"];
		ConstQDef -> QDefinitionLiteral;
		}
		subgraph simpleqdef{
		SimpleQDef	[shape=oval, color=red2, label="SimpleQDef"];
		SimpleQDef -> QDefinitionExpr;
		}
		subgraph modelqdef{
		ModelQDef	[shape=oval, color=red2, label="ModelQDef"];
		ModelQDef -> QDefinitionModelExpr;
		}
		subgraph pexpr{
		PExpr	[shape=oval, color=red2, label="PExpr"];
		PExpr -> ExprCrLiteralCr;
		PExpr -> r;
		}
	}
	subgraph uid {
		subgraph uid{
		UID	[shape=oval, color=cyan3, label="UID"];
		UID -> String;
		}
	}
	subgraph uncertainty {
		subgraph uncertainty{
		Uncertainty	[shape=oval, color=cyan3, label="Uncertainty"];
		Uncertainty -> MaybeDouble;
		Uncertainty -> MaybeInt;
		}
	}
	subgraph unicode {
		subgraph special{
		Special	[shape=oval, color=darkviolet, label="Special"];
		}
	}
	subgraph unitlang {
		subgraph udefn{
		UDefn	[shape=oval, color=darkviolet, label="UDefn"];
		UDefn -> USymb;
		}
		subgraph unitsymbol{
		UnitSymbol	[shape=oval, color=darkviolet, label="UnitSymbol"];
		UnitSymbol -> USymb;
		UnitSymbol -> UDefn;
		UnitSymbol -> UnitSymbol;
		}
		subgraph usymb{
		USymb	[shape=oval, color=darkgreen, label="USymb"];
		USymb -> Symbol;
		USymb -> Integer;
		}
	}
	subgraph welltyped {
		subgraph typeerror{
		TypeError	[shape=oval, color=red2, label="TypeError"];
		TypeError -> String;
		}
		subgraph typingcontextt{
		TypingContextt	[shape=oval, color=red2, label="TypingContextt"];
		TypingContextt -> MapUIDt;
		}
	}
	subgraph drails {
	}
	subgraph domains {
	}
	subgraph drailmetas {
		subgraph drasilmeta{
		DrasilMeta	[shape=oval, color=darkgreen, label="DrasilMeta"];
		DrasilMeta -> String;
		}
	}
	subgraph drailmetacalls {
	}
	subgraph print {
		subgraph nodefamily{
		NodeFamily	[shape=oval, color=cyan3, label="NodeFamily"];
		NodeFamily -> UID;
		NodeFamily -> Label;
		NodeFamily -> Colour;
		}
		subgraph graphinfo{
		GraphInfo	[shape=oval, color=cyan3, label="GraphInfo"];
		GraphInfo -> NodeFamily;
		GraphInfo -> UID;
		}
		subgraph colour{
		Colour	[shape=oval, color=red2, label="Colour"];
		Colour -> String;
		}
		subgraph label{
		Label	[shape=oval, color=red2, label="Label"];
		Label -> String;
		}
	}
	subgraph print {
	}
	subgraph css {
	}
	subgraph helpers {
		subgraph variation{
		Variation	[shape=oval, color=darkviolet, label="Variation"];
		Variation -> String;
		Variation -> Doc;
		}
	}
	subgraph monad {
		subgraph printhtml{
		PrintHTML	[shape=oval, color=darkgreen, label="PrintHTML"];
		PrintHTML -> String;
		}
	}
	subgraph print {
		subgraph openclose{
		OpenClose	[shape=oval, color=darkviolet, label="OpenClose"];
		OpenClose -> PrintingInformation;
		OpenClose -> String;
		OpenClose -> Document;
		OpenClose -> Doc;
		}
	}
	subgraph helpers {
		subgraph variation{
		Variation	[shape=oval, color=darkviolet, label="Variation"];
		Variation -> td;
		Variation -> figure;
		Variation -> li;
		Variation -> pa;
		Variation -> ba;
		Variation -> Doc;
		}
	}
	subgraph print {
	}
	subgraph createmd {
	}
	subgraph print {
		subgraph singleline{
		SingleLine	[shape=oval, color=darkviolet, label="SingleLine"];
		SingleLine -> PrintingConfiguration;
		}
	}
	subgraph codeexpr {
	}
	subgraph document {
	}
	subgraph expr {
	}
	subgraph helpers {
	}
	subgraph literal {
	}
	subgraph modelexpr {
	}
	subgraph sentence {
	}
	subgraph space {
	}
	subgraph symbol {
	}
	subgraph ast {
		subgraph linktype{
		LinkType	[shape=oval, color=darkviolet, label="LinkType"];
		LinkType -> Spec;
		}
		subgraph ops{
		Ops	[shape=oval, color=darkviolet, label="Ops"];
		}
		subgraph fence{
		Fence	[shape=oval, color=darkviolet, label="Fence"];
		}
		subgraph oversymb{
		OverSymb	[shape=oval, color=darkviolet, label="OverSymb"];
		}
		subgraph fonts{
		Fonts	[shape=oval, color=darkviolet, label="Fonts"];
		}
		subgraph spacing{
		Spacing	[shape=oval, color=darkviolet, label="Spacing"];
		}
		subgraph expr{
		Expr	[shape=oval, color=darkviolet, label="Expr"];
		Expr -> Double;
		Expr -> Integer;
		Expr -> String;
		Expr -> Expr;
		}
		subgraph spec{
		Spec	[shape=oval, color=darkviolet, label="Spec"];
		Spec -> Expr;
		}
		subgraph listtype{
		ListType	[shape=oval, color=darkviolet, label="ListType"];
		ListType -> ItemType;
		ListType -> Maybe;
		ListType -> Label;
		ListType -> Title;
		}
		subgraph itemtype{
		ItemType	[shape=oval, color=darkviolet, label="ItemType"];
		ItemType -> Spec;
		ItemType -> ListType;
		}
		subgraph label{
		Label	[shape=oval, color=red2, label="Label"];
		Label -> Spec;
		}
		subgraph title{
		Title	[shape=oval, color=red2, label="Title"];
		Title -> Spec;
		}
	}
	subgraph citation {
		subgraph citation{
		Citation	[shape=oval, color=darkviolet, label="Citation"];
		Citation -> EntryID;
		Citation -> CitationKind;
		Citation -> CiteField;
		}
		subgraph citefield{
		CiteField	[shape=oval, color=darkviolet, label="CiteField"];
		CiteField -> Spec;
		CiteField -> People;
		}
		subgraph hp{
		HP	[shape=oval, color=darkviolet, label="HP"];
		HP -> Spec;
		}
		subgraph bibref{
		BibRef	[shape=oval, color=red2, label="BibRef"];
		BibRef -> Citation;
		}
	}
	subgraph helpers {
	}
	subgraph import {
	}
	subgraph layoutobj {
		subgraph document{
		Document	[shape=oval, color=darkviolet, label="Document"];
		Document -> Title;
		Document -> Author;
		Document -> LayoutObj;
		}
		subgraph layoutobj{
		LayoutObj	[shape=oval, color=darkviolet, label="LayoutObj"];
		LayoutObj -> Tags;
		LayoutObj -> Spec;
		LayoutObj -> Label;
		LayoutObj -> Bool;
		LayoutObj -> Caption;
		}
		subgraph author{
		Author	[shape=oval, color=red2, label="Author"];
		Author -> Spec;
		}
		subgraph contents{
		Contents	[shape=oval, color=red2, label="Contents"];
		Contents -> Spec;
		}
		subgraph items{
		Items	[shape=oval, color=red2, label="Items"];
		Items -> LayoutObj;
		}
		subgraph tags{
		Tags	[shape=oval, color=red2, label="Tags"];
		Tags -> String;
		}
		subgraph depth{
		Depth	[shape=oval, color=red2, label="Depth"];
		Depth -> Int;
		}
		subgraph width{
		Width	[shape=oval, color=red2, label="Width"];
		Width -> Float;
		}
		subgraph height{
		Height	[shape=oval, color=red2, label="Height"];
		Height -> Float;
		}
		subgraph filepath{
		Filepath	[shape=oval, color=red2, label="Filepath"];
		Filepath -> String;
		}
		subgraph caption{
		Caption	[shape=oval, color=red2, label="Caption"];
		Caption -> Spec;
		}
	}
	subgraph printinginformation {
		subgraph printinginformation{
		PrintingInformation	[shape=oval, color=cyan3, label="PrintingInformation"];
		PrintingInformation -> ChunkDB;
		PrintingInformation -> Stage;
		PrintingInformation -> PrintingConfiguration;
		}
		subgraph notation{
		Notation	[shape=oval, color=darkviolet, label="Notation"];
		}
		subgraph printingconfiguration{
		PrintingConfiguration	[shape=oval, color=darkgreen, label="PrintingConfiguration"];
		PrintingConfiguration -> Notation;
		}
	}
	subgraph helpers {
	}
	subgraph monad {
		subgraph mathcontext{
		MathContext	[shape=oval, color=darkviolet, label="MathContext"];
		}
		subgraph latex{
		Latex	[shape=oval, color=darkgreen, label="Latex"];
		Latex -> String;
		}
		subgraph d{
		D	[shape=oval, color=red2, label="D"];
		D -> Doc;
		}
	}
	subgraph preamble {
		subgraph package{
		Package	[shape=oval, color=darkviolet, label="Package"];
		}
		subgraph def{
		Def	[shape=oval, color=darkviolet, label="Def"];
		}
	}
	subgraph print {
		subgraph openclose{
		OpenClose	[shape=oval, color=darkviolet, label="OpenClose"];
		OpenClose -> String;
		}
		subgraph fieldwrap{
		FieldWrap	[shape=oval, color=darkviolet, label="FieldWrap"];
		FieldWrap -> String;
		FieldWrap -> FieldWrap;
		FieldWrap -> Spec;
		FieldWrap -> D;
		}
	}
	subgraph config {
		subgraph styleguide{
		StyleGuide	[shape=oval, color=darkviolet, label="StyleGuide"];
		StyleGuide -> StyleGuide;
		StyleGuide -> String;
		}
	}
	subgraph format {
		subgraph doctype{
		DocType	[shape=oval, color=darkviolet, label="DocType"];
		}
		subgraph format{
		Format	[shape=oval, color=darkviolet, label="Format"];
		}
	}
	subgraph printers {
	}
	subgraph getcunkh {
	}
	subgraph syteminformations {
		subgraph referencedb{
		ReferenceDB	[shape=oval, color=cyan3, label="ReferenceDB"];
		ReferenceDB -> ConceptMap;
		}
		subgraph systeminformation{
		SystemInformation	[shape=oval, color=darkviolet, label="SystemInformation"];
		SystemInformation -> CommonIdea;
		SystemInformation -> a;
		SystemInformation -> Idea;
		SystemInformation -> b;
		SystemInformation -> HasName;
		SystemInformation -> c;
		}
		subgraph blocka{
		Blocka	[shape=oval, color=darkviolet, label="Blocka"];
		Blocka -> a;
		Blocka -> SystemInformation;
		Blocka -> BibRef;
		}
		subgraph purpose{
		Purpose	[shape=oval, color=red2, label="Purpose"];
		Purpose -> Sentence;
		}
		subgraph background{
		Background	[shape=oval, color=red2, label="Background"];
		Background -> Sentence;
		}
		subgraph refmapa{
		RefMapa	[shape=oval, color=red2, label="RefMapa"];
		RefMapa -> MapUIDaInt;
		}
		subgraph bibmap{
		BibMap	[shape=oval, color=red2, label="BibMap"];
		BibMap -> RefMapCitation;
		}
		subgraph conceptmap{
		ConceptMap	[shape=oval, color=red2, label="ConceptMap"];
		ConceptMap -> RefMapConceptInstance;
		}
	}
	subgraph drails {
	}
	subgraph teoryconcepths {
	}
	subgraph clasess {
	}
	subgraph contraintsets {
		subgraph constraintsete{
		ConstraintSete	[shape=oval, color=cyan3, label="ConstraintSete"];
		ConstraintSete -> ConceptChunk;
		ConstraintSete -> NonEmptye;
		}
	}
	subgraph datadefinition {
		subgraph ddpkt{
		DDPkt	[shape=oval, color=cyan3, label="DDPkt"];
		DDPkt -> ScopeType;
		DDPkt -> DecRef;
		DDPkt -> MaybeDerivation;
		DDPkt -> ShortName;
		DDPkt -> String;
		DDPkt -> Sentence;
		}
		subgraph scopetype{
		ScopeType	[shape=oval, color=darkviolet, label="ScopeType"];
		ScopeType -> Scope;
		}
		subgraph datadefinition{
		DataDefinition	[shape=oval, color=darkviolet, label="DataDefinition"];
		DataDefinition -> SimpleQDef;
		DataDefinition -> DDPkt;
		DataDefinition -> DataDefinition;
		DataDefinition -> ModelQDef;
		DataDefinition -> Lens_;
		DataDefinition -> a;
		}
		subgraph scope{
		Scope	[shape=oval, color=darkgreen, label="Scope"];
		Scope -> UID;
		}
	}
	subgraph gendefn {
		subgraph gendefn{
		GenDefn	[shape=oval, color=cyan3, label="GenDefn"];
		GenDefn -> ModelKindModelExpr;
		GenDefn -> MaybeUnitDefn;
		GenDefn -> MaybeDerivation;
		GenDefn -> DecRef;
		GenDefn -> ShortName;
		GenDefn -> String;
		GenDefn -> Sentence;
		}
	}
	subgraph intancemodels {
		subgraph instancemodel{
		InstanceModel	[shape=oval, color=cyan3, label="InstanceModel"];
		InstanceModel -> ModelKindExpr;
		InstanceModel -> Inputs;
		InstanceModel -> Output;
		InstanceModel -> DecRef;
		InstanceModel -> MaybeDerivation;
		InstanceModel -> ShortName;
		InstanceModel -> String;
		InstanceModel -> Sentence;
		}
		subgraph input{
		Input	[shape=oval, color=red2, label="Input"];
		Input -> QuantityDictMaybeRealIntervalExprExpr;
		}
		subgraph inputs{
		Inputs	[shape=oval, color=red2, label="Inputs"];
		Inputs -> Input;
		}
		subgraph output{
		Output	[shape=oval, color=red2, label="Output"];
		Output -> QuantityDict;
		}
		subgraph outputconstraints{
		OutputConstraints	[shape=oval, color=red2, label="OutputConstraints"];
		OutputConstraints -> RealIntervalExprExpr;
		}
	}
	subgraph modelkinds {
		subgraph modelkinde{
		ModelKinde	[shape=oval, color=cyan3, label="ModelKinde"];
		ModelKinde -> ModelKindse;
		ModelKinde -> UID;
		ModelKinde -> NP;
		}
		subgraph modelkindse{
		ModelKindse	[shape=oval, color=darkviolet, label="ModelKindse"];
		ModelKindse -> DifferentialModel;
		ModelKindse -> ModelKinds;
		ModelKindse -> e;
		ModelKindse -> RelationConcept;
		ModelKindse -> ConstraintSet;
		ModelKindse -> QDefinition;
		ModelKindse -> MultiDefn;
		}
	}
	subgraph multidefn {
		subgraph definingexpre{
		DefiningExpre	[shape=oval, color=cyan3, label="DefiningExpre"];
		DefiningExpre -> UID;
		DefiningExpre -> Sentence;
		DefiningExpre -> e;
		}
		subgraph multidefne{
		MultiDefne	[shape=oval, color=cyan3, label="MultiDefne"];
		MultiDefne -> UID;
		MultiDefne -> QuantityDict;
		MultiDefne -> Sentence;
		MultiDefne -> NonEmptyDefiningExpre;
		}
	}
	subgraph teoryh {
		subgraph theorymodel{
		TheoryModel	[shape=oval, color=cyan3, label="TheoryModel"];
		TheoryModel -> ModelKindModelExpr;
		TheoryModel -> TheoryModel;
		TheoryModel -> SpaceDefn;
		TheoryModel -> QuantityDict;
		TheoryModel -> ConceptChunk;
		TheoryModel -> ModelQDef;
		TheoryModel -> ModelExpr;
		TheoryModel -> DecRef;
		TheoryModel -> ShortName;
		TheoryModel -> String;
		TheoryModel -> Sentence;
		}
	}
	subgraph drails {
	}
	subgraph document {
		subgraph separator{
		Separator	[shape=oval, color=red2, label="Separator"];
		Separator -> Doc;
		}
	}
	subgraph englihs {
	}
	subgraph litss {
	}
	subgraph maps {
	}
	subgraph strings {
	}
	subgraph drails {
	}
	subgraph main {
	}
	subgraph about {
	}
	subgraph analyiss {
	}
	subgraph body {
		subgraph folderlocation{
		FolderLocation	[shape=oval, color=cyan3, label="FolderLocation"];
		FolderLocation -> FilePath;
		FolderLocation -> String;
		}
	}
	subgraph caestudys {
		subgraph casestudy{
		CaseStudy	[shape=oval, color=cyan3, label="CaseStudy"];
		CaseStudy -> SystemInformation;
		CaseStudy -> Sentence;
		CaseStudy -> Choices;
		}
		subgraph cslegend{
		CSLegend	[shape=oval, color=cyan3, label="CSLegend"];
		CSLegend -> String;
		}
	}
	subgraph documentation {
	}
	subgraph example {
		subgraph example{
		Example	[shape=oval, color=cyan3, label="Example"];
		Example -> SystemInformation;
		Example -> Choices;
		Example -> FilePath;
		}
	}
	subgraph gettingstarted {
	}
	subgraph introduction {
	}
}
