package GlassBR;

/** \file InputParameters.java
    \author Nikitha Krithnan and W. Spencer Smith
    \brief Provides the structure for holding input values, the function for reading inputs, the function for calculating derived values, and the function for checking the physical constraints and software constraints on the input
    \note Generated by Drasil v0.1-alpha
*/

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

/** \brief Structure for holding the input values and derived values
*/
public class InputParameters {
    public double a;
    public double b;
    public double w;
    public double P_btol;
    public double TNT;
    public String g;
    public double t;
    public double SD_x;
    public double SD_y;
    public double SD_z;
    public double h;
    public double LDF;
    public int GTF;
    public double SD;
    public double AR;
    public double w_TNT;
    
    /** \brief Initializes input object by reading inputs, calculating derived values, and checking physical constraints and software constraints on the input
        \param filename name of the input file
    */
    public InputParameters(String filename) throws Exception, FileNotFoundException, IOException {
        PrintWriter outfile;
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.println("function InputParameters called with inputs: {");
        outfile.print("  filename = ");
        outfile.println(filename);
        outfile.println("  }");
        outfile.close();
        
        this.get_input(filename);
        this.derived_values();
        this.input_constraints();
    }
    
    /** \brief Reads input from a file with the given file name
        \param filename name of the input file
    */
    private void get_input(String filename) throws FileNotFoundException, IOException {
        PrintWriter outfile;
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.println("function get_input called with inputs: {");
        outfile.print("  filename = ");
        outfile.println(filename);
        outfile.println("  }");
        outfile.close();
        
        Scanner infile;
        infile = new Scanner(new File(filename));
        infile.nextLine();
        this.a = Double.parseDouble(infile.nextLine());
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.a' assigned ");
        outfile.print(this.a);
        outfile.println(" in module InputParameters");
        outfile.close();
        infile.nextLine();
        this.b = Double.parseDouble(infile.nextLine());
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.b' assigned ");
        outfile.print(this.b);
        outfile.println(" in module InputParameters");
        outfile.close();
        infile.nextLine();
        this.w = Double.parseDouble(infile.nextLine());
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.w' assigned ");
        outfile.print(this.w);
        outfile.println(" in module InputParameters");
        outfile.close();
        infile.nextLine();
        this.P_btol = Double.parseDouble(infile.nextLine());
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.P_btol' assigned ");
        outfile.print(this.P_btol);
        outfile.println(" in module InputParameters");
        outfile.close();
        infile.nextLine();
        this.TNT = Double.parseDouble(infile.nextLine());
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.TNT' assigned ");
        outfile.print(this.TNT);
        outfile.println(" in module InputParameters");
        outfile.close();
        infile.nextLine();
        this.g = infile.nextLine();
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.g' assigned ");
        outfile.print(this.g);
        outfile.println(" in module InputParameters");
        outfile.close();
        infile.nextLine();
        this.t = Double.parseDouble(infile.nextLine());
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.t' assigned ");
        outfile.print(this.t);
        outfile.println(" in module InputParameters");
        outfile.close();
        infile.nextLine();
        this.SD_x = Double.parseDouble(infile.nextLine());
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.SD_x' assigned ");
        outfile.print(this.SD_x);
        outfile.println(" in module InputParameters");
        outfile.close();
        infile.nextLine();
        this.SD_y = Double.parseDouble(infile.nextLine());
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.SD_y' assigned ");
        outfile.print(this.SD_y);
        outfile.println(" in module InputParameters");
        outfile.close();
        infile.nextLine();
        this.SD_z = Double.parseDouble(infile.nextLine());
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.SD_z' assigned ");
        outfile.print(this.SD_z);
        outfile.println(" in module InputParameters");
        outfile.close();
        infile.close();
    }
    
    /** \brief Calculates values that can be immediately derived from the inputs
    */
    private void derived_values() throws Exception, IOException {
        PrintWriter outfile;
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.println("function derived_values called with inputs: {");
        outfile.println("  }");
        outfile.close();
        
        this.h = 1.0 / 1000.0 * (this.t == 2.5 ? 2.16 : this.t == 2.7 ? 2.59 : this.t == 3.0 ? 2.92 : this.t == 4.0 ? 3.78 : this.t == 5.0 ? 4.57 : this.t == 6.0 ? 5.56 : this.t == 8.0 ? 7.42 : this.t == 10.0 ? 9.02 : this.t == 12.0 ? 11.91 : this.t == 16.0 ? 15.09 : this.t == 19.0 ? 18.26 : 21.44);
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.h' assigned ");
        outfile.print(this.h);
        outfile.println(" in module InputParameters");
        outfile.close();
        
        this.LDF = Math.pow(3.0 / 60.0, 7.0 / 16.0);
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.LDF' assigned ");
        outfile.print(this.LDF);
        outfile.println(" in module InputParameters");
        outfile.close();
        
        if (this.g.equals("AN")) {
            this.GTF = 1;
            outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
            outfile.print("var 'this.GTF' assigned ");
            outfile.print(this.GTF);
            outfile.println(" in module InputParameters");
            outfile.close();
        }
        else if (this.g.equals("FT")) {
            this.GTF = 4;
            outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
            outfile.print("var 'this.GTF' assigned ");
            outfile.print(this.GTF);
            outfile.println(" in module InputParameters");
            outfile.close();
        }
        else if (this.g.equals("HS")) {
            this.GTF = 2;
            outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
            outfile.print("var 'this.GTF' assigned ");
            outfile.print(this.GTF);
            outfile.println(" in module InputParameters");
            outfile.close();
        }
        else {
            throw new Exception("Undefined case encountered in function GTF");
        }
        
        this.SD = Math.sqrt(Math.pow(this.SD_x, 2.0) + Math.pow(this.SD_y, 2.0) + Math.pow(this.SD_z, 2.0));
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.SD' assigned ");
        outfile.print(this.SD);
        outfile.println(" in module InputParameters");
        outfile.close();
        
        this.AR = this.a / this.b;
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.AR' assigned ");
        outfile.print(this.AR);
        outfile.println(" in module InputParameters");
        outfile.close();
        
        this.w_TNT = this.w * this.TNT;
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.print("var 'this.w_TNT' assigned ");
        outfile.print(this.w_TNT);
        outfile.println(" in module InputParameters");
        outfile.close();
    }
    
    /** \brief Verifies that input values satisfy the physical constraints and software constraints
    */
    private void input_constraints() throws Exception, IOException {
        PrintWriter outfile;
        outfile = new PrintWriter(new FileWriter(new File("log.txt"), true));
        outfile.println("function input_constraints called with inputs: {");
        outfile.println("  }");
        outfile.close();
        
        if (!(0.1 <= this.a && this.a <= 5.0)) {
            System.out.print("a has value ");
            System.out.print(this.a);
            System.out.print(", but is expected to be ");
            System.out.print("between ");
            System.out.print(0.1);
            System.out.print(" (d_min)");
            System.out.print(" and ");
            System.out.print(5.0);
            System.out.print(" (d_max)");
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(0.1 <= this.b && this.b <= 5.0)) {
            System.out.print("b has value ");
            System.out.print(this.b);
            System.out.print(", but is expected to be ");
            System.out.print("between ");
            System.out.print(0.1);
            System.out.print(" (d_min)");
            System.out.print(" and ");
            System.out.print(5.0);
            System.out.print(" (d_max)");
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(4.5 <= this.w && this.w <= 910.0)) {
            System.out.print("w has value ");
            System.out.print(this.w);
            System.out.print(", but is expected to be ");
            System.out.print("between ");
            System.out.print(4.5);
            System.out.print(" (w_min)");
            System.out.print(" and ");
            System.out.print(910.0);
            System.out.print(" (w_max)");
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(6.0 <= this.SD && this.SD <= 130.0)) {
            System.out.print("SD has value ");
            System.out.print(this.SD);
            System.out.print(", but is expected to be ");
            System.out.print("between ");
            System.out.print(6.0);
            System.out.print(" (SD_min)");
            System.out.print(" and ");
            System.out.print(130.0);
            System.out.print(" (SD_max)");
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(this.AR <= 5.0)) {
            System.out.print("AR has value ");
            System.out.print(this.AR);
            System.out.print(", but is expected to be ");
            System.out.print("below ");
            System.out.print(5.0);
            System.out.print(" (AR_max)");
            System.out.println(".");
            throw new Exception("InputError");
        }
        
        if (!(this.a > 0.0)) {
            System.out.print("a has value ");
            System.out.print(this.a);
            System.out.print(", but is expected to be ");
            System.out.print("above ");
            System.out.print(0.0);
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(this.a >= this.b)) {
            System.out.print("a has value ");
            System.out.print(this.a);
            System.out.print(", but is expected to be ");
            System.out.print("above ");
            System.out.print(this.b);
            System.out.print(" (b)");
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(0.0 < this.b && this.b <= this.a)) {
            System.out.print("b has value ");
            System.out.print(this.b);
            System.out.print(", but is expected to be ");
            System.out.print("between ");
            System.out.print(0.0);
            System.out.print(" and ");
            System.out.print(this.a);
            System.out.print(" (a)");
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(this.w > 0.0)) {
            System.out.print("w has value ");
            System.out.print(this.w);
            System.out.print(", but is expected to be ");
            System.out.print("above ");
            System.out.print(0.0);
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(0.0 <= this.P_btol && this.P_btol <= 1.0)) {
            System.out.print("P_btol has value ");
            System.out.print(this.P_btol);
            System.out.print(", but is expected to be ");
            System.out.print("between ");
            System.out.print(0.0);
            System.out.print(" and ");
            System.out.print(1.0);
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(this.TNT > 0.0)) {
            System.out.print("TNT has value ");
            System.out.print(this.TNT);
            System.out.print(", but is expected to be ");
            System.out.print("above ");
            System.out.print(0.0);
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(this.SD > 0.0)) {
            System.out.print("SD has value ");
            System.out.print(this.SD);
            System.out.print(", but is expected to be ");
            System.out.print("above ");
            System.out.print(0.0);
            System.out.println(".");
            throw new Exception("InputError");
        }
        if (!(this.AR >= 1.0)) {
            System.out.print("AR has value ");
            System.out.print(this.AR);
            System.out.print(", but is expected to be ");
            System.out.print("above ");
            System.out.print(1.0);
            System.out.println(".");
            throw new Exception("InputError");
        }
    }
}
