Problem solving can be simple or difficult depending on the expertise of the person attempting to solve the problem.
**segue**
The first step in solving a problem is understanding it. In SE that understanding is often described through a problem statement and SRS (which also helps focus the possible solution).
**segue**
In scientific computing (SC) / on the forefront of scientific knowledge where problems are still not well enough understood it is often difficult to communicate one's understanding of the problem and plan out a full solution. For Software Engineers, this results in difficulty during early phases of develop (i.e. requirements gathering).
--refWilson Difficulties of gathering reqs for SC dev and why it shouldn't be done.
Disagree with Wilson
**segue**
There is a distinct divide between SE and other scientists.
--refSegal Software engineers fail to meet scientists' expectations
    **Go into a bit of depth on this (not too longwinded, we're pandering to SE here so make it seem like it's still the scientists fault i.e. vague problem descriptions / expectations, lack of known (in/out)put pairs, etc.)
--refSegal Scientists fail to meet SE expectations
    **Go into a bit of depth on this (can talk at length to puff up SE -> "They fail to give us necessary information and expect us to somehow still make it work" <- something like that but less antagonistic. Talk about reqs gathering and maintainability, traceability, etc.
**segue** into Agile development
--refSegal Agile development is commonplace
Documentation typically loses traceability / stops being maintained as a project continues onward. (source?). Essentially most documentation would then have to be re-written in the end phases (source?). Some would likely choose not to bother if it is not considered necessary / no budget / etc. (source? Common sense?), but writing the documents is still worthwhile, even if they need to "fake" the traditional SE dev process (Parnas & Clements)
--refParnas More on benefits of faking

Wouldn't it be great if documentation could be generated throughout the development process alongside the source code with trivial effort?
**Drop the mic**
It can be, and that is the aim of this project. Particularly dealing w/ families of scientific software (more on that in a bit).

**Move to new section on background? What should come next?**