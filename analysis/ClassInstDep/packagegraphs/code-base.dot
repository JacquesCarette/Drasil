digraph code_base{
VarOrFunc	[shape=oval, color=turquoise4, label="VarOrFunc"];
CodeChunk	[shape=oval, color=turquoise4, label="CodeChunk"];
CodeVarChunk	[shape=oval, color=turquoise4, label="CodeVarChunk"];
CodeFuncChunk	[shape=oval, color=turquoise4, label="CodeFuncChunk"];
ArithBinOp	[shape=oval, color=turquoise4, label="ArithBinOp"];
EqBinOp	[shape=oval, color=turquoise4, label="EqBinOp"];
BoolBinOp	[shape=oval, color=turquoise4, label="BoolBinOp"];
LABinOp	[shape=oval, color=turquoise4, label="LABinOp"];
OrdBinOp	[shape=oval, color=turquoise4, label="OrdBinOp"];
VVVBinOp	[shape=oval, color=turquoise4, label="VVVBinOp"];
VVNBinOp	[shape=oval, color=turquoise4, label="VVNBinOp"];
AssocArithOper	[shape=oval, color=turquoise4, label="AssocArithOper"];
AssocBoolOper	[shape=oval, color=turquoise4, label="AssocBoolOper"];
UFunc	[shape=oval, color=turquoise4, label="UFunc"];
UFuncB	[shape=oval, color=turquoise4, label="UFuncB"];
UFuncVV	[shape=oval, color=turquoise4, label="UFuncVV"];
UFuncVN	[shape=oval, color=turquoise4, label="UFuncVN"];
CodeExpr	[shape=oval, color=turquoise4, label="CodeExpr"];
HasUID	[shape=oval, color=pink, label="HasUID"];
NamedIdea	[shape=oval, color=pink, label="NamedIdea"];
Idea	[shape=oval, color=pink, label="Idea"];
HasSpace	[shape=oval, color=pink, label="HasSpace"];
HasSymbol	[shape=oval, color=pink, label="HasSymbol"];
Quantity	[shape=oval, color=pink, label="Quantity"];
Eq	[shape=oval, color=pink, label="Eq"];
MayHaveUnit	[shape=oval, color=pink, label="MayHaveUnit"];
Callable	[shape=oval, color=pink, label="Callable"];
CanGenCode	[shape=oval, color=pink, label="CanGenCode"];
LiteralC	[shape=oval, color=pink, label="LiteralC"];
ExprC	[shape=oval, color=pink, label="ExprC"];
CodeIdea	[shape=oval, color=magenta, label="CodeIdea"];
DefiningCodeExpr	[shape=oval, color=magenta, label="DefiningCodeExpr"];
CodeExprC	[shape=oval, color=magenta, label="CodeExprC"];
CanGenCode	[shape=oval, color=magenta, label="CanGenCode"];
CodeChunk -> HasUID;
CodeChunk -> NamedIdea;
CodeChunk -> Idea;
CodeChunk -> HasSpace;
CodeChunk -> HasSymbol;
CodeChunk -> Quantity;
CodeChunk -> Eq;
CodeChunk -> MayHaveUnit;
CodeVarChunk -> HasUID;
CodeVarChunk -> NamedIdea;
CodeVarChunk -> Idea;
CodeVarChunk -> HasSpace;
CodeVarChunk -> HasSymbol;
CodeVarChunk -> Quantity;
CodeVarChunk -> Eq;
CodeVarChunk -> MayHaveUnit;
CodeFuncChunk -> HasUID;
CodeFuncChunk -> NamedIdea;
CodeFuncChunk -> Idea;
CodeFuncChunk -> HasSpace;
CodeFuncChunk -> HasSymbol;
CodeFuncChunk -> Quantity;
CodeFuncChunk -> Callable;
CodeFuncChunk -> Eq;
CodeFuncChunk -> MayHaveUnit;
CodeExpr -> CodeExprC;
LL.Literal -> CanGenCode;
LD.Expr -> CanGenCode;
CodeExpr -> LiteralC;
CodeExpr -> ExprC;
}
