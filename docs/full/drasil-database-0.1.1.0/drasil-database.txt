-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A framework for code and document generation for scientific software - Database SubPackage
--   
--   Please see the README on GitHub at
--   <a>https://github.com/JacquesCarette/Drasil#readme</a>
@package drasil-database
@version 0.1.1.0


-- | Defines types and functions to create a chunk database within Drasil.
module Database.Drasil.ChunkDB

-- | Our chunk databases. Must contain all maps needed in an example. In
--   turn, these maps must contain every chunk definition or concept used
--   in its respective example, else an error is thrown.
data ChunkDB
CDB :: SymbolMap -> TermMap -> ConceptMap -> UnitMap -> TraceMap -> RefbyMap -> DatadefnMap -> InsModelMap -> GendefMap -> TheoryModelMap -> ConceptInstanceMap -> SectionMap -> LabelledContentMap -> ReferenceMap -> ChunkDB

-- | A reference map, used to hold a <a>UID</a> and where it is referenced
--   (<a>UID</a>s).
type RefbyMap = Map UID [UID]

-- | A traceability map, used to hold the relation between one <a>UID</a>
--   and a list of other <a>UID</a>s.
type TraceMap = Map UID [UID]

-- | The misnomers below (for the following Map types) are not actually a
--   bad thing. We want to ensure data can't be added to a map if it's not
--   coming from a chunk, and there's no point confusing what the map is
--   for. One is for symbols + their units, and the others are for what
--   they state.
type UMap a = Map UID (a, Int)

-- | Smart constructor for chunk databases. Takes in the following:
--   
--   <ul>
--   <li>[<a>Quantity</a>] (for <a>SymbolMap</a>),</li>
--   <li><a>NamedIdea</a>s (for <a>TermMap</a>),</li>
--   <li><a>Concept</a>s (for <a>ConceptMap</a>),</li>
--   <li>Units (something that <a>IsUnit</a> for <a>UnitMap</a>),</li>
--   <li><a>DataDefinition</a>s (for <a>DatadefnMap</a>),</li>
--   <li><a>InstanceModel</a>s (for <a>InsModelMap</a>),</li>
--   <li><a>GenDefn</a>s (for <a>GendefMap</a>),</li>
--   <li><a>TheoryModel</a>s (for <a>TheoryModelMap</a>),</li>
--   <li><a>ConceptInstance</a>s (for <a>ConceptInstanceMap</a>),</li>
--   <li><a>Section</a>s (for <a>SectionMap</a>),</li>
--   <li><a>LabelledContent</a>s (for <a>LabelledContentMap</a>).</li>
--   </ul>
cdb :: (Quantity q, MayHaveUnit q, Idea t, Concept c, IsUnit u) => [q] -> [t] -> [c] -> [u] -> [DataDefinition] -> [InstanceModel] -> [GenDefn] -> [TheoryModel] -> [ConceptInstance] -> [Section] -> [LabelledContent] -> [Reference] -> ChunkDB

-- | General smart constructor for making a <a>UMap</a> out of anything
--   that has a <a>UID</a>.
idMap :: HasUID a => [a] -> Map UID (a, Int)

-- | Smart constructor for a <a>TermMap</a>.
termMap :: Idea c => [c] -> TermMap

-- | Smart constructor for a <a>ConceptMap</a>.
conceptMap :: Concept c => [c] -> ConceptMap

-- | Smart constructor for a <a>TraceMap</a> given a traceability matrix.
traceMap :: [(UID, [UID])] -> TraceMap

-- | Translates a traceability map into a reference map.
generateRefbyMap :: TraceMap -> RefbyMap

-- | Gets an ordered list of <tt>a</tt> from any <tt>a</tt> that is of type
--   <a>UMap</a>.
asOrderedList :: UMap a -> [a]

-- | Gets the units of a <a>Quantity</a> as <a>UnitDefn</a>s.
collectUnits :: Quantity c => ChunkDB -> [c] -> [UnitDefn]

-- | Looks up a <a>UID</a> in the term table from the <a>ChunkDB</a>. If
--   nothing is found, an error is thrown.
termResolve :: ChunkDB -> UID -> IdeaDict

-- | Looks up a <a>UID</a> in the definition table from the <a>ChunkDB</a>.
--   If nothing is found, an error is thrown.
defResolve :: ChunkDB -> UID -> ConceptChunk

-- | Looks up a <a>UID</a> in the symbol table from the <a>ChunkDB</a>. If
--   nothing is found, an error is thrown.
symbResolve :: ChunkDB -> UID -> QuantityDict

-- | Trace a <a>UID</a> to related <a>UID</a>s.
traceLookup :: UID -> TraceMap -> [UID]

-- | Trace a <a>UID</a> to referenced <a>UID</a>s.
refbyLookup :: UID -> RefbyMap -> [UID]

-- | Looks up a <a>UID</a> in the datadefinition table. If nothing is
--   found, an error is thrown.
datadefnLookup :: UID -> DatadefnMap -> DataDefinition

-- | Looks up a <a>UID</a> in the instance model table. If nothing is
--   found, an error is thrown.
insmodelLookup :: UID -> InsModelMap -> InstanceModel

-- | Looks up a <a>UID</a> in the general definition table. If nothing is
--   found, an error is thrown.
gendefLookup :: UID -> GendefMap -> GenDefn

-- | Looks up a <a>UID</a> in the theory model table. If nothing is found,
--   an error is thrown.
theoryModelLookup :: UID -> TheoryModelMap -> TheoryModel

-- | Looks up a <a>UID</a> in the concept instance table. If nothing is
--   found, an error is thrown.
conceptinsLookup :: UID -> ConceptInstanceMap -> ConceptInstance

-- | Looks up a <a>UID</a> in the section table. If nothing is found, an
--   error is thrown.
sectionLookup :: UID -> SectionMap -> Section

-- | Looks up a <a>UID</a> in the labelled content table. If nothing is
--   found, an error is thrown.
labelledconLookup :: UID -> LabelledContentMap -> LabelledContent

-- | Looks up a <a>UID</a> in the reference table from the <a>ChunkDB</a>.
--   If nothing is found, an error is thrown.
refResolve :: UID -> ReferenceMap -> Reference
unitTable :: Lens' ChunkDB UnitMap
traceTable :: Lens' ChunkDB TraceMap
refbyTable :: Lens' ChunkDB RefbyMap
dataDefnTable :: Lens' ChunkDB DatadefnMap
insmodelTable :: Lens' ChunkDB InsModelMap
gendefTable :: Lens' ChunkDB GendefMap
theoryModelTable :: Lens' ChunkDB TheoryModelMap
conceptinsTable :: Lens' ChunkDB ConceptInstanceMap
sectionTable :: Lens' ChunkDB SectionMap
labelledcontentTable :: Lens' ChunkDB LabelledContentMap
refTable :: Lens' ChunkDB ReferenceMap

module Database.Drasil.Dump
type ChunkType = String
type DumpedChunkDB = Map ChunkType [UID]
umapDump :: HasUID a => UMap a -> [UID]
dumpChunkDB :: ChunkDB -> DumpedChunkDB


-- | Re-export database types and functions to simplify external use.
module Database.Drasil

-- | Our chunk databases. Must contain all maps needed in an example. In
--   turn, these maps must contain every chunk definition or concept used
--   in its respective example, else an error is thrown.
data ChunkDB
CDB :: SymbolMap -> TermMap -> ConceptMap -> UnitMap -> TraceMap -> RefbyMap -> DatadefnMap -> InsModelMap -> GendefMap -> TheoryModelMap -> ConceptInstanceMap -> SectionMap -> LabelledContentMap -> ReferenceMap -> ChunkDB

-- | A reference map, used to hold a <a>UID</a> and where it is referenced
--   (<a>UID</a>s).
type RefbyMap = Map UID [UID]

-- | A traceability map, used to hold the relation between one <a>UID</a>
--   and a list of other <a>UID</a>s.
type TraceMap = Map UID [UID]

-- | The misnomers below (for the following Map types) are not actually a
--   bad thing. We want to ensure data can't be added to a map if it's not
--   coming from a chunk, and there's no point confusing what the map is
--   for. One is for symbols + their units, and the others are for what
--   they state.
type UMap a = Map UID (a, Int)

-- | Smart constructor for chunk databases. Takes in the following:
--   
--   <ul>
--   <li>[<a>Quantity</a>] (for <a>SymbolMap</a>),</li>
--   <li><a>NamedIdea</a>s (for <a>TermMap</a>),</li>
--   <li><a>Concept</a>s (for <a>ConceptMap</a>),</li>
--   <li>Units (something that <a>IsUnit</a> for <a>UnitMap</a>),</li>
--   <li><a>DataDefinition</a>s (for <a>DatadefnMap</a>),</li>
--   <li><a>InstanceModel</a>s (for <a>InsModelMap</a>),</li>
--   <li><a>GenDefn</a>s (for <a>GendefMap</a>),</li>
--   <li><a>TheoryModel</a>s (for <a>TheoryModelMap</a>),</li>
--   <li><a>ConceptInstance</a>s (for <a>ConceptInstanceMap</a>),</li>
--   <li><a>Section</a>s (for <a>SectionMap</a>),</li>
--   <li><a>LabelledContent</a>s (for <a>LabelledContentMap</a>).</li>
--   </ul>
cdb :: (Quantity q, MayHaveUnit q, Idea t, Concept c, IsUnit u) => [q] -> [t] -> [c] -> [u] -> [DataDefinition] -> [InstanceModel] -> [GenDefn] -> [TheoryModel] -> [ConceptInstance] -> [Section] -> [LabelledContent] -> [Reference] -> ChunkDB

-- | General smart constructor for making a <a>UMap</a> out of anything
--   that has a <a>UID</a>.
idMap :: HasUID a => [a] -> Map UID (a, Int)

-- | Smart constructor for a <a>TermMap</a>.
termMap :: Idea c => [c] -> TermMap

-- | Smart constructor for a <a>ConceptMap</a>.
conceptMap :: Concept c => [c] -> ConceptMap

-- | Smart constructor for a <a>TraceMap</a> given a traceability matrix.
traceMap :: [(UID, [UID])] -> TraceMap

-- | Translates a traceability map into a reference map.
generateRefbyMap :: TraceMap -> RefbyMap

-- | Gets an ordered list of <tt>a</tt> from any <tt>a</tt> that is of type
--   <a>UMap</a>.
asOrderedList :: UMap a -> [a]

-- | Gets the units of a <a>Quantity</a> as <a>UnitDefn</a>s.
collectUnits :: Quantity c => ChunkDB -> [c] -> [UnitDefn]

-- | Looks up a <a>UID</a> in the term table from the <a>ChunkDB</a>. If
--   nothing is found, an error is thrown.
termResolve :: ChunkDB -> UID -> IdeaDict

-- | Looks up a <a>UID</a> in the definition table from the <a>ChunkDB</a>.
--   If nothing is found, an error is thrown.
defResolve :: ChunkDB -> UID -> ConceptChunk

-- | Looks up a <a>UID</a> in the symbol table from the <a>ChunkDB</a>. If
--   nothing is found, an error is thrown.
symbResolve :: ChunkDB -> UID -> QuantityDict

-- | Trace a <a>UID</a> to related <a>UID</a>s.
traceLookup :: UID -> TraceMap -> [UID]

-- | Trace a <a>UID</a> to referenced <a>UID</a>s.
refbyLookup :: UID -> RefbyMap -> [UID]

-- | Looks up a <a>UID</a> in the datadefinition table. If nothing is
--   found, an error is thrown.
datadefnLookup :: UID -> DatadefnMap -> DataDefinition

-- | Looks up a <a>UID</a> in the instance model table. If nothing is
--   found, an error is thrown.
insmodelLookup :: UID -> InsModelMap -> InstanceModel

-- | Looks up a <a>UID</a> in the general definition table. If nothing is
--   found, an error is thrown.
gendefLookup :: UID -> GendefMap -> GenDefn

-- | Looks up a <a>UID</a> in the theory model table. If nothing is found,
--   an error is thrown.
theoryModelLookup :: UID -> TheoryModelMap -> TheoryModel

-- | Looks up a <a>UID</a> in the concept instance table. If nothing is
--   found, an error is thrown.
conceptinsLookup :: UID -> ConceptInstanceMap -> ConceptInstance

-- | Looks up a <a>UID</a> in the section table. If nothing is found, an
--   error is thrown.
sectionLookup :: UID -> SectionMap -> Section

-- | Looks up a <a>UID</a> in the labelled content table. If nothing is
--   found, an error is thrown.
labelledconLookup :: UID -> LabelledContentMap -> LabelledContent

-- | Looks up a <a>UID</a> in the reference table from the <a>ChunkDB</a>.
--   If nothing is found, an error is thrown.
refResolve :: UID -> ReferenceMap -> Reference
unitTable :: Lens' ChunkDB UnitMap
traceTable :: Lens' ChunkDB TraceMap
refbyTable :: Lens' ChunkDB RefbyMap
dataDefnTable :: Lens' ChunkDB DatadefnMap
insmodelTable :: Lens' ChunkDB InsModelMap
gendefTable :: Lens' ChunkDB GendefMap
theoryModelTable :: Lens' ChunkDB TheoryModelMap
conceptinsTable :: Lens' ChunkDB ConceptInstanceMap
sectionTable :: Lens' ChunkDB SectionMap
labelledcontentTable :: Lens' ChunkDB LabelledContentMap
refTable :: Lens' ChunkDB ReferenceMap
dumpChunkDB :: ChunkDB -> DumpedChunkDB
type DumpedChunkDB = Map ChunkType [UID]
