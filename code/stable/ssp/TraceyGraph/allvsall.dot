digraph allvsall {
	dataDefn:alpha_i -> instance:assumpSBSBISL;
	dataDefn:beta_i -> instance:assumpSBSBISL;
	dataDefn:l_bi -> dataDefn:alpha_i;
	dataDefn:l_bi -> dataDefn:b_i;
	dataDefn:l_si -> dataDefn:beta_i;
	dataDefn:l_si -> dataDefn:b_i;
	dataDefn:h_i -> instance:assumpSBSBISL;
	dataDefn:h_i -> dataDefn:hR;
	dataDefn:h_i -> dataDefn:hL;
	dataDefn:Phi -> dataDefn:alpha_i;
	dataDefn:Phi -> dataDefn:f_i;
	dataDefn:Psi -> dataDefn:alpha_i;
	dataDefn:Psi -> dataDefn:f_i;
	dataDefn:Psi -> dataDefn:Phi;
	theory:equilibriumCS -> instance:assumpENSL;
	theory:mcShrSrgth -> instance:assumpSBSBISL;
	theory:effectiveStressTM -> dataDefn:sigma;
	theory:normForcEq -> dataDefn:alpha_i;
	theory:normForcEq -> dataDefn:beta_i;
	theory:normForcEq -> theory:equilibriumCS;
	theory:normForcEq -> theory:sliceWght;
	theory:normForcEq -> theory:srfWtrF;
	theory:bsShrFEq -> dataDefn:alpha_i;
	theory:bsShrFEq -> dataDefn:beta_i;
	theory:bsShrFEq -> theory:equilibriumCS;
	theory:bsShrFEq -> theory:sliceWght;
	theory:bsShrFEq -> theory:srfWtrF;
	theory:resShr -> instance:assumpSLH;
	theory:resShr -> instance:assumpSP;
	theory:resShr -> instance:assumpSLI;
	theory:resShr -> instance:assumpPSC;
	theory:resShr -> dataDefn:l_bi;
	theory:resShr -> dataDefn:sigma;
	theory:resShr -> dataDefn:tau;
	theory:resShr -> theory:mcShrSrgth;
	theory:mobShr -> instance:assumpFOS;
	theory:mobShr -> dataDefn:l_bi;
	theory:mobShr -> theory:factOfSafetyTM;
	theory:mobShr -> theory:resShr;
	theory:effNormF -> instance:assumpPSC;
	theory:effNormF -> dataDefn:sigma;
	theory:effNormF -> theory:effectiveStressTM;
	theory:effNormF -> theory:baseWtrF;
	theory:resShearWO -> dataDefn:H_i;
	theory:resShearWO -> dataDefn:alpha_i;
	theory:resShearWO -> dataDefn:beta_i;
	theory:resShearWO -> dataDefn:l_bi;
	theory:resShearWO -> theory:sliceWght;
	theory:resShearWO -> theory:baseWtrF;
	theory:resShearWO -> theory:srfWtrF;
	theory:mobShearWO -> dataDefn:H_i;
	theory:mobShearWO -> dataDefn:alpha_i;
	theory:mobShearWO -> dataDefn:beta_i;
	theory:mobShearWO -> theory:sliceWght;
	theory:mobShearWO -> theory:srfWtrF;
	theory:X_i -> instance:assumpINSFL;
	theory:X_i -> dataDefn:f_i;
	theory:momentEql -> instance:assumpNESSS;
	theory:momentEql -> instance:assumpHFSM;
	theory:momentEql -> dataDefn:alpha_i;
	theory:momentEql -> dataDefn:beta_i;
	theory:momentEql -> dataDefn:b_i;
	theory:momentEql -> dataDefn:h_i;
	theory:momentEql -> dataDefn:torque;
	theory:momentEql -> theory:equilibriumCS;
	theory:momentEql -> theory:weight;
	theory:momentEql -> theory:sliceWght;
	theory:momentEql -> theory:srfWtrF;
	theory:weight -> theory:newtonSL;
	theory:sliceWght -> instance:assumpSLH;
	theory:sliceWght -> instance:assumpPSC;
	theory:sliceWght -> instance:assumpSBSBISL;
	theory:sliceWght -> instance:assumpWIBE;
	theory:sliceWght -> instance:assumpWISE;
	theory:sliceWght -> dataDefn:b_i;
	theory:sliceWght -> theory:weight;
	theory:baseWtrF -> instance:assumpPSC;
	theory:baseWtrF -> instance:assumpSBSBISL;
	theory:baseWtrF -> instance:assumpWIBE;
	theory:baseWtrF -> instance:assumpHFSM;
	theory:baseWtrF -> dataDefn:l_bi;
	theory:baseWtrF -> theory:pressure;
	theory:baseWtrF -> theory:baseWtrF;
	theory:srfWtrF -> instance:assumpPSC;
	theory:srfWtrF -> instance:assumpSBSBISL;
	theory:srfWtrF -> instance:assumpWISE;
	theory:srfWtrF -> instance:assumpHFSM;
	theory:srfWtrF -> dataDefn:l_si;
	theory:srfWtrF -> theory:pressure;
	theory:srfWtrF -> theory:srfWtrF;
	theory:FS -> instance:assumpINSFL;
	theory:FS -> instance:assumpES;
	theory:FS -> instance:assumpSF;
	theory:FS -> instance:assumpSL;
	theory:FS -> dataDefn:Phi;
	theory:FS -> dataDefn:Psi;
	theory:FS -> theory:normForcEq;
	theory:FS -> theory:bsShrFEq;
	theory:FS -> theory:mobShr;
	theory:FS -> theory:resShearWO;
	theory:FS -> theory:mobShearWO;
	theory:FS -> theory:X_i;
	theory:FS -> theory:FS;
	theory:FS -> theory:nrmShrForIM;
	theory:FS -> theory:intsliceFsRC;
	theory:nrmShrForIM -> instance:assumpINSFL;
	theory:nrmShrForIM -> instance:assumpES;
	theory:nrmShrForIM -> instance:assumpSF;
	theory:nrmShrForIM -> instance:assumpSL;
	theory:nrmShrForIM -> theory:X_i;
	theory:nrmShrForIM -> theory:momentEql;
	theory:nrmShrForIM -> theory:FS;
	theory:nrmShrForIM -> theory:nrmShrForIM;
	theory:nrmShrForIM -> theory:nrmShrForNumRC;
	theory:nrmShrForIM -> theory:nrmShrForDenRC;
	theory:nrmShrForIM -> theory:intsliceFsRC;
	theory:nrmShrForNumRC -> dataDefn:H_i;
	theory:nrmShrForNumRC -> dataDefn:alpha_i;
	theory:nrmShrForNumRC -> dataDefn:beta_i;
	theory:nrmShrForNumRC -> dataDefn:b_i;
	theory:nrmShrForNumRC -> dataDefn:h_i;
	theory:nrmShrForNumRC -> theory:srfWtrF;
	theory:nrmShrForNumRC -> theory:nrmShrForIM;
	theory:nrmShrForDenRC -> dataDefn:b_i;
	theory:nrmShrForDenRC -> dataDefn:f_i;
	theory:nrmShrForDenRC -> theory:nrmShrForIM;
	theory:intsliceFsRC -> instance:assumpES;
	theory:intsliceFsRC -> dataDefn:Phi;
	theory:intsliceFsRC -> dataDefn:Psi;
	theory:intsliceFsRC -> theory:resShearWO;
	theory:intsliceFsRC -> theory:mobShearWO;
	theory:intsliceFsRC -> theory:FS;
	theory:intsliceFsRC -> theory:nrmShrForIM;
	theory:intsliceFsRC -> theory:intsliceFsRC;
	theory:crtSlpIdIM -> instance:assumpSSC;
	instance:determineCritSlip -> theory:FS;
	instance:determineCritSlip -> theory:nrmShrForIM;
	instance:determineCritSlip -> theory:intsliceFsRC;
	instance:determineCritSlip -> theory:crtSlpIdIM;
	instance:displayGraph -> theory:crtSlpIdIM;
	instance:displayFS -> theory:FS;
	instance:displayFS -> theory:nrmShrForIM;
	instance:displayFS -> theory:intsliceFsRC;
	instance:displayNormal -> theory:FS;
	instance:displayNormal -> theory:nrmShrForIM;
	instance:displayNormal -> theory:intsliceFsRC;
	instance:displayShear -> theory:FS;
	instance:displayShear -> theory:nrmShrForIM;
	instance:displayShear -> theory:intsliceFsRC;
	instance:writeToFile -> instance:displayInput;
	instance:writeToFile -> instance:displayGraph;
	instance:writeToFile -> instance:displayFS;
	instance:writeToFile -> instance:displayNormal;
	instance:writeToFile -> instance:displayShear;
	instance:LC_inhomogeneous -> instance:assumpSLH;
	instance:LC_seismic -> instance:assumpSF;
	instance:LC_external -> instance:assumpSL;
	instance:UC_normshearlinear -> instance:assumpINSFL;
	instance:UC_2donly -> instance:assumpENSL;


	instance:assumpSSC	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSSC"];
	instance:assumpFOS	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpFOS"];
	instance:assumpSLH	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSLH"];
	instance:assumpSP	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSP"];
	instance:assumpSLI	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSLI"];
	instance:assumpINSFL	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpINSFL"];
	instance:assumpPSC	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpPSC"];
	instance:assumpENSL	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpENSL"];
	instance:assumpSBSBISL	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSBSBISL"];
	instance:assumpES	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpES"];
	instance:assumpSF	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSF"];
	instance:assumpSL	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpSL"];
	instance:assumpWIBE	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpWIBE"];
	instance:assumpWISE	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpWISE"];
	instance:assumpNESSS	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpNESSS"];
	instance:assumpHFSM	[shape=box, color=black, style=filled, fillcolor=mistyrose, label="A:assumpHFSM"];

	subgraph A {
	rank="same"
	{instance:assumpSSC, instance:assumpFOS, instance:assumpSLH, instance:assumpSP, instance:assumpSLI, instance:assumpINSFL, instance:assumpPSC, instance:assumpENSL, instance:assumpSBSBISL, instance:assumpES, instance:assumpSF, instance:assumpSL, instance:assumpWIBE, instance:assumpWISE, instance:assumpNESSS, instance:assumpHFSM}
	}

	dataDefn:H_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:intersliceWtrF"];
	dataDefn:alpha_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:angleA"];
	dataDefn:beta_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:angleB"];
	dataDefn:b_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:lengthB"];
	dataDefn:l_bi	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:lengthLb"];
	dataDefn:l_si	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:lengthLs"];
	dataDefn:h_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:slcHeight"];
	dataDefn:sigma	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:normStress"];
	dataDefn:tau	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:tangStress"];
	dataDefn:torque	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:torque"];
	dataDefn:f_i	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:ratioVariation"];
	dataDefn:Phi	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:convertFunc1"];
	dataDefn:Psi	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:convertFunc2"];
	dataDefn:F_xG	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:nrmForceSumDD"];
	dataDefn:F_xH	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:watForceSumDD"];
	dataDefn:hR	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:sliceHghtRightDD"];
	dataDefn:hL	[shape=box, color=black, style=filled, fillcolor=paleturquoise1, label="DD:sliceHghtLeftDD"];

	subgraph DD {
	rank="same"
	{dataDefn:H_i, dataDefn:alpha_i, dataDefn:beta_i, dataDefn:b_i, dataDefn:l_bi, dataDefn:l_si, dataDefn:h_i, dataDefn:sigma, dataDefn:tau, dataDefn:torque, dataDefn:f_i, dataDefn:Phi, dataDefn:Psi, dataDefn:F_xG, dataDefn:F_xH, dataDefn:hR, dataDefn:hL}
	}

	theory:factOfSafetyTM	[shape=box, color=black, style=filled, fillcolor=pink, label="TM:factOfSafety"];
	theory:equilibriumCS	[shape=box, color=black, style=filled, fillcolor=pink, label="TM:equilibrium"];
	theory:mcShrSrgth	[shape=box, color=black, style=filled, fillcolor=pink, label="TM:mcShrStrgth"];
	theory:effectiveStressTM	[shape=box, color=black, style=filled, fillcolor=pink, label="TM:effStress"];
	theory:newtonSL	[shape=box, color=black, style=filled, fillcolor=pink, label="TM:NewtonSecLawMot"];

	subgraph TM {
	rank="same"
	{theory:factOfSafetyTM, theory:equilibriumCS, theory:mcShrSrgth, theory:effectiveStressTM, theory:newtonSL}
	}

	theory:normForcEq	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:normForcEq"];
	theory:bsShrFEq	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:bsShrFEq"];
	theory:resShr	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:resShr"];
	theory:mobShr	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:mobShr"];
	theory:effNormF	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:effNormF"];
	theory:resShearWO	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:resShearWO"];
	theory:mobShearWO	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:mobShearWO"];
	theory:X_i	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:normShrR"];
	theory:momentEql	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:momentEql"];
	theory:weight	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:weight"];
	theory:sliceWght	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:sliceWght"];
	theory:pressure	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:hsPressure"];
	theory:baseWtrF	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:baseWtrF"];
	theory:srfWtrF	[shape=box, color=black, style=filled, fillcolor=palegreen, label="GD:srfWtrF"];

	subgraph GD {
	rank="same"
	{theory:normForcEq, theory:bsShrFEq, theory:resShr, theory:mobShr, theory:effNormF, theory:resShearWO, theory:mobShearWO, theory:X_i, theory:momentEql, theory:weight, theory:sliceWght, theory:pressure, theory:baseWtrF, theory:srfWtrF}
	}

	theory:FS	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:fctSfty"];
	theory:nrmShrForIM	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:nrmShrFor"];
	theory:nrmShrForNumRC	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:nrmShrForNum"];
	theory:nrmShrForDenRC	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:nrmShrForDen"];
	theory:intsliceFsRC	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:intsliceFs"];
	theory:crtSlpIdIM	[shape=box, color=black, style=filled, fillcolor=khaki1, label="IM:crtSlpId"];

	subgraph IM {
	rank="same"
	{theory:FS, theory:nrmShrForIM, theory:nrmShrForNumRC, theory:nrmShrForDenRC, theory:intsliceFsRC, theory:crtSlpIdIM}
	}

	instance:readAndStore	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:readAndStore"];
	instance:verifyInput	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:verifyInput"];
	instance:determineCritSlip	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:determineCritSlip"];
	instance:verifyOutput	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:verifyOutput"];
	instance:displayInput	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:displayInput"];
	instance:displayGraph	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:displayGraph"];
	instance:displayFS	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:displayFS"];
	instance:displayNormal	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:displayNormal"];
	instance:displayShear	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:displayShear"];
	instance:writeToFile	[shape=box, color=black, style=filled, fillcolor=ivory, label="FR:writeToFile"];
	instance:correct	[shape=box, color=black, style=filled, fillcolor=ivory, label="NFR:correct"];
	instance:understandable	[shape=box, color=black, style=filled, fillcolor=ivory, label="NFR:understandable"];
	instance:reusable	[shape=box, color=black, style=filled, fillcolor=ivory, label="NFR:reusable"];
	instance:maintainable	[shape=box, color=black, style=filled, fillcolor=ivory, label="NFR:maintainable"];

	subgraph FR {
	rank="same"
	{instance:readAndStore, instance:verifyInput, instance:determineCritSlip, instance:verifyOutput, instance:displayInput, instance:displayGraph, instance:displayFS, instance:displayNormal, instance:displayShear, instance:writeToFile, instance:correct, instance:understandable, instance:reusable, instance:maintainable}
	}

	instance:identifyCritAndFS	[shape=box, color=black, style=filled, fillcolor=darkgoldenrod1, label="GS:identifyCritAndFS"];
	instance:determineNormalF	[shape=box, color=black, style=filled, fillcolor=darkgoldenrod1, label="GS:determineNormalF"];
	instance:determineShearF	[shape=box, color=black, style=filled, fillcolor=darkgoldenrod1, label="GS:determineShearF"];

	subgraph GS {
	rank="same"
	{instance:identifyCritAndFS, instance:determineNormalF, instance:determineShearF}
	}

	instance:LC_inhomogeneous	[shape=box, color=black, style=filled, fillcolor=lavender, label="LC:LC_inhomogeneous"];
	instance:LC_seismic	[shape=box, color=black, style=filled, fillcolor=lavender, label="LC:LC_seismic"];
	instance:LC_external	[shape=box, color=black, style=filled, fillcolor=lavender, label="LC:LC_external"];
	instance:UC_normshearlinear	[shape=box, color=black, style=filled, fillcolor=lavender, label="UC:UC_normshearlinear"];
	instance:UC_2donly	[shape=box, color=black, style=filled, fillcolor=lavender, label="UC:UC_2donly"];

	subgraph LC {
	rank="same"
	{instance:LC_inhomogeneous, instance:LC_seismic, instance:LC_external, instance:UC_normshearlinear, instance:UC_2donly}
	}

}
