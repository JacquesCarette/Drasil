# For documentation on how to add to this, see Issue #1371

SHELL = bash

#--------------------------------------------#
#--- Package variables for use in targets ---#
#--------------------------------------------#

# List of all known packages
PACKAGES = lang metadata code docLang printers build theory gool data database gen utils website
PACKAGES_E = $(PACKAGES) example

# and associated package-level suffixes
BUILD_P_SUFFIX = _build
DOC_P_SUFFIX = _doc
GRAPH_P_SUFFIX = _graph

BUILD_PACKAGES = $(addsuffix $(BUILD_P_SUFFIX), $(PACKAGES))
DOC_PACKAGES = $(addsuffix $(DOC_P_SUFFIX), $(PACKAGES))
GRAPH_PACKAGES = $(addsuffix $(GRAPH_P_SUFFIX), $(PACKAGES_E)) 
ANALYSIS_PACKAGES = drasil $(PACKAGES_E)

PACKAGE_GEN_TARGET = BUILD DOC GRAPH

#--------------------------------------------#
#--- Example variables for use in targets ---#
#--------------------------------------------#

# Current list of examples
SRC_EXAMPLES = glassbr nopcm projectile pdcontroller dblpendulum
EXAMPLES = $(SRC_EXAMPLES) hghc swhs ssp gamephysics template sglpendulum 
GOOLTEST = codegenTest

# where they live
HGHC_DIR  = hghc
GLASSBR_DIR = glassbr
NOPCM_DIR = nopcm
SWHS_DIR  = swhs
SSP_DIR   = ssp
GAMEPHYSICS_DIR  = gamephysics
PROJECTILE_DIR = projectile
TEMPLATE_DIR = template
GOOLTEST_DIR = gooltest
DBLPENDULUM_DIR = dblpendulum
SGLPENDULUM_DIR = sglpendulum
PDCONTROLLER_DIR = pdcontroller

# Directories for examples with multiple src versions
MULTI_SRC_DIRS = $(PROJECTILE_DIR)

# All example directories
EXAMPLE_DIRS = $(MULTI_SRC_DIRS) $(HGHC_DIR) $(GLASSBR_DIR) $(NOPCM_DIR) \
  $(SWHS_DIR) $(SSP_DIR) $(GAMEPHYSICS_DIR) $(DBLPENDULUM_DIR) $(SGLPENDULUM_DIR)\
  $(PDCONTROLLER_DIR)

# and the name of their executables
HGHC_EXE  = hghc
GLASSBR_EXE = glassbr
NOPCM_EXE = nopcm
SWHS_EXE  = swhs
SSP_EXE   = ssp
GAMEPHYSICS_EXE  = gamephysics
PROJECTILE_EXE = projectile
TEMPLATE_EXE = template
GOOLTEST_EXE = codegenTest
DBLPENDULUM_EXE = dblpendulum
SGLPENDULUM_EXE = sglpendulum
PDCONTROLLER_EXE = pdcontroller

# and the associated per-example information generated
GEN_E_SUFFIX = _gen
TEST_E_SUFFIX = _diff
TEX_E_SUFFIX = _tex
CODE_E_SUFFIX = _gool
DCP_E_SUFFIX = _deploy_code_path
STABILIZE_E_SUFFIX = _stabilize
BC_E_SUFFIX = _build_clean
TRACE_GRAPH_SUFFIX = _trace_graph
INSTALL_E_SUFFIX = _install

# add example names with the appropriate suffixes to create per-example targets
GEN_EXAMPLES = $(addsuffix $(GEN_E_SUFFIX), $(EXAMPLES))
TEST_EXAMPLES =  $(addsuffix $(TEST_E_SUFFIX), $(EXAMPLES))
TEX_EXAMPLES = $(addsuffix $(TEX_E_SUFFIX), $(EXAMPLES))
CODE_EXAMPLES = $(addsuffix $(CODE_E_SUFFIX), $(SRC_EXAMPLES))
DCP_EXAMPLES = $(addsuffix $(DCP_E_SUFFIX), $(EXAMPLES))
STABILIZE_EXAMPLES = $(addsuffix $(STABILIZE_E_SUFFIX), $(EXAMPLES))
BC_EXAMPLES = $(addsuffix $(BC_E_SUFFIX), $(EXAMPLES))
TRACE_GRAPH_EXAMPLES = $(addsuffix $(TRACE_GRAPH_SUFFIX), $(EXAMPLES))
INSTALL_EXAMPLES = $(addsuffix $(INSTALL_E_SUFFIX), $(EXAMPLES))

EXAMPLE_GEN_TARGET = GEN TEST TEX CODE DCP

# Folders generated by Drasil.
GENNED_FOLDERS = $(ANALYSIS_FOLDER_NAME) $(BUILD_FOLDER_NAME) $(DEPLOY_FOLDER_NAME) $(DOCS_FOLDER_NAME) $(GRAPH_FOLDER_NAME) $(LOG_FOLDER_NAME) $(TRACEY_GRAPHS_FOLDER_NAME) $(WEBSITE_FOLDER_NAME) $(DEBUG_FOLDER_NAME)
CLEAN_GF_PREFIX = clean_
CLEAN_FOLDERS = $(addprefix $(CLEAN_GF_PREFIX), $(GENNED_FOLDERS))

ALL_EXPANDED_TARGETS = $(foreach P, $(PACKAGE_GEN_TARGET), $($(P)_PACKAGES)) $(foreach E, $(EXAMPLE_GEN_TARGET), $($(E)_EXAMPLES)) $(CLEAN_FOLDERS)

#-------------------------------#
#--- Variables/Configuration ---#
#-------------------------------#

# make variables/configuration
DIFF = diff --strip-trailing-cr -r -X ../.gitignore
LOG_SUFFIX = _log.log
MIN_STACK_VER = 2.3.1  # Match stack.yaml see PR #2142 for more info.
CACHED_MSV_FILE = .drasil-min-stack-ver
DF_DIR = datafiles/
BUILD_FOLDER_NAME = build
BUILD_FOLDER = $(BUILD_FOLDER_NAME)/
STABLE_FOLDER_NAME = stable
STABLE_FOLDER = $(STABLE_FOLDER_NAME)/
EXAMPLE_CODE_SUBFOLDER = src/
LOG_FOLDER_NAME = logs
LOG_FOLDER = $(LOG_FOLDER_NAME)/
SCRIPT_FOLDER = scripts/
GRAPH_FOLDER_NAME = graphs
GRAPH_FOLDER = $(GRAPH_FOLDER_NAME)/
ANALYSIS_FOLDER_NAME = analysis
ANALYSIS_FOLDER = $(ANALYSIS_FOLDER_NAME)/
DEBUG_FOLDER_NAME = debug
TYPEGRAPH_FOLDER_NAME = TypeDependencyGraphs
TYPEGRAPH_FOLDER = $(ANALYSIS_FOLDER)$(TYPEGRAPH_FOLDER_NAME)/
CLASSINST_GRAPH_FOLDER_NAME = packagegraphs
CLASSINST_GRAPH_FOLDER = $(ANALYSIS_FOLDER)ClassInstDep/$(CLASSINST_GRAPH_FOLDER_NAME)/
DEPLOY_FOLDER_NAME = deploy
DEPLOY_FOLDER = $(DEPLOY_FOLDER_NAME)/
DEPLOY_CODE_PATH_KV_SEP = :
DOCS_FOLDER_NAME = docs
DOCS_FOLDER = $(DOCS_FOLDER_NAME)/
TRACEY_GRAPH_FOLDER_NAME = TraceyGraph
TRACEY_GRAPH_FOLDER = $(TRACEY_GRAPH_FOLDER_NAME)/
TRACEY_GRAPHS_FOLDER_NAME = traceygraphs
TRACEY_GRAPHS_FOLDER = $(TRACEY_GRAPHS_FOLDER_NAME)/
TRACEY_GRAPH_NAMES = allvsall allvsr avsa avsall refvsref
WEBSITE_FOLDER_NAME = Website
WEBSITE_FOLDER = $(WEBSITE_FOLDER_NAME)/HTML/

#####################################
#--- `make` command line options ---#
#####################################

# Indicating whether an operation will be used for deployment (1), or for general testing purposes (0).
FULL ?= 0

# GHC debug options
PROFALL = --executable-profiling --library-profiling
PROFEXEC = +RTS -xc -P

# GHC build options
GHCTHREADS ?= 2

override GHCFLAGS += -Wall -j$(GHCTHREADS)
override stackArgs += --ghc-options="$(GHCFLAGS)"

# Output amount control
NOISY=no
SUMMARIZE_TEX=no

# Some commands now prefer to have TERM defined when things go awry
# and since this is going to be run in batch, 'dumb' is best default.
# But don't set TERM itself, as it will make things ugly for interactive use.
BATCHTERM=dumb

########################
#--- Actual targets ---#
########################

# Default `make` will just run examples and test them against stable.
# See `test` target for more details.
all: test ##@Examples Run examples and test against stable.

install: ##@Examples Install all example project binaries into your local binary path (see $(stack path) for local-bin-path).
	stack install $(stackArgs)

debug: stackArgs += $(PROFALL)
debug: EXECARGS += $(PROFEXEC)
debug: test ##@Examples Run test target with better debugging tools.

pr_ready: all hot_hlint ##@General Check if your current work is ready to for a PR via `all` and `hot_hlint`.
	- echo "Your build/ and stable/ match, and your code currently passes HLint tests."
	- echo "Feel free to create a PR for your code if you feel it's ready."

#----------------------#
#--- Initial checks ---#
#----------------------#

# Sanity check -- are we using the right stack version?
check_stack: ##@Checks Check that we are using the right stack version.
	@MIN_STACK_VER="$(MIN_STACK_VER)" CACHED_MSV_FILE="$(CACHED_MSV_FILE)" "$(SHELL)" "$(SCRIPT_FOLDER)check_stack.sh"

check_dot: ##@Checks Download the most recent version of graphviz.
	@BIN="dot" DOWNLOAD_LOCATION="https://www.graphviz.org/download/" "$(SHELL)" "$(SCRIPT_FOLDER)check_binary.sh"

graphmod: check_stack ##@Checks Check that we can generate dot graphs.
	stack install dotgen graphmod

#----------------------------------------------------------#
#--- Targets for building, running, or testing examples ---#
#----------------------------------------------------------#

deps: check_stack ##@Dependencies Build only dependencies.
	- stack build $(stackArgs) --only-dependencies

#-------------------------------------------------#
#--- Targets that affect all packages/examples ---#
#-------------------------------------------------#

# Build all the Drasil packages.
code: ##@Examples Build all Drasil packages.
	stack build $(stackArgs)

# First build all the Drasil packages, then run all examples (no traceability graphs).
examples: $(GEN_EXAMPLES) ##@Examples Run all examples (no traceability graphs).

# First build all the Drasil packages, then run all examples and generate graphs for them.
tracegraphs: $(TRACE_GRAPH_EXAMPLES) ##@Examples Run examples with traceability graphs.

# First build all the Drasil packages, run all examples (no traceability graphs),
# and then test the generated contents with those in the stable folder.
test: $(TEST_EXAMPLES) ##@Examples Run all examples and compare against the stable folder examples.
	@echo ----------------------------
	@echo Make complete, checking logs
	@echo ----------------------------
	@LOG_FOLDER="$(LOG_FOLDER)" LOG_SUFFIX="$(LOG_SUFFIX)" NOISY=$(NOISY) "$(SHELL)" "$(SCRIPT_FOLDER)log_check.sh"

# First build all the Drasil packages, run all examples (no traceability graphs),
# and then overwrite contents in the stable folder with currently generated ones.
stabilize: $(STABILIZE_EXAMPLES) ##@Examples Overwrites the stable folder with up-to-date artifacts.
	@echo ----------------------------
	@echo Stabilized all examples
	@echo ----------------------------

# First builds all Drasil packages, runs examples with dot graphs,
# then make pdfs from the generated TeX files.
tex: $(TEX_EXAMPLES) ##@Examples Generate all example pdfs. Needs Graphviz to work.

# Generate graph of package dependencies
packagedeps: graphmod check_dot
	@mkdir -p $(GRAPH_FOLDER)
	@echo ----------------------------
	@echo Generating package dependency graph
	@echo ----------------------------
	@stack dot --prune dblpendulum,gamephysics,glassbr,hghc,nopcm,pdcontroller,projectile,sglpendulum,ssp,swhs,template,drasil-website | tred | dot -Tpng > "$(GRAPH_FOLDER)drasil-all-pkgs-deps".png	

#--------------------------------------------------------------#
#--- Targets that are used for individual packages/examples ---#
#--------------------------------------------------------------#
# Use filter to make a target for every package (second argument of filter)
# with an appended suffix (first argument of filter).

# Variables needed to create individual example targets using filter.
%$(GEN_E_SUFFIX) %$(TEST_E_SUFFIX) %$(STABILIZE_E_SUFFIX) %$(BC_E_SUFFIX) %$(TRACE_GRAPH_SUFFIX) %$(INSTALL_E_SUFFIX): EXAMPLE=$(shell echo $* | tr a-z A-Z)
%$(GEN_E_SUFFIX) %$(TEST_E_SUFFIX) %$(STABILIZE_E_SUFFIX) %$(BC_E_SUFFIX) %$(TRACE_GRAPH_SUFFIX) %$(INSTALL_E_SUFFIX): EDIR=$($(EXAMPLE)_DIR)
%$(GEN_E_SUFFIX) %$(TRACE_GRAPH_SUFFIX) %$(INSTALL_E_SUFFIX): EEXE=$($(EXAMPLE)_EXE)

# Build individual Drasil packages. Each package will have the target packageName_build.
$(filter %$(BUILD_P_SUFFIX), $(BUILD_PACKAGES)): %$(BUILD_P_SUFFIX): check_stack
	stack build $(stackArgs) "drasil-$*"

# First build all Drasil packages, then run individual examples.
# No traceability graphs will be created, only the dot files.
# Specific example targets will have the name exampleName_gen.
# Alternatively, you can run an example by running `stack exec exampleName`.
$(filter %$(GEN_E_SUFFIX), $(GEN_EXAMPLES)): %$(GEN_E_SUFFIX):
	stack build $(stackArgs) "$(EEXE)"
	@mkdir -p "$(BUILD_FOLDER)$(EDIR)"
	cd "$(BUILD_FOLDER)$(EDIR)" && stack exec -- "$(EEXE)" $(EXECARGS)

# Install individual Drasil examples
$(filter %$(INSTALL_E_SUFFIX), $(INSTALL_EXAMPLES)): %$(INSTALL_E_SUFFIX):
	stack install $(stackArgs) "$(EEXE)"

# Same as above targets; run individual examples but create traceability graphs
# for each example run. Needs Graphviz to run. Graphs generate in svg, pdf, and png formats.
# Specific example targets will have the name exampleName_trace_graph.
$(filter %$(TRACE_GRAPH_SUFFIX), $(TRACE_GRAPH_EXAMPLES)): %$(TRACE_GRAPH_SUFFIX): graphmod
	stack build $(stackArgs) "$(EEXE)"
	@mkdir -p "$(BUILD_FOLDER)$(EDIR)"
	cd "$(BUILD_FOLDER)$(EDIR)" && stack exec -- "$(EEXE)" $(EXECARGS)
	@mkdir -p "$(TRACEY_GRAPHS_FOLDER)$(EDIR)"
	@echo Making traceability graphs for "$(EEXE)"
	@if [ -d "$(BUILD_FOLDER)$(EDIR)/$(TRACEY_GRAPH_FOLDER)" ]; then \
		cd "$(BUILD_FOLDER)$(EDIR)/$(TRACEY_GRAPH_FOLDER)" && for graph in $(TRACEY_GRAPH_NAMES); do \
			dot -Tpng $$graph.dot > "../../../$(TRACEY_GRAPHS_FOLDER)$(EDIR)/$$graph.png" ; \
			dot -Tpdf $$graph.dot > "../../../$(TRACEY_GRAPHS_FOLDER)$(EDIR)/$$graph.pdf" ; \
			dot -Tsvg $$graph.dot > "../../../$(TRACEY_GRAPHS_FOLDER)$(EDIR)/$$graph.svg" ; \
		done ; \
	fi ; \

# Individual example diff tests. First builds all Drasil packages,
# runs all examples, and then compares the generated contents (in the build folder)
# to those in the stable folder. Targets will have the form exampleName_diff.
$(filter %$(TEST_E_SUFFIX), $(TEST_EXAMPLES)): %$(TEST_E_SUFFIX): $(CLEAN_GF_PREFIX)$(LOG_FOLDER_NAME) %$(GEN_E_SUFFIX)
	@mkdir -p "$(LOG_FOLDER)"
	- $(DIFF) "$(STABLE_FOLDER)$*/" "$(BUILD_FOLDER)$(EDIR)/" > "$(LOG_FOLDER)$(EDIR)$(LOG_SUFFIX)"

# Individual example build cleans. Removes a specific example from the build folder.
# Targets will have the form exampleName_build_clean.
$(filter %$(BC_E_SUFFIX), $(BC_EXAMPLES)): %$(BC_E_SUFFIX):
	- rm -rf "$(BUILD_FOLDER)$(EDIR)"

# Individual example stabilization. First builds all Drasil packages,
# runs all examples, and then copies contents from the build folder into stable.
# Targets will have the form exampleName_stabilize.
$(filter %$(STABILIZE_E_SUFFIX), $(STABILIZE_EXAMPLES)): %$(STABILIZE_E_SUFFIX): %$(BC_E_SUFFIX) %$(GEN_E_SUFFIX)
	- rm -rf "$(STABLE_FOLDER)$*/"
	- cp -r "$(BUILD_FOLDER)$(EDIR)" "$(STABLE_FOLDER)$*/"

# Generate individual example pdfs. Needs Graphviz to work.
# First builds all Drasil packages, runs examples with dot graphs,
# then make pdfs from the generated TeX files.
%$(TEX_E_SUFFIX): EXAMPLE=$(shell echo $* | tr a-z A-Z)
%$(TEX_E_SUFFIX): EDIR=$($(EXAMPLE)_DIR)
$(filter %$(TEX_E_SUFFIX), $(TEX_EXAMPLES)): %$(TEX_E_SUFFIX): %$(TRACE_GRAPH_SUFFIX)
	EDIR="$(EDIR)" BUILD_FOLDER="$(BUILD_FOLDER)" SUMMARIZE_TEX=$(SUMMARIZE_TEX) MAKE="$(MAKE)" TERM="$(BATCHTERM)" "$(SHELL)" "$(SCRIPT_FOLDER)"tex_build.sh

#----------------------------------------------------------------------------------#
#--- Generate analysis of module, class, datatype, and class instance structure ---#
#----------------------------------------------------------------------------------#

graphs: $(GRAPH_PACKAGES) packagedeps ##@Analysis Generate all module dependency graphs.
	- echo "Graphs generated in local '$(GRAPH_FOLDER)' folder."
	
# Generate individual package module dependency graphs.
$(filter %$(GRAPH_P_SUFFIX), $(GRAPH_PACKAGES)): %$(GRAPH_P_SUFFIX): graphmod check_dot
	@mkdir -p "$(GRAPH_FOLDER)"
	find "drasil-$*" -name '*.hs' -print | grep -v stack | xargs stack exec -- graphmod -q -p --no-cluster | tee >(dot -Tpdf -o "$(GRAPH_FOLDER)drasil-$*.pdf") >(dot -Tsvg -o "$(GRAPH_FOLDER)drasil-$*.svg") | dot -Tpng -o "$(GRAPH_FOLDER)drasil-$*.png"

# Dot graphs are currently generated for datatypes and class instance structures.
# They are made using the default dot graph algorithm and viewability. 
# We also add example to these variables so that we can still
# make the graphs for that folder (although it's technically not a package itself).
analysis: graphmod ##@Analysis Generate a table and some graphs to analyze Drasil's class, datatype, and instance structures.
	- rm -rf "$(ANALYSIS_FOLDER)"
	@mkdir -p "$(ANALYSIS_FOLDER)"
	cd $(SCRIPT_FOLDER) && stack exec -- runghc ClassInstDepGen.hs
	cd $(SCRIPT_FOLDER) && stack exec -- runghc TypeDepGen.hs
	@echo "Analysis complete. Please see '$(ANALYSIS_FOLDER)' folder."

convertAnalyzed: ##@Analysis Convert analyzed dot graphs into SVGs.
	@echo "Building dependency graphs. This may take a few minutes."
	@cd $(TYPEGRAPH_FOLDER) && for pack in $(ANALYSIS_PACKAGES); do \
		echo "Converting type dot graph for '$$pack' into an svg" ; \
		dot -Tsvg $$pack.dot > "./$$pack.svg" ; \
	done
	@cd $(CLASSINST_GRAPH_FOLDER) && for pack in $(PACKAGES_E); do \
		echo "Converting classInst dot graph for '$$pack' into an svg" ; \
		dot -Tsvg $$pack.dot > "./$$pack.svg" ; \
	done
	@echo "Dependency graphs built, check your '$(TYPEGRAPH_FOLDER)' and '$(CLASSINST_GRAPH_FOLDER)' folders."

#---------------------------------------#
#--- HLint and Haddock Documentation ---#
#---------------------------------------#

hlint: check_stack ##@HLint Run HLint through the drasil packages. Uses a local HLint installation.
	stack install hlint
	hlint .

hot_hlint: ##@HLint Run HLint through the drasil packages. Uses the latest HLint version, downloading the binary each time.
	curl --max-time 60 -sSL https://raw.github.com/ndmitchell/hlint/master/misc/run.sh | sh -s .

docs: check_stack ##@Documentation Create Haddock documentation of all Drasil modules. Set FULL=1 if you want to additionally test Haddock generation for website deployment.
	FULL="$(FULL)" DOCS_FOLDER="$(DOCS_FOLDER)" GHC_FLAGS="$(GHCFLAGS)" sh scripts/make_docs.sh

#----------------------------#
#--- GOOL related targets ---#
#----------------------------#

# Make individual code examples. Targets are of the form exampleName_gool.
%$(CODE_E_SUFFIX): EXAMPLE=$(shell echo $* | tr a-z A-Z)
%$(CODE_E_SUFFIX): EDIR=$($(EXAMPLE)_DIR)
$(filter %$(CODE_E_SUFFIX), $(CODE_EXAMPLES)): %$(CODE_E_SUFFIX): %$(GEN_E_SUFFIX)
	@DF_DIR="$(DF_DIR)" EDIR="$(EDIR)" BUILD_FOLDER="$(BUILD_FOLDER)" \
	EXAMPLE_CODE_SUBFOLDER="$(EXAMPLE_CODE_SUBFOLDER)" \
	MULTI_SRC_DIRS="$(MULTI_SRC_DIRS)" TARGET=$(TARGET) \
	MAKE="$(MAKE)" "$(SHELL)" "$(SCRIPT_FOLDER)code_build.sh"

# GOOL testing for examples that generate code.
$(GOOLTEST): $(GOOLTEST)$(GEN_E_SUFFIX)
	@EDIR="$(GOOLTEST_DIR)" BUILD_FOLDER="$(BUILD_FOLDER)" TARGET=$(TARGET) \
	MAKE="$(MAKE)" "$(SHELL)" "$(SCRIPT_FOLDER)gooltest_build.sh"

gool: $(CODE_EXAMPLES) ##@GOOL Generate code from examples and test each one.

doxygen: TARGET=doc
doxygen: $(CODE_EXAMPLES) ##@GOOL Generate doxygen documentation for all examples.
	
# Find all the code file paths within an example.
# Targets are of the form exampleName_deploy_code_path.
%$(DCP_E_SUFFIX): EXAMPLE=$(shell echo $* | tr a-z A-Z)
%$(DCP_E_SUFFIX): EDIR=$($(EXAMPLE)_DIR)
$(filter %$(DCP_E_SUFFIX), $(DCP_EXAMPLES)): %$(DCP_E_SUFFIX):
	@EDIR="$(EDIR)" BUILD_FOLDER="$(BUILD_FOLDER)" EXAMPLE_CODE_SUBFOLDER="$(EXAMPLE_CODE_SUBFOLDER)" EXAMPLE=$* \
	MULTI_SRC_DIRS="$(MULTI_SRC_DIRS)" DEPLOY_CODE_PATH_KV_SEP="$(DEPLOY_CODE_PATH_KV_SEP)" \
	"$(SHELL)" "$(SCRIPT_FOLDER)code_path.sh"

deploy_code_path: $(DCP_EXAMPLES) ##@GOOL Find all code file paths for all examples.

#--------------------------------#
#--- Deploy & website targets ---#
#--------------------------------#

# For more information, see the *.hs files in the drasil-website folder.
website: ##@Deploy First builds all Drasil packages, and then executes the drasil-website.
	stack build $(stackArgs) "drasil-website"
	CUR_DIR="$(PWD)/" \
	DEPLOY_FOLDER="$(CUR_DIR)$(DEPLOY_FOLDER)"  \
	DOCS_FOLDER="$(DOCS_FOLDER)" \
	DOX_FOLDER="doxygen/" \
	EXAMPLES_FOLDER="examples/" \
	SRS_FOLDER_FRAG="srs/" \
	GRAPH_FOLDER="$(GRAPH_FOLDER)" \
	ANALYSIS_FOLDER="$(ANALYSIS_FOLDER)" \
	PACKAGES="$(PACKAGES)" \
	TYPEGRAPH_FOLDER="$(TYPEGRAPH_FOLDER)" \
	CLASSINST_GRAPH_FOLDER="$(CLASSINST_GRAPH_FOLDER)" \
	stack exec -- "website"

# Deploys the Drasil website. Called by the deploy target.
# If you have all the necessary generated targets listed
# in `deploy`, then this will skip the re-generation of 
# those files. Currently, the deploy_stage.sh script does
# not work for Windows Git Bash users.
deploy_lite: ##@Deploy Deploy the Drasil website without regenerating artifacts. For local development.
	@mkdir -p "$(DEPLOY_FOLDER)"
	@BUILD_FOLDER="$(BUILD_FOLDER)" DEPLOY_FOLDER="$(DEPLOY_FOLDER)" GRAPH_FOLDER="$(GRAPH_FOLDER)" \
	EXAMPLE_DIRS="$(EXAMPLE_DIRS)" MULTI_SRC_DIRS="$(MULTI_SRC_DIRS)" ANALYSIS_FOLDER="$(ANALYSIS_FOLDER)" \
	TRACEY_GRAPHS_FOLDER="$(TRACEY_GRAPHS_FOLDER)" DEPLOY_CODE_PATH_KV_SEP="$(DEPLOY_CODE_PATH_KV_SEP)" \
	WEBSITE_FOLDER="$(WEBSITE_FOLDER)" \
	MAKE="$(MAKE)" "$(SHELL)" "$(SCRIPT_FOLDER)"deploy_stage.sh

# This rule is for use with developing deployment layout locally. As part of it, it ensures all needed
# dependencies exist. One of the downsides is we ensure all files are re-generated which means the TeX
# files appear newer and thus PDF's are regenerated. If you want to "just generate the structure,
# everything exists," (or you've run `deploy` once already) then `deploy_lite` does just that and is
# what `deploy.bash` calls. 
deploy: analysis graphs packagedeps docs tex doxygen website ##@Deploy Generates all artifacts and the Drasil website locally.
	"$(MAKE)" deploy_lite

#-----------------------#
#--- Cleanup targets ---#
#-----------------------#

# Removes all generated folders.
$(filter $(CLEAN_GF_PREFIX)%, $(CLEAN_FOLDERS)): $(CLEAN_GF_PREFIX)%:
	- rm -rf "./$*/"

clean_artifacts: $(CLEAN_FOLDERS) ##@Cleaning Remove generated artifacts & folders. (alt.: cleanArtifacts)
	- rm -f "$(CACHED_MSV_FILE)"

# TODO: HELP_FUN's pattern match ignores targets with aliases, this is a temporary exterior alias until we fix it.
cleanArtifacts: clean_artifacts

clean: clean_artifacts ##@Cleaning Fully clean all generated builds, artifacts, & folders.
	- stack clean

#--------------------------#
#--- Help & Information ---#
#--------------------------#

# Credits to "nowox" from StackOverflow: https://stackoverflow.com/a/30796664/16760741
HELP_FUN = \
	%help; while(<>){push@{$$help{$$2//'options'}},[$$1,$$3] \
	if/^([\w-_]+)\s*:.*\#\#(?:@(\w+))?\s(.*)$$/}; \
	print"$$_:\n", map"  $$_->[0]".(" "x(20-length($$_->[0])))."$$_->[1]\n",\
	@{$$help{$$_}},"\n" for keys %help; \

# This help target uses a perl script found from https://stackoverflow.com/questions/8889035/how-to-document-a-makefile.
# Documented comments may only be one line and must start with "##".
# We can also categorize our targets by using an "@" symbol.
help:  ##@Help Show this help.
	@perl -e '$(HELP_FUN)' $(MAKEFILE_LIST)
	@echo "Build-specific targets where X is a drasil package name. Run \"make help_packages\" to see a list of possible packages:"
	@echo "  X$(BUILD_P_SUFFIX)             Builds a given \"drasil-\" package."
	@echo "  X$(DOC_P_SUFFIX)               Currently unused."
	@echo "  X$(GRAPH_P_SUFFIX)             Creates a package dependency graph."
	@echo ""
	@echo "Example-specific targets where X is the example. Run \"make help_examples\" to see a list of possible examples:"
	@echo "  X$(GEN_E_SUFFIX)               Generate individual example in HTML and LaTeX format."
	@echo "  X$(TEST_E_SUFFIX)              Generate individual example and create a comparison against stable in the log folder."
	@echo "  X$(INSTALL_E_SUFFIX)           Install individual example executable(s) into your local binary path."
	@echo "  X$(STABILIZE_E_SUFFIX)         Generate individual example and overwrite the contents of stable with the new version."
	@echo "  X$(TEX_E_SUFFIX)               Generate individual example as a PDF (from LaTeX files)."
	@echo "  X$(TRACE_GRAPH_SUFFIX)       Generate individual example in HTML and LaTeX format with traceability graphs filled in."
	@echo "  X$(BC_E_SUFFIX)       Remove specific example from the build folder."
	@echo "  X$(CODE_E_SUFFIX)              Generate individual example code."
	@echo "  X$(DCP_E_SUFFIX)  Get all generated code file paths in the example."
	@echo ""
	@echo "To get started with Drasil, try running \"make\"."

help_examples: ##@Help Lists all examples.
	@echo "A list of examples currently in Drasil:"
	@for example in $(EXAMPLES); do \
		echo "  $$example"; \
	done

help_packages: ##@Help Lists all packages.
	@echo "A list of packages currently in Drasil:"
	@for package in $(PACKAGES); do \
		echo "  $$package"; \
	done

.PHONY: help clean clean_artifacts cleanArtifacts gool code deps hlint hot_hlint analysis tex doc debug test graphs graphmod check_stack nographs graphs website deploy_code_path deploy deploy_lite all install $(GOOLTEST) $(ALL_EXPANDED_TARGETS)
