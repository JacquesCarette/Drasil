01. A Holistic Approach to Pain Relief for Research Software Developers
	- thank you for your attention
	- analogy between holistic medicine and techniques for research software development
	- holistic medicine combines traditional and alternative medicine
	- in this talk the analogy is emphasizing the combination aspect; 
        %- it depends
          on each person's perspective whether the proposed "treatments" are traditional
          or alternative.

02. Outline
	- discussing goal and the pain points that get in the way and then treatment options
	%- ask for a show of hands on - not an option for UGA talk
		- LP (including Jupyter notebooks)
		- Code Gen (including Maple, Matlab, Simulink)
	- combining LP and Code Gen

03. Health Goals
	- sustainable - requirements for the present, reproducible for the future
	- reproducible - providing all necessary data, code and documentation to your future self 
          and others

04. Problems with Achieving Goals: Pain Points
	- From Developer Interviews:
		• Lack of time
		• Lack of software development experience 
		• Lack of technology experience
		• Frequency of change

05. Treatment 1: Literate Programming
	- documentation with code, as opposed to code with documentation
	- tangle extracts code
	- weave extracts docs
	- CWEB, Sweave, Jupyter, emacs ord mode, etc.

06. Fuelpin
	- thermal analysis of fuel pins - has to be numerical, rather than experimental
	- redid existing software, but with a literate approach

07. Example (linear element power)
	- highlight the explanation in tex combined with the code - captures rationale
	- say everything twice!

08. LP Treatment Evaluation
	{- spend time on this slide}
	- uncovered issues because code and doc together, unlike original
	- lack of time -- HELPS -- forces developers to spend time on doc
	- lack of dev exp -- NEUTRAL -- offers no design advice, have to be clever, 
          captures no design knowledge
	- lack of technology experience -- HINDERS -- exacerbates this problem
	- frequency of change -- HELPS and HINDERS -- code and doc maintained together - but not for 
          large changes
	- difficult to refactor
	- have to be clever to get advantage, manually embedding info, traceability and structure

09. Treatment 2: Code Generation
	- code that writes code
	%- analogous to how a compiler takes a high level language and generates machine code

10. A Virtual Material Testing Laboratory
	- simple material tests, like uniaxial extension, with different constitutive equations

11. Calculations for a VM Testing Lab
	- intentionally dense slide, to highlight that code generation can do all the work
	- by changing F, Q, etc can get viscous, viscoelastic, elastoviscoplastic, shear hardening,
	  thinning, etc.  

12. Code Generation example summary - v quick
	- can create members of a family of material models
	- regenerate when there is change

13. Knowledge Capture and Code Generation
	- the advantage is providing automation for codified knowledge
	- understand something teach it to someone else -- deeply understand something, teach 
          it to a computer
	- go through a few examples - maple, org mode, (lex and yacc), ATLAS

14. Code Gen Treatment evaluation
	{- spend some time on this slide}
	- lack of time -- HELPS -- saves time by generation
	- lack of dev exp -- HELPS -- less need to worry about code, captures knowledge
	- lack of technology experience -- HINDERS -- exacerbates this problem
	- frequency of change -- HELPS -- code is easily updated

15. Holistic Approach
	- combine lit. programming emphasis on documentation with code gen, but gen all things
	- codify MORE knowledge - physics, computing, document, design, %traceab, technology

16. GlassBR Example
	- predict risk of breakage of glass pane under load from an explosion (blast)
	%- use as an example for the holistic approach

17. Drasil Inputs
	- no details on this one, just highlight name of program - a piece of knowledge to capture
          and use
	- we'll come back to the other pieces of knowledge

18. Drasil Inputs Program Name: GlassBR
	- program name is GlassBR (for Glass Breakage)

19. Artifacts and folder structure
	- artifacts and folder structure

20. Artifacts and folder structure with GlassBR highlighted
	- highlight how many times the name appears
	- cannot just change with search and replace

21. SRS with GlassBR highlighted, in tex and html
	- Software requirements specification
	- name of program appears throughout
	- generate two different formats - tex and html
	- other information here too - we'll get back to that

22. README.md with GlassBR highlighted
	- name appears again

23. Makefiles with GlassBR highlighted
	- Makefile needs to know the folders where code appears, uses project name

24. Code with GlassBR highlighted
	- the generated code itself uses the project's name

25. Jtol in SRS.pdf
	- another piece of information is the equation that represents the stress distribution factor
	- need the variables that Jtol depends on, and the equation

26. Jtol in SRS.tex
	- the pdf version comes from compiling the tex version

27. Jtol in SRS.html
	- can have the same information, but in html format

28. Jtol in Python
	- can have in Python syntax, using a structure (record) that holds the data
	- could have sent the variables separately (another variability)

29. Jtol in Java
	- now in Java
	- different view of the same information

30. Jtol in Drasil
	- this is the only say it ONCE part
	- better that literate programming in this way

31. JTol with Unit Conversion
	- frequency of change 
	- realized a mistake, and fixed it everywhere, just by fixing in one place and regenerating

32. Drasil Inputs, link to Drasil
	- Drasil is our project for generating all things
	- other inputs include
		- authors
		- equations
		- design decisions, like input structure

33. Figure showing traceability of inputs
	- graphical depiction of the codified knowledge and where it appears in the generated 
          artifacts

34. Holistic Treatment and Side Effects
	{- spend some time on this slide}
	- lack of time -- HELPS -- saves time by generation
	- lack of dev exp -- HELPS -- can select des. Dec, if capture des knowledge
	- lack of technology experience -- HELPS -- can gen technology (CI, Makefile, etc.)
	- frequency of change -- HELPS -- code and doc are easily updated, in sync, consistent by construction
	- more automation than LP, but still has benefits of LP through emphasizing docs.
	- treats pain, no side effects, but expensive

35. Concluding Remarks
	- documentation doesn't have to be painful
	- combine LPs emphasis on docs with the generate everything philosophy
	- codify as much knowledge as possible
	- as much automation as possible
	- believe this is the way of the future, but we aren't there yet
	- need more research and "clinical trials"
	- thank you for your attention
	

