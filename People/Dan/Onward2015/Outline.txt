Outline:

0. Abstract

1. Introduction

Context
- first application of computers was scientific computing (SC)
- the importance of SC code - used for decisions that impact health, safety and the economy
- important enough to follow certification standards in some cases, CSA, Roache
- problem with standards is the time and money required to meet them, resistance from practitioners (can cite Roache to support this)
- many scientists seem to prefer a more agile development process, but this does not mean that this is the best process - with the proper methods and tools, scientists can follow a more structured approach, and still focus on frequent feedback and course correction - can meet documentation requirements for certification, and improve productivity.

Our goal is to have our cake and eat it too.  We want to improve the qualities (verifiability, reliability, understandability etc.) and at the same time improve performance.  Moreover, we want to improve productivity. Save time and money on SC software development, certification and re-certification.

To accomplish this we need to do the following:

- Remove duplication between software artifacts for scientific computing software (can cite Wilson et al DRY principle)
- Provide complete traceability between all artifacts

To achieve the above two goals, we propose the following:

- Provide methods, tools and techniques to support developing scientific software using a literate process
- Use ideas from software product lines, or program families
- Use code generation

- roadmap of the sections that are coming


2. Background

- introductory blurb for this section

2.1 Challenges for SC Software Quality

From Yu (2011) (PhD thesis, now in our repository)
- approximation challenge
- unknown solution challenge - no test oracle
- technique selection challenge
- input output challenge
- modification challenge

2.2 History of Attempts to Improve Quality

History of approaches to improve SC quality and reduce cost (from Yu, 2011)
- object orientation
- agile methods
- program family approach
- several techniques
	- libraries
	- component-based development
	- aspect-oriented programming
	- generic programming
	- generative programming
	- problem solving environment
	- design patterns

2.3 Program Family Approach
- define the program family approach
- SC software satisfies the 3 hypotheses from Weiss: redevelopment hypothesis, oracle hypothesis and organizational hypothesis
- many examples where reuse has not been achieved

2.4 Literate Programming
- overview of LP, starting with Knuth - a similar background to what we need here is given in SmithKoothoorAndNedialkov.pdf


3. What is Possible with a Literate Program Family Approach

- this is the discussion section - give advantages and then use examples to illustrate

3.1 Software Certification
- need to generate required documentation, without impeding the work of the scientists
- need to be able to make changes at reasonable cost - this requires traceability

Start with a default set of documentation, as follows
	- Problem Statement
	- Development Plan
	- Requirements Specification
	- Verification and Validation plan
	- Design Specification
	- Code
	- Verification and Validation Report
	- User Manual
(A start to an explanation about these documents is in ZhengEtAl2015SS, since the document is not complete, I will not check it into the repository, but e-mail it to you.)

3.2 Knowledge Capture
- conservation of thermal energy equation - used for thermal analysis of fuel pins and then reused for solar water heating tank
- maybe hg/hc example?
- Build a library of artifacts that can be reused in many different contexts
- example of “Commonality Analysis for a Family of Material Models” (SmithMcCutchanAndCarette2014 - not yet published - in mmsc repos) - the section on the purpose of the document (Section 1.1) discusses how the documentation combines various sources and uses a consistent notation and terminology

3.3 "Everything should be made as simple as possible, but not simpler."  (Einstein quote)
- although powerful/general commercial finite element programs are available, they are often not used to develop new “widgets”
- reasons are cost, and complexity
- rather than use simulation, engineers often resort to building prototypes and testing
- engineers would greatly benefit from tools to assist their design efforts that are customized to their exact set of problems - with a literate family approach family members can be generated to fit their needs
- if an engineer designs parts for strength, they could have a general stress analysis program - the program could be 3D if needed, or specialized for plane stress or plane strain, if that was the appropriate assumption - the program could even be customized to the parameterized shape of the part they are interested in, with only the degrees of freedom, like material properties, or the specific dimensions, they can change being exposed.
 
3.4 Optimization
- Connect optimization with analysis.  Optimization requires running multiple analysis cases.  Code generation can be used to build an efficient model that has just what is needed, and no more.  As the optimization searches the design space, new models can be generated.
- An optimization problem for a part where the shape and constitutive equation are degrees of freedom, cite family of material models (SmithMcCutchanAndCarette2014)

3.5 Verification

- requirements include so-called “sanity” checks that can be reused when they come up in subsequent phases
- for instance, requirement would state conservation of mass, or the fact that lengths are always positive - the first used to test output, the second to guard against invalid input

- computational variability testing, from Yu (2011), FEM example
- usual to do grid refinement tests - same order of interpolation, but more points
- code generation allows for increases in the order of interpolation, for the same grid
- Yu discusses in section 6.3 of her thesis

3.6 Incorporate nonfunctional requirements in a decision support system for selecting the best design options.  Use AHP. - see Smith2006.pdf

4. Concluding Remarks

